
/**
 *   Stacktracing
 *
 *   Functions в_ generate a stacktrace
 *
 *  Copyright: 2009 Fawzi
 *  License:   drTango license
 *  Authors:   Fawzi Mohamed
 */
module core.tools.StackTrace;
import util.Demangler;
import runtime;
import thread;
import core.Traits: ctfe_i2a;
import stdrus;
import stringz : изТкст0;
import cidrus: abort;
version(Windows){
    import core.tools.WinStackTrace;
} else {
    import rt.core.stdc.posix.ucontext;
    import rt.core.stdc.posix.sys.типы: pid_t,pthread_t;
    import rt.core.stdc.signal;
    import rt.core.stdc.stdlib;
}
version(linux){
    import core.tools.LinuxStackTrace;
}

version(CatchRecursiveTracing){
    ThreadLocal!(цел) recursiveStackTraces;

    static this(){
        recursiveStackTraces=new ThreadLocal!(цел)(0);
    }
}

version(Windows){
} else {
   struct КонтекстСледа{
       бул естьКонтекст_ли;
       ucontext_t контекст;
       pid_t hProcess;
       pthread_t hThread;
   }
}

alias т_мера function(КонтекстСледа* контекст,КонтекстСледа* contextOut,т_мера* буфСледа,т_мера bufLength,цел *флаги) AddrBacktraceFunc;
AddrBacktraceFunc addrBacktraceFnc;
alias бул function(ref Исключение.ИнфОКадре fInfo,КонтекстСледа* контекст,ткст буф) SymbolizeFrameInfoFnc;
SymbolizeFrameInfoFnc symbolizeFrameInfoFnc;

static this(){
    addrBacktraceFnc=&defaultAddrBacktrace;
    symbolizeFrameInfoFnc=&defaultSymbolizeFrameInfo;
}

/// sets the function used for адрес stacktraces
extern(C) проц rt_setAddrBacktraceFnc(AddrBacktraceFunc f){
    addrBacktraceFnc=f;
}
/// sets the function used в_ symbolize a ИнфОКадре
extern(C) проц rt_setSymbolizeFrameInfoFnc(SymbolizeFrameInfoFnc f){
    symbolizeFrameInfoFnc=f;
}
/// creates a stack след (defined in the рантайм)
extern(C) Исключение.ИнфОСледе rt_createTraceContext( ук  ptr );

//alias Исключение.ИнфОСледе function( ук  ptr = пусто ) TraceHandler;

/// builds a backtrace of адрesses, the адрesses are адрesses of the *следщ* instruction, 
/// *return* адрesses, the most likely the calling instruction is the one before them
/// (stack top excluded)
extern(C) т_мера rt_addrBacktrace(КонтекстСледа* контекст, КонтекстСледа *contextOut,т_мера*буфСледа,т_мера bufLength,цел *флаги){
    if (addrBacktraceFnc !is пусто){
        return addrBacktraceFnc(контекст,contextOut,буфСледа,bufLength,флаги);
    } else {
        return 0;
    }
}

/// tries в_ sybolize a frame information, this should try в_ build the best
/// backtrace information, if possible finding the calling контекст, thus 
/// if fInfo.точныйАдрес is нет the адрес might be изменён в_ the one preceding it
/// returns да if it managed в_ at least найди the function имя
extern(C) бул rt_symbolizeFrameInfo(ref Исключение.ИнфОКадре fInfo,КонтекстСледа* контекст,ткст буф){
    if (symbolizeFrameInfoFnc !is пусто){
        return symbolizeFrameInfoFnc(fInfo,контекст,буф);
    } else {
        return нет;
    }
}

// names of the functions that should be ignored for the backtrace
цел[ткст] внутренФунки;
static this(){
    внутренФунки["D5tango4core10stacktrace10StackTrace20defaultAddrBacktraceFPS5tango4core10stacktrace10StackTrace12TraceContextPS5tango4core10stacktrace10StackTrace12TraceContextPkkPiZk"]=1;
    внутренФунки["_D5tango4core10stacktrace10StackTrace20defaultAddrBacktraceFPS5tango4core10stacktrace10StackTrace12TraceContextPS5tango4core10stacktrace10StackTrace12TraceContextPmmPiZm"]=1;
    внутренФунки["rt_addrBacktrace"]=1;
    внутренФунки["D5tango4core10stacktrace10StackTrace14BasicTraceInfo5traceMFPS5tango4core10stacktrace10StackTrace12TraceContextiZv"]=1;
    внутренФунки["D5tango4core10stacktrace10StackTrace11basicTracerFPvZC9Exception9TraceInfo"]=1;
    внутренФунки["rt_createTraceContext"]=1;
    внутренФунки["D2rt6dmain24mainUИПPaZi7runMainMFZv"]=1;
    внутренФунки["D2rt6dmain24mainUИПPaZi6runAllMFZv"]=1;
    внутренФунки["D2rt6dmain24mainUИПPaZi7tryExecMFDFZvZv"]=1;
    внутренФунки["_D5tango4core10stacktrace10StackTrace20defaultAddrBacktraceFPS5tango4core10stacktrace10StackTrace12TraceContextPS5tango4core10stacktrace10StackTrace12TraceContextPkkPiZk"]=1;
    внутренФунки["_rt_адрBacktrace"]=1;
    внутренФунки["_D5tango4core10stacktrace10StackTrace14BasicTraceInfo5traceMFPS5tango4core10stacktrace10StackTrace12TraceContextiZv"]=1;
    внутренФунки["_D5tango4core10stacktrace10StackTrace11basicTracerFPvZC9Exception9TraceInfo"]=1;
    внутренФунки["_rt_createTraceContext"]=1;
    внутренФунки["_D2rt6dmain24mainUИПPaZi7runMainMFZv"]=1;
    внутренФунки["_D2rt6dmain24mainUИПPaZi6runAllMFZv"]=1;
    внутренФунки["_D2rt6dmain24mainUИПPaZi7tryExecMFDFZvZv"]=1;
}

/// returns the имя of the function at the given adress (if possible)
/// function@ and then the адрес. For delegates you can use .funcptr
/// does not demangle
ткст имяФцииПо(ук  адр, ткст буф){
    Исключение.ИнфОКадре fInfo;
    fInfo.сотри();
    fInfo.адрес=cast(т_мера)адр;
    if (rt_symbolizeFrameInfo(fInfo,пусто,буф) && fInfo.func.length){
        return fInfo.func;
    } else {
        return "функция@"~ctfe_i2a(cast(т_мера)адр);
    }
}
/// ditto
ткст имяФцииПо(проц * адр){
    сим[1024] буф;
    return имяФцииПо(адр,буф).dup;
}

/// точность of the адрesses given by the backtrace function
enum ТочностьАдра{
    ВсеВозврат=0,
    КрайнеСтрого=1,
    ВсеСтрого=3
}

/// basic class that represents a stacktrace
class БазовоеИнфОСледе: Исключение.ИнфОСледе{
    т_мера[] адресаСледов;
    т_мера[128] буфСледа;
    ТочностьАдра точностьАдра;
    КонтекстСледа контекст;
    /// cretes an пустой stacktrace
    this(){}
    /// creates a stacktrace with the given адресаСледов
    this(т_мера[] адресаСледов,ТочностьАдра точностьАдра){
        this.адресаСледов[]=адресаСледов;
        if (адресаСледов.length<=буфСледа.length){
            // change в_ either always копируй (and обрежь) or never копируй?
            буфСледа[0..адресаСледов.length]=адресаСледов;
            this.адресаСледов=буфСледа[0..адресаСледов.length];
        }
        this.точностьАдра=точностьАдра;
    }
    /// takes a stacktrace
    проц след(КонтекстСледа *contextIn=пусто,цел skИПFrames=0){
        цел флаги;
        т_мера nFrames=rt_addrBacktrace(contextIn,&контекст,буфСледа.ptr,буфСледа.length,&флаги);
        адресаСледов=буфСледа[skИПFrames..nFrames];
        точностьАдра=cast(ТочностьАдра)флаги;
        if (флаги==ТочностьАдра.КрайнеСтрого && skИПFrames!=0)
            точностьАдра=ТочностьАдра.ВсеВозврат;
    }
    /// loops on the stacktrace
    цел opApply( цел delegate( ref Исключение.ИнфОКадре fInfo ) loopBody){
        Исключение.ИнфОКадре fInfo;
        for (т_мера iframe=0;iframe<адресаСледов.length;++iframe){
            сим[2048] буф;
            сим[1024] buf2;
            fInfo.сотри();
            fInfo.адрес=cast(т_мера)адресаСледов[iframe];
            fInfo.iframe=cast(т_дельтаук)iframe;
            fInfo.точныйАдрес=(точностьАдра & 2) || (iframe==0 && (точностьАдра & 1));
            rt_symbolizeFrameInfo(fInfo,&контекст,буф);
            
            auto r= fInfo.func in внутренФунки;
            fInfo.internalFunction |= (r !is пусто);
            fInfo.func = demangler.demangle(fInfo.func,buf2);
            цел рез=loopBody(fInfo);
            if (рез) return рез;
        }
        return 0;
    }
    /// writes out the stacktrace
    проц writeOut(проц delegate(ткст) сток){
        foreach (ref fInfo; this){
            if (!fInfo.internalFunction){
                fInfo.выпиши(сток);
                сток("\n");
            }
        }
    }
}

version(linux){
    version=LibCBacktrace;
    version=DlадрSymbolification;
    version=ElfSymbolification;
}
version(darwin){
    version=LibCBacktrace;
    version=DlадрSymbolification;
}
version(LibCBacktrace){
    extern(C)цел backtrace(проц**,цел);
}

/// default (drTango given) backtrace function
т_мера defaultAddrBacktrace(КонтекстСледа* контекст,КонтекстСледа*contextOut,
    т_мера*буфСледа,т_мера length,цел*флаги){
    version(LibCBacktrace){
        //if (контекст!is пусто) return 0; // сейчас it just gives a local след, uncomment & пропусти?
        *флаги=ТочностьАдра.КрайнеСтрого;
        return cast(т_мера)backtrace(cast(проц**)буфСледа,length);
    } else version (Windows){
        return winAddrBacktrace(контекст,contextOut,буфСледа,length,флаги);
    } else {
        return 0;
    }
}

version(DlадрSymbolification){
    extern(C) struct Dl_info {
      сим *dli_fname;      /* имяф of defining объект */
      проц *dli_fbase;      /* Load адрес of that объект */
      сим *dli_sname;      /* Name of nearest lower symbol */
      проц *dli_sадр;      /* Exact значение of nearest symbol */
    }

    extern(C)цел dlадр(ук  адр, Dl_info* инфо);

    /// poor symbolication, uses dlадр, gives no строка инфо, limited инфо on statically linked файлы
    бул dlадрSymbolizeFrameInfo(ref Исключение.ИнфОКадре fInfo,КонтекстСледа*контекст,ткстбуф){
        Dl_info dli;
        проц *ИП=cast(проц*)(fInfo.адрес);
        if (!fInfo.точныйАдрес) --ИП;
        if (dlадр(ИП, &dli))
        {
            if (dli.dli_fname && dli.dli_fbase){
                fInfo.offsetImg = cast(т_дельтаук)ИП - cast(т_дельтаук)dli.dli_fbase;
                fInfo.baseImg = cast(т_мера)dli.dli_fbase;
                fInfo.файл=dli.dli_fname[0..strlen(dli.dli_fname)];
            }
            if (dli.dli_sname && dli.dli_sадр){
                fInfo.offsetSymb = cast(т_дельтаук)ИП - cast(т_дельтаук)dli.dli_sадр;
                fInfo.baseSymb = cast(т_мера)dli.dli_sадр;
                fInfo.func = dli.dli_sname[0..strlen(dli.dli_sname)];
            }
        }
        return да;
    }
}


version(ElfSymbolification){

    бул elfSymbolizeFrameInfo(ref Исключение.ИнфОКадре fInfo,
        КонтекстСледа* контекст, ткст буф)
    {
        Dl_info dli;
        проц *ИП=cast(проц*)(fInfo.адрес);
        if (!fInfo.точныйАдрес) --ИП;
        if (dlадр(ИП, &dli))
        {
            if (dli.dli_fname && dli.dli_fbase){
                fInfo.offsetImg = cast(т_дельтаук)ИП - cast(т_дельтаук)dli.dli_fbase;
                fInfo.baseImg = cast(т_мера)dli.dli_fbase;
                fInfo.файл=dli.dli_fname[0..strlen(dli.dli_fname)];
            }
            if (dli.dli_sname && dli.dli_sадр){
                fInfo.offsetSymb = cast(т_дельтаук)ИП - cast(т_дельтаук)dli.dli_sадр;
                fInfo.baseSymb = cast(т_мера)dli.dli_sадр;
                fInfo.func = dli.dli_sname[0..strlen(dli.dli_sname)];
            } else {
                // try static symbols
                foreach(symName,symAddr,symEnd,pub;StaticSectionInfo) {
                    if (cast(т_мера)ИП>=symAddr && cast(т_мера)ИП<symEnd) {
                        fInfo.offsetSymb = cast(т_дельтаук)ИП - cast(т_дельтаук)symAddr;
                        fInfo.baseSymb = cast(т_мера)symAddr;
                        fInfo.func = symName;
                        break;
                    }
                }
            }
        }
        StaticSectionInfo.resolveLineNumber(fInfo);
        return да;
    }
}

/// loads symbols for the given frame инфо with the methods defined in drTango itself
бул defaultSymbolizeFrameInfo(ref Исключение.ИнфОКадре fInfo,КонтекстСледа *контекст,ткст буф){
    version(ElfSymbolification) {
        return elfSymbolizeFrameInfo(fInfo,контекст,буф);
    } else version(DlадрSymbolification){
        return dlадрSymbolizeFrameInfo(fInfo,контекст,буф);
    } else version(Windows) {
        return winSymbolizeFrameInfo(fInfo,контекст,буф);
    } else {
        return нет;
    }
}

/// function that generates a след (handler compatible with old ИнфОСледе)
Исключение.ИнфОСледе basicTracer( ук  ptr = пусто ){
    БазовоеИнфОСледе рез;
    try{
        version(CatchRecursiveTracing){
            recursiveStackTraces.знач=recursiveStackTraces.знач+1;
            scope(exit) recursiveStackTraces.знач=recursiveStackTraces.знач-1;
            // printf("tracer %d\n",recursiveStackTraces.знач);
            if (recursiveStackTraces.знач>10) {
                stdrus.дош("hit maximum recursive tracing (tracer asserting...?)\n");
                abort();
                return пусто;
            }
        }
        рез=new БазовоеИнфОСледе();
        рез.след(cast(КонтекстСледа*)ptr);
    } catch (Исключение e){
        stdrus.дош("tracer got exception:\n");
        stdrus.дош(e.сооб);
        e.выпиши((ткстs){ stdrus.дош(s); });
        stdrus.дош("\n");
    } catch (Объект o){
        stdrus.дош("tracer got объект exception:\n");
        stdrus.дош(o.вТкст());
        stdrus.дош("\n");
    }
    return рез;
}

// signal handling
version(Posix){
    version(linux){
        version(X86){
            version = haveSegfaultTrace;
        }else version(X86_64){
            version = haveSegfaultTrace;
        }
    }

    extern(C) проц tango_stacktrace_fault_handler (цел sn, siginfo_t * si, проц *ctx){
        stdrus.дош(изТкст0(strsignal(sn)));
        stdrus.дош(" encountered at:\n");
        ucontext_t * контекст = cast(ucontext_t *) ctx;
        version(haveSegfaultTrace){
            ук  stack;
            ук  код;
            version(X86){
                код = cast(проц*) контекст.uc_mcontext.gregs[14];
            }else version(X86_64){
                код = cast(проц*) контекст.uc_mcontext.gregs[0x10];
            }else{
                static assert(0);
            }

            Исключение.ИнфОКадре fInfo;
            сим[1024] buf1,buf2;
            fInfo.сотри();
            fInfo.адрес=cast(т_мера)код;
            rt_symbolizeFrameInfo(fInfo,пусто,buf1);
            fInfo.func = demangler.demangle(fInfo.func,buf2);
            fInfo.выведи((ткст s) { stdrus.дош(s); });
        }
        stdrus.дош("\n Stacktrace:\n");
        КонтекстСледа tc;
        tc.естьКонтекст_ли=ctx is пусто;
        if (tc.естьКонтекст_ли) tc.контекст=*(cast(ucontext_t*)ctx);
        Исключение.ИнфОСледе инфо=basicTracer(&tc);
        инфо.выведи((ткст s) { stdrus.дош(s); });

        stdrus.дош("Stacktrace signal handler abort().\n");
        abort();
    }

    sigaction_t fault_action;
        
    проц setupSegfaultTracer(){
        //use an alternative stack; this is useful when infinite recursion
        //  triggers a SIGSEGV
        ук  altstack = malloc(SIGSTKSZ);
        if (altstack) {
            stack_t stack;
            stack.ss_sp = altstack;
            stack.ss_size = SIGSTKSZ;
            sigaltstack(&stack, пусто);
        }
        fault_action.sa_handler = cast(typeof(fault_action.sa_handler)) &tango_stacktrace_fault_handler;
        sigemptyset(&fault_action.sa_mask);
        fault_action.sa_flags = SA_SIGINFO | SA_ONSTACK;
        foreach (sig;[SIGSEGV,SIGFPE,SIGILL,SIGBUS,SIGINT]){
            sigaction(sig, &fault_action, пусто);
        }
    }
    
    version(noSegfaultTrace){
    } else {
        static this(){
            setupSegfaultTracer();
        }
    }
}else version(Windows){
}else {
    pragma(msg, "[INFO] SEGFAULT след not yet implemented for this OS");
}
