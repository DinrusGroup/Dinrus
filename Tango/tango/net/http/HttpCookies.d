/*******************************************************************************

        copyright:      Copyright (c) 2004 Kris Bell. все rights reserved

        license:        BSD стиль: $(LICENSE)

        version:        Initial release: April 2004      
        
        author:         Kris

*******************************************************************************/

module net.http.HttpCookies;

private import  rt.core.stdc.ctype;

private import  io.device.Array;

private import  io.model;

private import  io.stream.Iterator;

private import  net.http.HttpHeaders;

private import  Целое = text.convert.Integer;

/*******************************************************************************

        Defines the Куки class, and the means for reading & writing them.
        Куки implementation conforms with RFC 2109, but supports parsing 
        of сервер-sопрe кукики only. Client-sопрe кукики are supported in
        terms of вывод, but ответ parsing is not yet implemented ...

        See over <A HREF="http://www.faqs.org/rfcs/rfc2109.html">here</A>
        for the RFC document.        

*******************************************************************************/

class Куки //: ИЗаписываемое
{
        ткст          имя,
                        путь,
                        значение,
                        домен,
                        коммент;
        бцел            vrsn=1;              // 'version' is a reserved word
        бул            безопасно=нет;
        дол            максВозраст=дол.min;

        /***********************************************************************
                
                Construct an пустой клиент-sопрe куки. You добавь these
                в_ an вывод request using КлиентППГТ.добавьКуки(), or
                the equivalent.

        ***********************************************************************/

        this () {}

        /***********************************************************************
        
                Construct a куки with the provопрed атрибуты. You добавь 
                these в_ an вывод request using КлиентППГТ.добавьКуки(), 
                or the equivalent.

        ***********************************************************************/

        this (ткст имя, ткст значение)
        {
                установиИмя (имя);
                установиЗначение (значение);
        }

        /***********************************************************************
        
                Набор the имя of this куки

        ***********************************************************************/

        Куки установиИмя (ткст имя)
        {
                this.имя = имя;
                return this;
        }

        /***********************************************************************
        
                Набор the значение of this куки

        ***********************************************************************/

        Куки установиЗначение (ткст значение)
        {
                this.значение = значение;
                return this;
        }

        /***********************************************************************
                
                Набор the version of this куки

        ***********************************************************************/

        Куки установиВерсию (бцел vrsn)
        {
                this.vrsn = vrsn;
                return this;
        }

        /***********************************************************************
        
                Набор the путь of this куки

        ***********************************************************************/

        Куки установиПуть (ткст путь)
        {
                this.путь = путь;
                return this;
        }

        /***********************************************************************
        
                Набор the домен of this куки

        ***********************************************************************/

        Куки установиДомен (ткст домен)
        {
                this.домен = домен;
                return this;
        }

        /***********************************************************************
        
                Набор the коммент associated with this куки

        ***********************************************************************/

        Куки установиКоммент (ткст коммент)
        {
                this.коммент = коммент;
                return this;
        }

        /***********************************************************************
        
                Набор the maximum duration of this куки

        ***********************************************************************/

        Куки установиМаксВозраст (дол максВозраст)
        {
                this.максВозраст = максВозраст;
                return this;
        }

        /***********************************************************************
        
                Indicate whether this куки should be consопрered безопасно or not

        ***********************************************************************/

        Куки установиБезоп (бул безопасно)
        {
                this.безопасно = безопасно;
                return this;
        }
/+
        /***********************************************************************
        
                Вывод the куки as a текст поток, via the provопрed ИПисатель

        ***********************************************************************/

        проц пиши (ИПисатель писатель)
        {
                произведи (&писатель.буфер.используй);
        }
+/
        /***********************************************************************
        
                Вывод the куки as a текст поток, via the provопрed consumer

        ***********************************************************************/

        проц произведи (т_мера delegate(проц[]) используй)
        {
                используй (имя);

                if (значение.length)
                    используй ("="), используй (значение);

                if (путь.length)
                    используй (";Путь="), используй (путь);

                if (домен.length)
                    используй (";Domain="), используй (домен);

                if (vrsn)
                   {
                   сим[16] врем =void;

                   используй (";Версия=");
                   используй (Целое.форматируй (врем, vrsn));

                   if (коммент.length)
                       используй (";Комментарий=\""), используй(коммент), используй("\"");

                   if (безопасно)
                       используй (";Secure");

                   if (максВозраст != максВозраст.min)
                       используй (";Max-Возраст="c), используй (Целое.форматируй (врем, максВозраст));
                   }
        }

        /***********************************************************************
        
                Reset this куки

        ***********************************************************************/

        Куки сотри ()
        {
                vrsn = 1;
                безопасно = нет;
                максВозраст = максВозраст.min;
                имя = путь = домен = коммент = пусто;
                return this;
        }
}



/*******************************************************************************

        Implements a stack of кукики. Each куки is pushed onto the
        stack by a парсер, which takes its ввод из_ ЗаголовкиППГТ. The
        stack can be populated for Всё клиент and сервер sопрe кукики.

*******************************************************************************/

class CookieStack
{
        private цел             depth;
        private Куки[]        кукики;

        /**********************************************************************

                Construct a куки stack with the specified начальное протяженность.
                The stack will grow as necessary over время.

        **********************************************************************/

        this (цел размер)
        {
                кукики = new Куки[0];
                resize (кукики, размер);
        }

        /**********************************************************************

                Pop the stack все the way в_ zero

        **********************************************************************/

        final проц сбрось ()
        {
                depth = 0;
        }

        /**********************************************************************

                Return a fresh куки из_ the stack

        **********************************************************************/

        final Куки сунь ()
        {
                if (depth == кукики.length)
                    resize (кукики, depth * 2);
                return кукики [depth++];
        }
        
        /**********************************************************************

                Resize the stack such that it есть ещё room.

        **********************************************************************/

        private final static проц resize (ref Куки[] кукики, цел размер)
        {
                цел i = кукики.length;
                
                for (кукики.length=размер; i < кукики.length; ++i)
                     кукики[i] = new Куки();
        }

        /**********************************************************************

                Iterate over все кукики in stack

        **********************************************************************/

        цел opApply (цел delegate(ref Куки) дг)
        {
                цел результат = 0;

                for (цел i=0; i < depth; ++i)
                     if ((результат = дг (кукики[i])) != 0)
                          break;
                return результат;
        }
}



/*******************************************************************************

        This is the support point for сервер-sопрe кукики. It wraps a
        CookieStack together with a установи of ЗаголовкиППГТ, along with the
        appropriate куки парсер. One would do something very similar
        for клиент sопрe куки parsing also.

*******************************************************************************/

class ОбзорКуковППГТ //: ИЗаписываемое
{
        private бул                    разобрано;
        private CookieStack             stack;
        private РазборщикКуков            парсер;
        private ОбзорЗаголовковППГТ         заголовки;

        /**********************************************************************

                Construct куки wrapper with the provопрed заголовки.

        **********************************************************************/

        this (ОбзорЗаголовковППГТ заголовки)
        {
                this.заголовки = заголовки;

                // создай a stack for разобрано кукики
                stack = new CookieStack (10);

                // создай a парсер
                парсер = new РазборщикКуков (stack);
        }
/+
        /**********************************************************************

                Вывод each of the кукики разобрано в_ the provопрed ИПисатель.

        **********************************************************************/

        проц пиши (ИПисатель писатель)
        {
                произведи (&писатель.буфер.используй, КонстППГТ.Кс);
        }
+/
        /**********************************************************************

                Вывод the token список в_ the provопрed consumer

        **********************************************************************/

        проц произведи (т_мера delegate(проц[]) используй, ткст кс = КонстППГТ.Кс)
        {
                foreach (куки; разбор)
                         куки.произведи (используй), используй (кс);
        }

        /**********************************************************************

                Reset these кукики for другой разбор

        **********************************************************************/

        проц сбрось ()
        {
                stack.сбрось;
                разобрано = нет;
        }

        /**********************************************************************

                Parse все кукики из_ our ЗаголовкиППГТ, pushing each onto
                the CookieStack as we go.

        **********************************************************************/

        CookieStack разбор ()
        {
                if (! разобрано)
                   {
                   разобрано = да;

                   foreach (ЭлементЗаголовка заголовок; заголовки)
                            if (заголовок.имя.значение == ЗаголовокППГТ.Куки.значение)
                                парсер.разбор (заголовок.значение);
                   }
                return stack;
        }
}



/*******************************************************************************

        Handles a установи of вывод кукики by writing them преобр_в the список of
        вывод заголовки.

*******************************************************************************/

class КукикиППГТ
{
        private ИмяЗаголовкаППГТ  имя;
        private ЗаголовкиППГТ     заголовки;

        /**********************************************************************

                Construct an вывод куки wrapper upon the provопрed 
                вывод заголовки. Each куки добавьed is преобразованый в_ an
                добавьition в_ those заголовки.

        **********************************************************************/

        this (ЗаголовкиППГТ заголовки, ИмяЗаголовкаППГТ имя = ЗаголовокППГТ.УстановитьКуки)
        {
                this.заголовки = заголовки;
                this.имя = имя;
        }

        /**********************************************************************

                Добавь a куки в_ our вывод заголовки.

        **********************************************************************/

        проц добавь (Куки куки)
        {
                // добавь the куки заголовок via our обрвызов
                заголовки.добавь (имя, (БуферВывода буф){куки.произведи (&буф.пиши);});        
        }
}



/*******************************************************************************

        Сервер-sопрe куки парсер. See RFC 2109 for details.

*******************************************************************************/

class РазборщикКуков : Обходчик!(сим)
{
        private enum Состояние {Начало, ЛЗначение, Равно, ПЗначение, Токен, ВКавычка, НКавычка};

        private CookieStack       stack;
        private Массив             Массив;
        private static бул[128]  симКарта;

        /***********************************************************************

                наполни a карта of token разделители

        ***********************************************************************/

        static this ()
        {
                симКарта['('] = да;
                симКарта[')'] = да;
                симКарта['<'] = да;
                симКарта['>'] = да;
                симКарта['@'] = да;
                симКарта[','] = да;
                симКарта[';'] = да;
                симКарта[':'] = да;
                симКарта['\\'] = да;
                симКарта['"'] = да;
                симКарта['/'] = да;
                симКарта['['] = да;
                симКарта[']'] = да;
                симКарта['?'] = да;
                симКарта['='] = да;
                симКарта['{'] = да;
                симКарта['}'] = да;
        }
        
        /***********************************************************************

        ***********************************************************************/

        this (CookieStack stack)
        {
                super();
                this.stack = stack;
                Массив = new Массив(0);
        }

        /***********************************************************************

                Callback for iterator.следщ(). We скан for имя-значение
                pairs, populating Куки instances along the way.

        ***********************************************************************/

        protected т_мера скан (проц[] данные)
        {      
                сим    c;
                цел     mark,
                        vrsn;
                ткст  имя,
                        token;
                Куки  куки;

                Состояние   состояние = Состояние.Начало;
                ткст  контент = cast(ткст) данные;

                /***************************************************************

                        Найдено a значение; установи that also

                ***************************************************************/

                проц установиЗначение (цел i)
                {   
                        token = контент [mark..i];
                        //Print ("::имя '%.*s'\n", имя);
                        //Print ("::значение '%.*s'\n", token);

                        if (имя[0] != '$')
                           {
                           куки = stack.сунь;
                           куки.установиИмя (имя);
                           куки.установиЗначение (token);
                           куки.установиВерсию (vrsn);
                           }
                        else
                           switch (toLower (имя))
                                  {
                                  case "$путь":
                                        if (куки)
                                            куки.установиПуть (token); 
                                        break;

                                  case "$домен":
                                        if (куки)
                                            куки.установиДомен (token); 
                                        break;

                                  case "$version":
                                        vrsn = cast(цел) Целое.разбор (token); 
                                        break;

                                  default:
                                       break;
                                  }
                        состояние = Состояние.Начало;
                }

                /***************************************************************

                        Scan контент looking for куки fields

                ***************************************************************/

                for (цел i; i < контент.length; ++i)
                    {
                    c = контент [i];
                    switch (состояние)
                           {
                           // look for an lValue
                           case Состояние.Начало:
                                mark = i;
                                if (токен_ли(c))
                                    состояние = Состояние.ЛЗначение;
                                continue;

                           // скан until we have все lValue chars
                           case Состояние.ЛЗначение:
                                if (! токен_ли(c))
                                   {
                                   состояние = Состояние.Равно;
                                   имя = контент [mark..i];
                                   --i;
                                   }
                                continue;

                           // should сейчас have either a '=', ';', or ','
                           case Состояние.Равно:
                                if (c is '=')
                                    состояние = Состояние.ПЗначение;
                                else
                                   if (c is ',' || c is ';')
                                       // получи следщ NVPair
                                       состояние = Состояние.Начало;
                                continue;

                           // look for a quoted token, or a plain one
                           case Состояние.ПЗначение:
                                mark = i;
                                if (c is '\'')
                                    состояние = Состояние.ВКавычка;
                                else
                                   if (c is '"')
                                       состояние = Состояние.НКавычка;
                                   else
                                      if (токен_ли(c))
                                          состояние = Состояние.Токен;
                                continue;

                           // скан for все plain token chars
                           case Состояние.Токен:
                                if (! токен_ли(c))
                                   {
                                   установиЗначение (i);
                                   --i;
                                   }
                                continue;

                           // скан until the следщ '
                           case Состояние.ВКавычка:
                                if (c is '\'')
                                    ++mark, установиЗначение (i);
                                continue;

                           // скан until the следщ "
                           case Состояние.НКавычка:
                                if (c is '"')
                                    ++mark, установиЗначение (i);
                                continue;

                           default:
                                continue;
                           }
                    }

                // we ran out of контент; patch partial куки values 
                if (состояние is Состояние.Токен)
                    установиЗначение (контент.length);

                // go home
                return ИПровод.Кф;
        }
                                
        /***********************************************************************
        
                Locate the следщ token из_ the provопрed буфер, and карта a
                буфер reference преобр_в token. Returns да if a token was 
                located, нет otherwise. 

                Note that the буфер контент is not duplicated. Instead, a
                срез of the буфер is referenced by the token. You can use
                Токен.clone() or Токен.вТкст().dup() в_ копируй контент per
                your application needs.

                Note also that there may still be one token left in a буфер 
                that was not terminated correctly (as in eof conditions). In 
                such cases, семы are mapped onto remaining контент and the 
                буфер will have no ещё читаемый контент.

        ***********************************************************************/

        бул разбор (ткст заголовок)
        {
                super.установи (Массив.присвой (заголовок));
                return следщ.ptr > пусто;
        }

        /**********************************************************************

                in-place conversion в_ lowercase 

        **********************************************************************/

        final static ткст toLower (ref ткст ист)
        {
                foreach (цел i, сим c; ист)
                         if (c >= 'A' && c <= 'Z')
                             ист[i] = cast(сим)(c + ('a' - 'A'));
                return ист;
        }

        /***********************************************************************

                Is 'c' a valid token character?

        ***********************************************************************/

        private static бул токен_ли (сим c)
        {
                return (c > 32 && c < 127 && !симКарта[c]);
        }
}
   
     
