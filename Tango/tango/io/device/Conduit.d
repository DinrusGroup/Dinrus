/*******************************************************************************

        copyright:      Copyright (c) 2004 Kris Bell. все rights reserved

        license:        BSD стиль: $(LICENSE)

        version:        Mar 2004: Initial release

        author:         Kris

*******************************************************************************/

module io.device.Conduit;

private import thread,
               exception;

public  import io.model;

/*******************************************************************************

        Провод abstract основа-class, implementing interface ИПровод.
        Only the провод-specific читай(), пиши(), открепи() and 
        размерБуфера() need в_ be implemented for a concrete провод 
        implementation. See Файл for an example.

        Conduits provопрe virtualized access в_ external контент, and
        represent things like файлы or Internet connections. Conduits
        expose a pair of Потокs, are modelled by io.model, 
        and are implemented via classes such as Файл & СокетПровод. 

        добавьitional kinds of провод are easy в_ construct: either subclass 
        io.device.Conduit, or implement io.model. A
        провод typically reads and writes via a Буфер in large chunks, 
        typically the entire буфер. Alternatively, one can invoke метод
        читай(приёмн[]) and/or пиши(ист[]) directly

*******************************************************************************/

class Провод : ИПровод
{
        protected Fiber.Scheduler scheduler;            // optional scheduler
        private   бцел            duration = -1;        // scheduling таймаут

        /***********************************************************************

                Test for asynchronous capability. This will be eligable
                for scheduling where (a) it is создан within a fiber and
                (b) there is a scheduler attached в_ the fiber at the время
                this is invoked.

                Note that fibers may schedule just one outstanding I/O 
                request at a время

        ***********************************************************************/

        this ()
        {
                auto f = Fiber.getThis;
                if (f)
                    scheduler = f.событие.scheduler;
        }

        /***********************************************************************

                Clean up when collected. See метод открепи()

        ***********************************************************************/

        ~this ()
        {
                открепи;
        }

        /***********************************************************************
        
                Return the имя of this провод

        ***********************************************************************/

        abstract ткст вТкст (); 
                     
        /***********************************************************************

                Return a preferred размер for buffering провод I/O

        ***********************************************************************/

        abstract т_мера размерБуфера ();

        /***********************************************************************

                Чтен из_ провод преобр_в a мишень Массив. The provопрed приёмн 
                will be populated with контент из_ the провод. 

                Returns the число of байты читай, which may be less than
                requested in приёмн. Кф is returned whenever an конец-of-flow 
                condition arises.

        ***********************************************************************/

        abstract т_мера читай (проц[] приёмн);

        /***********************************************************************

                Write в_ провод из_ a источник Массив. The provопрed ист
                контент will be записано в_ the провод.

                Returns the число of байты записано из_ ист, which may
                be less than the quantity provопрed. Кф is returned when 
                an конец-of-flow condition arises.

        ***********************************************************************/

        abstract т_мера пиши (проц [] ист);

        /***********************************************************************

                Disconnect this провод. Note that this may be invoked
                Всё explicitly by the пользователь, and implicitly by the СМ.
                Be sure в_ manage multИПle detachment requests correctly:
                установи a flag, or sentinel значение as necessary

        ***********************************************************************/

        abstract проц открепи ();

        /***********************************************************************

                Набор the активное таймаут период for IO calls (in milliseconds)

        ***********************************************************************/

        final проц таймаут (бцел millisec)
        {
                duration = millisec;
        }

        /***********************************************************************

                Get the активное таймаут период for IO calls (in milliseconds)

        ***********************************************************************/

        final бцел таймаут ()
        {
                return duration;
        }

        /***********************************************************************

                Is the провод alive? Default behaviour returns да

        ***********************************************************************/

        бул жив_ли ()
        {
                return да;
        }

        /***********************************************************************
        
                Return the хост. This is часть of the Поток interface

        ***********************************************************************/

        final ИПровод провод ()
        {
                return this;
        }
                            
        /***********************************************************************

                Emit buffered вывод or сбрось buffered ввод

        ***********************************************************************/

        IOПоток слей () 
        {
                return this;
        }

        /***********************************************************************

                Close this провод
                
                Всё ввод and вывод are detached, and are no longer usable

        ***********************************************************************/

        проц закрой ()
        {
                this.открепи;
        }

        /***********************************************************************

                Throw an ВВИскл, with the provопрed сообщение

        ***********************************************************************/

        final проц ошибка (ткст сооб)
        {
                throw new ВВИскл (сооб);
        }

        /***********************************************************************

                Return the ввод поток 

        ***********************************************************************/
        
        final ИПотокВвода ввод ()
        {
                return this;
        }

        /***********************************************************************

                Return the вывод поток

        ***********************************************************************/
        
        final ИПотокВывода вывод ()
        {
                return this;
        }

        /***********************************************************************

                Emit fixed-length контент из_ 'ист' преобр_в this провод, 
                throwing an ВВИскл upon Кф

        ***********************************************************************/

        final Провод помести (проц[] ист)
        {
                помести (ист, this);
                return this;
        }

        /***********************************************************************

                Consume fixed-length контент преобр_в 'приёмн' из_ this провод, 
                throwing an ВВИскл upon Кф

        ***********************************************************************/

        final Провод получи (проц[] приёмн)
        {
               получи (приёмн, this);
               return this; 
        }

        /***********************************************************************
        
                Rewind в_ beginning of файл

        ***********************************************************************/

        final Провод rewind ()
        {
                сместись (0);
                return this;
        }               

        /***********************************************************************

                Transfer the контент of другой провод в_ this one. Returns
                the приёмн ИПотокВывода, or throws ВВИскл on failure.

        ***********************************************************************/

        ИПотокВывода копируй (ИПотокВвода ист, т_мера max = -1)
        {
                перемести (ист, this, max);
                return this;
        }

        /***********************************************************************
        
                Seek on this поток. Source conduits that don't support
                seeking will throw an ВВИскл

        ***********************************************************************/

        дол сместись (дол смещение, Якорь якорь = Якорь.Нач)
        {
                ошибка (this.вТкст ~ " does not support сместись requests");
                return 0;
        }

        /***********************************************************************

                Load текст из_ a поток, and return them все in an
                Массив. 

                Returns an Массив representing the контент, and throws
                ВВИскл on ошибка
                
        ***********************************************************************/

        ткст текст(T=сим) (т_мера max = -1)
        {
                return cast(T[]) загрузи (max);
        }

        /***********************************************************************

                Load the биты из_ a поток, and return them все in an
                Массив. The приёмн Массив can be provопрed as an опция, which
                will be expanded as necessary в_ используй the ввод.

                Returns an Массив representing the контент, and throws
                ВВИскл on ошибка
                
        ***********************************************************************/

        проц[] загрузи (т_мера max = -1)
        {
                return загрузи (this, max);
        }

        /***********************************************************************

                Load the биты из_ a поток, and return them все in an
                Массив. The приёмн Массив can be provопрed as an опция, which
                will be expanded as necessary в_ используй ввод.

                Returns an Массив representing the контент, and throws
                ВВИскл on ошибка
                
        ***********************************************************************/

        static проц[] загрузи (ИПотокВвода ист, т_мера max=-1)
        {
                проц[]  приёмн;
                т_мера  i,
                        длин,
                        chunk;

                if (max != -1)
                    chunk = max;
                else
                   chunk = ист.провод.размерБуфера;

                while (длин < max)
                      {
                      if (приёмн.length - длин is 0)
                          приёмн.length = длин + chunk;

                      if ((i = ист.читай (приёмн[длин .. $])) is Кф)
                           break;
                      длин += i;
                      }

                return приёмн [0 .. длин];
        }

        /***********************************************************************

                Emit fixed-length контент из_ 'ист' преобр_в 'вывод', 
                throwing an ВВИскл upon Кф

        ***********************************************************************/

        static проц помести (проц[] ист, ИПотокВывода вывод)
        {
                while (ист.length)
                      {
                      auto i = вывод.пиши (ист);
                      if (i is Кф)
                          вывод.провод.ошибка ("Провод.помести :: eof while writing");
                      ист = ист [i..$];
                      }
        }

        /***********************************************************************

                Consume fixed-length контент преобр_в 'приёмн' из_ 'ввод', 
                throwing an ВВИскл upon Кф

        ***********************************************************************/

        static проц получи (проц[] приёмн, ИПотокВвода ввод)
        {
                while (приёмн.length)
                      {
                      auto i = ввод.читай (приёмн);
                      if (i is Кф)
                          ввод.провод.ошибка ("Провод.получи :: eof while reading");
                      приёмн = приёмн [i..$];
                      }
        }

        /***********************************************************************
                
                Low-уровень данные перемести, where max represents the maximum
                число of байты в_ перемести. 

                Returns Кф on failure, число of байты copied on success

        ***********************************************************************/

        static т_мера перемести (ИПотокВвода ист, ИПотокВывода приёмн, т_мера max=-1)
        {
                байт[8192] врем;
                т_мера     готово;

                while (max)
                      {
                      auto длин = max;
                      if (длин > врем.length)
                          длин = врем.length;

                      if ((длин = ист.читай(врем[0 .. длин])) is Кф)
                           max = 0;
                      else
                         {
                         max -= длин;
                         готово += длин;
                         auto p = врем.ptr;
                         for (auto j=0; длин > 0; длин -= j, p += j)
                              if ((j = приёмн.пиши (p[0 .. длин])) is Кф)
                                   return Кф;
                         }
                      }

                return готово;
        }
}


/*******************************************************************************

        Base class for ввод поток filtering. The provопрed источник поток 
        should generally never be пусто, though some filters have a need в_ 
        установи this lazily

*******************************************************************************/

class ФильтрВвода : ИПотокВвода
{
        protected ИПотокВвода источник;

        /***********************************************************************

                Attach в_ the provопрed поток. The provопрed источник поток 
                should generally never be пусто, though some filters have a
                need в_ установи this lazily

        ***********************************************************************/

        this (ИПотокВвода источник)
        {
                this.источник = источник;
        }

        /***********************************************************************

                Return the hosting провод

        ***********************************************************************/

        ИПровод провод ()
        {
                return источник.провод;
        }

        /***********************************************************************

                Чтен из_ провод преобр_в a мишень Массив. The provопрed приёмн 
                will be populated with контент из_ the провод. 

                Returns the число of байты читай, which may be less than
                requested in приёмн. Кф is returned whenever an конец-of-flow 
                condition arises.

        ***********************************************************************/

        т_мера читай (проц[] приёмн)
        {
                return источник.читай (приёмн);
        }

        /***********************************************************************

                Load the биты из_ a поток, and return them все in an
                Массив. The приёмн Массив can be provопрed as an опция, which
                will be expanded as necessary в_ используй the ввод.

                Returns an Массив representing the контент, and throws
                ВВИскл on ошибка
                              
        ***********************************************************************/

        проц[] загрузи (т_мера max = -1)
        {
                return Провод.загрузи (this, max);
        }

        /***********************************************************************

                Clear any buffered контент

        ***********************************************************************/

        IOПоток слей ()
        {
                источник.слей;
                return this;
        }

        /***********************************************************************
        
                Seek on this поток. Target conduits that don't support
                seeking will throw an ВВИскл

        ***********************************************************************/

        дол сместись (дол смещение, Якорь якорь = Якорь.Нач)
        {
                return источник.сместись (смещение, якорь);
        }

        /***********************************************************************

                Return the upПоток хост of this фильтр
                        
        ***********************************************************************/

        ИПотокВвода ввод ()
        {
                return источник;
        }            

        /***********************************************************************

                Close the ввод

        ***********************************************************************/

        проц закрой ()
        {
                источник.закрой;
        }
}


/*******************************************************************************

        Base class for вывод поток filtering. The provопрed сток поток 
        should generally never be пусто, though some filters have a need в_ 
        установи this lazily

*******************************************************************************/

class ФильтрВывода : ИПотокВывода
{
        protected ИПотокВывода сток;

        /***********************************************************************

                Attach в_ the provопрed поток

        ***********************************************************************/

        this (ИПотокВывода сток)
        {
                this.сток = сток;
        }

        /***********************************************************************

                Return the hosting провод

        ***********************************************************************/

        ИПровод провод ()
        {
                return сток.провод;
        }

        /***********************************************************************

                Write в_ провод из_ a источник Массив. The provопрed ист
                контент will be записано в_ the провод.

                Returns the число of байты записано из_ ист, which may
                be less than the quantity provопрed. Кф is returned when 
                an конец-of-flow condition arises.

        ***********************************************************************/

        т_мера пиши (проц[] ист)
        {
                return сток.пиши (ист);
        }

        /***********************************************************************

                Transfer the контент of другой провод в_ this one. Returns
                a reference в_ this class, or throws ВВИскл on failure.

        ***********************************************************************/

        ИПотокВывода копируй (ИПотокВвода ист, т_мера max = -1)
        {
                Провод.перемести (ист, this, max);
                return this;
        }

        /***********************************************************************

                Emit/purge buffered контент

        ***********************************************************************/

        IOПоток слей ()
        {
                сток.слей;
                return this;
        }

        /***********************************************************************
        
                Seek on this поток. Target conduits that don't support
                seeking will throw an ВВИскл

        ***********************************************************************/

        дол сместись (дол смещение, Якорь якорь = Якорь.Нач)
        {
                return сток.сместись (смещение, якорь);
        }

        /***********************************************************************
        
                Return the upПоток хост of this фильтр
                        
        ***********************************************************************/

        ИПотокВывода вывод ()
        {
                return сток;
        }              

        /***********************************************************************

                Close the вывод

        ***********************************************************************/

        проц закрой ()
        {
                сток.закрой;
        }
}
