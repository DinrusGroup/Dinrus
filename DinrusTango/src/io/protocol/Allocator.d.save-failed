/*******************************************************************************

        copyright:      Copyright (c) 2004 Kris Bell. все rights reserved

        license:        BSD стиль: $(LICENSE)

        version:        Initial release: October 2004
                        Outback release: December 2006

        author:         Kris

        Allocators в_ use in conjunction with the Читатель class. These are
        intended в_ manage Массив allocation for a variety of Читатель.получи()
        methods

*******************************************************************************/

module io.protocol.Allocator;

private import  io.protocol.model;


class КопияКучи : ИРазместитель
{



        private ИПротокол protocol_;

        /***********************************************************************

        ***********************************************************************/

        this (ИПротокол протокол)
        {
                protocol_ = протокол;
        }

        /***********************************************************************

        ***********************************************************************/

        final ИПротокол протокол ()
        {
                return protocol_;
        }

        final проц сбрось ()
        {
        }

        final проц[] размести (ИПротокол.Читатель читатель, бцел байты, ИПротокол.Тип тип)
        {
                return читатель ((new проц[байты]).ptr, байты, тип);
        }
}

class СрезКучи : ИРазместитель
{



        private бцел            использован;
        private проц[]          буфер;
        private ИПротокол       protocol_;
        private бул            autoreset;

        this (ИПротокол протокол, бцел width=4096, бул autoreset=нет)
        {
                protocol_ = протокол;
                буфер = new проц[width];
                this.autoreset = autoreset;
        }

        final ИПротокол протокол ()
        {
                return protocol_;
        }


        final проц сбрось ()
        {
                использован = 0;
        }

        final проц[] размести (ИПротокол.Читатель читатель, бцел байты, ИПротокол.Тип тип)
        {
                if (autoreset)
                    использован = 0;

                if ((использован + байты) > буфер.length)
                     буфер.length = (использован + байты) * 2;

                auto ptr = &буфер[использован];
                использован += байты;

                return читатель (ptr, байты, тип);
        }
}


class СрезБуфера : ИРазместитель
{


        private ИПротокол protocol_;

        /***********************************************************************

        ***********************************************************************/

        this (ИПротокол протокол)
        {
                protocol_ = протокол;
        }

        /***********************************************************************

        ***********************************************************************/

        final ИПротокол протокол ()
        {
                return protocol_;
        }

        final проц сбрось ()
        {
                протокол.буфер.сожми;
        }

        final проц[] размести (ИПротокол.Читатель читатель, бцел байты, ИПротокол.Тип тип)
        {
                return protocol_.буфер.срез (байты);
        }
}
