/*******************************************************************************

        copyright:      Copyright (c) 2004 Kris Bell. все rights reserved

        license:        BSD стиль: $(LICENSE)

        version:        Initial release: May 2004

        author:         Kris

*******************************************************************************/

module util.log.AppendFiles;

private import  time.Time;

private import  Путь = io.Path,
io.device.File;

private import  io.model;

private import  util.log.Log,
        util.log.AppendFile;

/*******************************************************************************

        Добавка сообщений-логов в набор файлов.

*******************************************************************************/

public class ДобВФайлы : Файлер
{
    private Маска            маска_;
    private ткст[]        пути;
    private цел             индекс;
    private дол            максРазм,
            размерФайла;

    /***********************************************************************

            Создать ДобВФайлы для набора файлов с указанным путём к нему и
            необязательной выкладкой. Минимальное число файлов равно двум,
            максимальное 1000 (точнее 999). Заметьте, что файлы нумеруются
            начиная с нуля, а не единицы.

    ***********************************************************************/

    this (ткст путь, цел счёт, дол максРазм, Добавщик.Выкладка как = пусто)
    {
        --счёт;
        assert (путь);
        assert (счёт > 0 && счёт < 1000);

        // Get a unique fingerprint for this экземпляр
        маска_ = регистрируй (путь);

        // разбей the путь преобр_в components
        auto c = Путь.разбор (путь);

        сим[3] x;
        Время самыйПоследний;
        for (цел i=0; i <= счёт; ++i)
        {
            x[0] = cast(сим)('0' + i/100);
            x[1] = cast(сим)('0' + i/10%10);
            x[2] = cast(сим)('0' + i%10);
            auto p = c.вТкст[0..$-c.суффикс.length] ~ x ~ c.суффикс;
            пути ~= p;

            // use the most recent файл in the установи
            if (Путь.есть_ли(p))
            {
                auto изменён = Путь.изменён(p);
                if (изменён > самыйПоследний)
                {
                    самыйПоследний = изменён;
                    индекс = i;
                }
            }
        }

        // remember the maximum размер
        this.максРазм = максРазм;

        // исправь индекс и открой the appropriate лог файл
        --индекс;
        следщФайл (нет);

        // установи provопрed выкладка (ignored when пусто)
        выкладка (как);
    }

    /***********************************************************************

            Возвращает фингерпринт для данного класса

    ***********************************************************************/

    final Маска маска ()
    {
        return маска_;
    }

    /***********************************************************************

            Вернуть имя данного класса

    ***********************************************************************/

    final ткст имя ()
    {
        return this.classinfo.имя;
    }

    /***********************************************************************

            Доб an событие в_ the вывод

    ***********************************************************************/

    final synchronized проц добавь (СобытиеЛога событие)
    {
        ткст сооб;

        // файл already full?
        if (размерФайла >= максРазм)
            следщФайл (да);

        т_мера пиши (проц[] контент)
        {
            размерФайла += контент.length;
            return буфер.пиши (контент);
        }

        // пиши лог сообщение и слей it
        выкладка.форматируй (событие, &пиши);
        пиши (ФайлКонст.НовСтрЗнак);
        буфер.слей;
    }

    /***********************************************************************

            Switch в_ the следщ файл внутри the установи

    ***********************************************************************/

    private проц следщФайл (бул сбрось)
    {
        // выбери следщ файл in the установи
        if (++индекс >= пути.length)
            индекс = 0;

        // закрой any existing провод
        закрой;

        // сделай it shareable for читай
        auto стиль = Файл.ЧитДоб;
        стиль.совместно = Файл.Общ.Чит;
        auto провод = new Файл (пути[индекс], стиль);

        конфигурируй (провод);

        // сбрось файл размер
        if (сбрось)
            провод.упрости (размерФайла = 0);
        else
            размерФайла = провод.длина;
    }
}

/*******************************************************************************

*******************************************************************************/
unittest
{
    проц main()
    {
        Журнал.корень.добавь (new ДобВФайлы ("foo", 5, 6));
        auto лог = Журнал.отыщи ("fu.bar");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");
        лог.след ("hello {}", "world");

    }
}
