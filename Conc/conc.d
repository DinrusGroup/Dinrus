module concurrent;
// Java жди/уведоми and жди/уведомиВсех support
import conc.all, cidrus, stdrus:вТкст, скажифнс;
import win, thread: Нить;



extern (C) цел sleep(бцел seconds);



проц main()
{
  Мютекс t1 = new Мютекс();
  скажинс ("*Мютекс");
  Семафор t2 = new Семафор(10);
   скажинс ("*Семафор");
  ЯсныйСемафор t3 = new ЯсныйСемафор(10);
    скажинс ("*ЯсныйСемафор");
  СемафорПВПВ t4 = new СемафорПВПВ(10);
    скажинс ("*СемафорПВПВ");
  ВозобновляемыйЗамок t5 = new ВозобновляемыйЗамок();
    скажинс ("*ВозобновляемыйЗамок");
  Щеколда t6 = new Щеколда();
    скажинс ("*Щеколда");
  ОбратныйОтсчёт t7 = new ОбратныйОтсчёт(10);
    скажинс ("*ОбратныйОтсчёт");
  ЛинкованнаяОчередь!(Объект) t8 = new ЛинкованнаяОчередь!(Объект);
    скажинс ("*ЛинкованнаяОчередь");
  ОграниченнаяЛинкованнаяОчередь!(Объект) t9 = new ОграниченнаяЛинкованнаяОчередь!(Объект);
    скажинс ("*ОграниченнаяЛинкованнаяОчередь");
  ОчереднойИсполнитель t10 = new ОчереднойИсполнитель;
    скажинс ("*ОчереднойИсполнитель");

  ЧЗЗамокПВПВ a8 = new ЧЗЗамокПВПВ();
    скажинс ("*ЧЗЗамокПВПВ");
  ЧЗЗамокПредпочтенияПисателя a9 = new ЧЗЗамокПредпочтенияПисателя();
    скажинс ("*ЧЗЗамокПредпочтенияПисателя");

  СинхронныйКанал!(Объект) c1 = new СинхронныйКанал!(Объект);
    скажинс ("*СинхронныйКанал");

	  ОграниченнаяЛинкованнаяОчередь!(оберни!(цел)) очередь = new ОграниченнаяЛинкованнаяОчередь!(оберни!(цел))();

  цел счёт = 10;

  проц producer()
    {
	скажинс( "Запущена производная нить.\n" );
      for (цел i=0; i<счёт; i++)
		{
		  очередь.помести(new оберни!(цел)(i));
		  скажифнс("put: %d - %d\n", i, очередь.размер());
		} 
		скажинс( "Производная нить выполнена.\n" );

    }

  проц consumer() {
  скажинс( "Запущена потребляющая нить.\n" );
    for (цел i=0; i<счёт; i++)
      {
		оберни!(цел) x = очередь.возьми();
		assert(x!is пусто);
		цел j = x.значение;
		скажифнс("took: %d - %d\n", j, очередь.размер());
		sleep(1);
      }
	  скажинс( "Потребляющая нить выполнена.\n" );
  }

  Нить producerThread = new Нить(&producer);
  Нить consumerThread = new Нить(&consumer);

 consumerThread.старт();
 producerThread.старт();

  //producerThread.жни();
 // consumerThread.жни();
 //throw new ИсклСломанногоБарьера(1);
 скажинс ("* - тест пройден на отлично\n\n");
 //scope(exit) выход(0);
}
