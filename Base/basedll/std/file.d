// Написано на языке программирования Динрус. Разработчик Виталий Кулич.


module std.file;

export extern(D):

    проц[] читайФайл(ткст имяф){return std.x.file.read(имяф);}
    проц пишиФайл(ткст имяф, проц[] буф){std.x.file.write(имяф, буф);}
    проц допишиФайл(ткст имяф, проц[] буф){std.x.file.append(имяф, буф);}
    проц переименуйФайл(ткст из, ткст в){std.x.file.rename(из, в);}
    проц удалиФайл(ткст имяф){std.x.file.remove(имяф);}
    бдол дайРазмерФайла(ткст имяф){return std.x.file.getSize(имяф);}
    проц дайВременаФайла(ткст имяф, out т_время фтц, out т_время фта, out т_время фтм){std.x.file.getTimes(имяф, фтц, фта, фтм);}
    бул естьФайл(ткст имяф){return cast(бул) std.x.file.exists(имяф);}
    бцел дайАтрибутыФайла(ткст имяф){return std.x.file.getAttributes(имяф);}
    бул файл_ли(ткст имяф){return cast(бул) std.x.file.isfile(имяф);}
    бул папка_ли(ткст имяп){return cast(бул) std.x.file.isdir(имяп);}
    проц сменипап(ткст имяп){std.x.file.chdir(имяп);}
    проц сделайпап(ткст имяп){std.x.file.mkdir(имяп);}
    проц удалипап(ткст имяп){std.x.file.rmdir(имяп);}
    ткст дайтекпап(){return std.x.file.getcwd();}
    ткст[] списпап(ткст имяп){return std.x.file.listdir(имяп);}
    ткст[] списпап(ткст имяп, ткст образец){return std.x.file.listdir(имяп, образец);}
    проц копируйФайл(ткст из, ткст в){std.x.file.copy(из, в);}
    

struct Папка
{
    private
    {
        ткст м_имяп;

    }

export:

    проц opCall(ткст имяп)
    {
        м_имяп = имяп;
    }

    ткст текущая()
    {
        return м_имяп = дайтекпап();
    }
    alias текущая opCall;

    проц перейди(ткст имяп)
    {
        сменипап(имяп);
         м_имяп = имяп;
    }

    проц создай(ткст имяп)
    {
        сделайпап(имяп);
        м_имяп = имяп;
    }

    проц удали()
    {
        удалипап(м_имяп);
    }

    ткст[] список()
    {
        return списпап(м_имяп);
    }

    ткст[] список(ткст образец)
    {
        return списпап(м_имяп, образец);
    }

}




struct Файл
{
    private
    {
         ткст м_имяф = ткст.init;

         т_время м_времяСоздания,
                    м_времяДоступа,
                        м_времяИзменения;

        проц дайВремена()
        {
          if(Ок)
            {
            std.x.file.getTimes(м_имяф, м_времяСоздания, м_времяДоступа, м_времяИзменения);
            }

        }

    }

export:

    проц opCall(ткст имяф)
    {
        м_имяф = имяф;
    }


    проц[] читай()
    {

     return std.x.file.read(имяф);
    }

    ткст имя()
    {
        return м_имяф;
    }

    проц допиши(проц[] буф)
    {

        std.x.file.append(м_имяф, буф);
    }


    проц пиши( проц[] буф)
    {
        std.x.file.write(м_имяф, буф);

    }

    проц переименуй(ткст в)
    {
        std.x.file.rename(м_имяф, в);
    }

    проц удали()
    {
      std.x.file.remove(м_имяф);
    }

    бдол размер()
    {
            return std.x.file.getSize(м_имяф);
    }


    бул существует()
    {
        return cast(бул) std.x.file.exists(м_имяф);
    }

    бцел атрибуты()
    {
        return std.x.file.getAttributes(м_имяф);
    }

    бул действительноФайл()
    {
        return cast(бул) std.x.file.isfile(м_имяф);
    }

    т_время времяСоздания()
    {
        дайВремена();
         return м_времяСоздания;
     }

    т_время времяДоступа()
    {
        дайВремена();
        return м_времяДоступа;
    }

    т_время времяИзменения()
    {
        дайВремена();
        return м_времяИзменения;
    }


    проц копируй(ткст в)
    {
        std.x.file.copy(м_имяф, в);
    }



}
