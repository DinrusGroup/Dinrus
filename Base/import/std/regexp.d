
module std.regexp;
import std.outbuffer, std.bitarray, std.string;

struct т_регсвер
{
    цел рснач;          // индекс начала совпадения
    цел рскон;          // индекс по завершению совпадения
}

extern(D):

ткст подставь(ткст текст, ткст образец, ткст формат, ткст атрибуты = null);
alias подставь sub;

ткст подставь(ткст текст, ткст образец, ткст delegate(РегВыр) дг, ткст атрибуты = null);
РегВыр ищи(ткст текст, ткст образец, ткст атрибуты = null);
цел найди(рткст текст, ткст образец, ткст атрибуты = null);
цел найдирек(рткст текст, ткст образец, ткст атрибуты = null);
ткст[] разбей(ткст текст, ткст образец, ткст атрибуты = null);

 class ИсключениеРегВыр : Исключение
 {
    this(ткст сооб);
}


class РегВыр
{

    ~this();
     this(рсим[] образец, рсим[] атрибуты = null);
     static РегВыр opCall(рсим[] образец, рсим[] атрибуты = null);
     РегВыр ищи(рсим[] текст);
     цел opApply(цел delegate(inout РегВыр) дг);
     ткст сверь(т_мера n);
     ткст перед();
     ткст после();
 проц компилируй(рсим[] образец, рсим[] атрибуты);
  рсим[][] разбей(рсим[] текст);
  цел найди(рсим[] текст);
  рсим[][] сверь(рсим[] текст);
  рсим[] замени(рсим[] текст, рсим[] формат);
  рсим[][] выполни(рсим[] текст);
  рсим[][] выполни();
  цел проверь(рсим[] текст);
 цел проверь();
 цел проверь(ткст текст, цел стартиндекс);
 цел чр(inout бцел ит, рсим c);
 проц выведиПрограмму(ббайт[] прог);
 цел пробнсвер(цел pc, цел pcend);
  рсим[] замени(рсим[] формат);
  static рсим[] замени3(рсим[] формат, рсим[] ввод, т_регсвер[] псовп);
  рсим[] замениСтарый(рсим[] формат);

}


////////////////////////
int rfind(рсим[] str, char[] pattern, char[] attributes = null);