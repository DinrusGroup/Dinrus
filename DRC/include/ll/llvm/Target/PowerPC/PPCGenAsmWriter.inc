/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ '#', 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 9, 0,
  /* 16 */ 'b', 'd', 'z', 'l', 'a', '+', 32, 0,
  /* 24 */ 'b', 'd', 'n', 'z', 'l', 'a', '+', 32, 0,
  /* 33 */ 'b', 'd', 'z', 'a', '+', 32, 0,
  /* 40 */ 'b', 'd', 'n', 'z', 'a', '+', 32, 0,
  /* 48 */ 'b', 'd', 'z', 'l', '+', 32, 0,
  /* 55 */ 'b', 'd', 'n', 'z', 'l', '+', 32, 0,
  /* 63 */ 'b', 'd', 'z', '+', 32, 0,
  /* 69 */ 'b', 'd', 'n', 'z', '+', 32, 0,
  /* 76 */ 'b', 'c', 'l', 32, '2', '0', ',', 32, '3', '1', ',', 32, 0,
  /* 89 */ 'b', 'c', 't', 'r', 'l', 10, 9, 'l', 'd', 32, '2', ',', 32, 0,
  /* 103 */ 'b', 'c', 32, '1', '2', ',', 32, 0,
  /* 111 */ 'b', 'c', 'l', 32, '1', '2', ',', 32, 0,
  /* 120 */ 'b', 'c', 'l', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 131 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 143 */ 'b', 'c', 'l', 'r', 32, '1', '2', ',', 32, 0,
  /* 153 */ 'b', 'c', 'c', 't', 'r', 32, '1', '2', ',', 32, 0,
  /* 164 */ 'b', 'c', 32, '4', ',', 32, 0,
  /* 171 */ 'b', 'c', 'l', 32, '4', ',', 32, 0,
  /* 179 */ 'b', 'c', 'l', 'r', 'l', 32, '4', ',', 32, 0,
  /* 189 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '4', ',', 32, 0,
  /* 200 */ 'b', 'c', 'l', 'r', 32, '4', ',', 32, 0,
  /* 209 */ 'b', 'c', 'c', 't', 'r', 32, '4', ',', 32, 0,
  /* 219 */ 'm', 't', 's', 'p', 'r', 32, '2', '5', '6', ',', 32, 0,
  /* 231 */ 'b', 'd', 'z', 'l', 'a', '-', 32, 0,
  /* 239 */ 'b', 'd', 'n', 'z', 'l', 'a', '-', 32, 0,
  /* 248 */ 'b', 'd', 'z', 'a', '-', 32, 0,
  /* 255 */ 'b', 'd', 'n', 'z', 'a', '-', 32, 0,
  /* 263 */ 'b', 'd', 'z', 'l', '-', 32, 0,
  /* 270 */ 'b', 'd', 'n', 'z', 'l', '-', 32, 0,
  /* 278 */ 'b', 'd', 'z', '-', 32, 0,
  /* 284 */ 'b', 'd', 'n', 'z', '-', 32, 0,
  /* 291 */ 'v', 'c', 'm', 'p', 'n', 'e', 'b', '.', 32, 0,
  /* 301 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', '.', 32, 0,
  /* 312 */ 'e', 'x', 't', 's', 'b', '.', 32, 0,
  /* 320 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', '.', 32, 0,
  /* 331 */ 'f', 's', 'u', 'b', '.', 32, 0,
  /* 338 */ 'f', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 346 */ 'f', 'n', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 355 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', '.', 32, 0,
  /* 366 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'b', '.', 32, 0,
  /* 377 */ 'a', 'd', 'd', 'c', '.', 32, 0,
  /* 384 */ 'a', 'n', 'd', 'c', '.', 32, 0,
  /* 391 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', '.', 32, 0,
  /* 402 */ 's', 'u', 'b', 'f', 'c', '.', 32, 0,
  /* 410 */ 's', 'u', 'b', 'i', 'c', '.', 32, 0,
  /* 418 */ 'a', 'd', 'd', 'i', 'c', '.', 32, 0,
  /* 426 */ 'r', 'l', 'd', 'i', 'c', '.', 32, 0,
  /* 434 */ 'b', 'c', 'd', 't', 'r', 'u', 'n', 'c', '.', 32, 0,
  /* 445 */ 'b', 'c', 'd', 'u', 't', 'r', 'u', 'n', 'c', '.', 32, 0,
  /* 457 */ 'o', 'r', 'c', '.', 32, 0,
  /* 463 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', '.', 32, 0,
  /* 474 */ 's', 'r', 'a', 'd', '.', 32, 0,
  /* 481 */ 'f', 'a', 'd', 'd', '.', 32, 0,
  /* 488 */ 'f', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 496 */ 'f', 'n', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 505 */ 'm', 'u', 'l', 'h', 'd', '.', 32, 0,
  /* 513 */ 'f', 'c', 'f', 'i', 'd', '.', 32, 0,
  /* 521 */ 'f', 'c', 't', 'i', 'd', '.', 32, 0,
  /* 529 */ 'm', 'u', 'l', 'l', 'd', '.', 32, 0,
  /* 537 */ 's', 'l', 'd', '.', 32, 0,
  /* 543 */ 'n', 'a', 'n', 'd', '.', 32, 0,
  /* 550 */ 't', 'e', 'n', 'd', '.', 32, 0,
  /* 557 */ 's', 'r', 'd', '.', 32, 0,
  /* 563 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', '.', 32, 0,
  /* 574 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', '.', 32, 0,
  /* 585 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', '.', 32, 0,
  /* 596 */ 'd', 'i', 'v', 'd', '.', 32, 0,
  /* 603 */ 'c', 'n', 't', 'l', 'z', 'd', '.', 32, 0,
  /* 612 */ 'c', 'n', 't', 't', 'z', 'd', '.', 32, 0,
  /* 621 */ 'a', 'd', 'd', 'e', '.', 32, 0,
  /* 628 */ 'd', 'i', 'v', 'd', 'e', '.', 32, 0,
  /* 636 */ 's', 'l', 'b', 'f', 'e', 'e', '.', 32, 0,
  /* 645 */ 's', 'u', 'b', 'f', 'e', '.', 32, 0,
  /* 653 */ 'a', 'd', 'd', 'm', 'e', '.', 32, 0,
  /* 661 */ 's', 'u', 'b', 'f', 'm', 'e', '.', 32, 0,
  /* 670 */ 'f', 'r', 'e', '.', 32, 0,
  /* 676 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', 32, 0,
  /* 686 */ 'p', 'a', 's', 't', 'e', '.', 32, 0,
  /* 694 */ 'd', 'i', 'v', 'w', 'e', '.', 32, 0,
  /* 702 */ 'a', 'd', 'd', 'z', 'e', '.', 32, 0,
  /* 710 */ 's', 'u', 'b', 'f', 'z', 'e', '.', 32, 0,
  /* 719 */ 's', 'u', 'b', 'f', '.', 32, 0,
  /* 726 */ 'm', 't', 'f', 's', 'f', '.', 32, 0,
  /* 734 */ 'f', 'n', 'e', 'g', '.', 32, 0,
  /* 741 */ 'v', 'c', 'm', 'p', 'n', 'e', 'h', '.', 32, 0,
  /* 751 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', '.', 32, 0,
  /* 762 */ 'e', 'x', 't', 's', 'h', '.', 32, 0,
  /* 770 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', '.', 32, 0,
  /* 781 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', '.', 32, 0,
  /* 792 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'h', '.', 32, 0,
  /* 803 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', 'i', '.', 32, 0,
  /* 815 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', 'i', '.', 32, 0,
  /* 827 */ 's', 'r', 'a', 'd', 'i', '.', 32, 0,
  /* 835 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', '.', 32, 0,
  /* 846 */ 'e', 'x', 't', 'l', 'd', 'i', '.', 32, 0,
  /* 855 */ 'a', 'n', 'd', 'i', '.', 32, 0,
  /* 862 */ 'c', 'l', 'r', 'r', 'd', 'i', '.', 32, 0,
  /* 871 */ 'i', 'n', 's', 'r', 'd', 'i', '.', 32, 0,
  /* 880 */ 'r', 'o', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 889 */ 'e', 'x', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 898 */ 'm', 't', 'f', 's', 'f', 'i', '.', 32, 0,
  /* 907 */ 'e', 'x', 't', 's', 'w', 's', 'l', 'i', '.', 32, 0,
  /* 918 */ 'r', 'l', 'd', 'i', 'm', 'i', '.', 32, 0,
  /* 927 */ 'r', 'l', 'w', 'i', 'm', 'i', '.', 32, 0,
  /* 936 */ 's', 'r', 'a', 'w', 'i', '.', 32, 0,
  /* 944 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 955 */ 'i', 'n', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 964 */ 'e', 'x', 't', 'l', 'w', 'i', '.', 32, 0,
  /* 973 */ 'c', 'l', 'r', 'r', 'w', 'i', '.', 32, 0,
  /* 982 */ 'i', 'n', 's', 'r', 'w', 'i', '.', 32, 0,
  /* 991 */ 'r', 'o', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 1000 */ 'e', 'x', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 1009 */ 'r', 'l', 'd', 'c', 'l', '.', 32, 0,
  /* 1017 */ 'r', 'l', 'd', 'i', 'c', 'l', '.', 32, 0,
  /* 1026 */ 'f', 's', 'e', 'l', '.', 32, 0,
  /* 1033 */ 'f', 'm', 'u', 'l', '.', 32, 0,
  /* 1040 */ 't', 'r', 'e', 'c', 'l', 'a', 'i', 'm', '.', 32, 0,
  /* 1051 */ 'f', 'r', 'i', 'm', '.', 32, 0,
  /* 1058 */ 'r', 'l', 'w', 'i', 'n', 'm', '.', 32, 0,
  /* 1067 */ 'r', 'l', 'w', 'n', 'm', '.', 32, 0,
  /* 1075 */ 'b', 'c', 'd', 'c', 'f', 'n', '.', 32, 0,
  /* 1084 */ 'b', 'c', 'd', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 1095 */ 'f', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 1104 */ 'b', 'c', 'd', 's', 'e', 't', 's', 'g', 'n', '.', 32, 0,
  /* 1116 */ 't', 'b', 'e', 'g', 'i', 'n', '.', 32, 0,
  /* 1125 */ 'f', 'r', 'i', 'n', '.', 32, 0,
  /* 1132 */ 'b', 'c', 'd', 'c', 't', 'n', '.', 32, 0,
  /* 1141 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', '.', 32, 0,
  /* 1153 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', '.', 32, 0,
  /* 1165 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', '.', 32, 0,
  /* 1177 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', '.', 32, 0,
  /* 1187 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', '.', 32, 0,
  /* 1198 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', '.', 32, 0,
  /* 1209 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', '.', 32, 0,
  /* 1220 */ 'f', 'r', 'i', 'p', '.', 32, 0,
  /* 1227 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', '.', 32, 0,
  /* 1239 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', '.', 32, 0,
  /* 1251 */ 'f', 'r', 's', 'p', '.', 32, 0,
  /* 1258 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', '.', 32, 0,
  /* 1270 */ 'i', 'c', 'b', 'l', 'q', '.', 32, 0,
  /* 1278 */ 'b', 'c', 'd', 'c', 'f', 's', 'q', '.', 32, 0,
  /* 1288 */ 'b', 'c', 'd', 'c', 't', 's', 'q', '.', 32, 0,
  /* 1298 */ 'r', 'l', 'd', 'c', 'r', '.', 32, 0,
  /* 1306 */ 'r', 'l', 'd', 'i', 'c', 'r', '.', 32, 0,
  /* 1315 */ 'f', 'm', 'r', '.', 32, 0,
  /* 1321 */ 'n', 'o', 'r', '.', 32, 0,
  /* 1327 */ 'x', 'o', 'r', '.', 32, 0,
  /* 1333 */ 'b', 'c', 'd', 's', 'r', '.', 32, 0,
  /* 1341 */ 't', 's', 'r', '.', 32, 0,
  /* 1347 */ 'f', 'a', 'b', 's', '.', 32, 0,
  /* 1354 */ 'f', 'n', 'a', 'b', 's', '.', 32, 0,
  /* 1362 */ 'f', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1370 */ 'f', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1379 */ 'f', 'n', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1389 */ 'b', 'c', 'd', 's', '.', 32, 0,
  /* 1396 */ 'f', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1404 */ 'f', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1413 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1423 */ 'f', 'c', 'f', 'i', 'd', 's', '.', 32, 0,
  /* 1432 */ 'f', 'r', 'e', 's', '.', 32, 0,
  /* 1439 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 's', '.', 32, 0,
  /* 1450 */ 'm', 'f', 'f', 's', '.', 32, 0,
  /* 1457 */ 'a', 'n', 'd', 'i', 's', '.', 32, 0,
  /* 1465 */ 'f', 'm', 'u', 'l', 's', '.', 32, 0,
  /* 1473 */ 'f', 's', 'q', 'r', 't', 's', '.', 32, 0,
  /* 1482 */ 'b', 'c', 'd', 'u', 's', '.', 32, 0,
  /* 1490 */ 'f', 'c', 'f', 'i', 'd', 'u', 's', '.', 32, 0,
  /* 1500 */ 'f', 'd', 'i', 'v', 's', '.', 32, 0,
  /* 1508 */ 't', 'a', 'b', 'o', 'r', 't', '.', 32, 0,
  /* 1517 */ 'f', 's', 'q', 'r', 't', '.', 32, 0,
  /* 1525 */ 'm', 'u', 'l', 'h', 'd', 'u', '.', 32, 0,
  /* 1534 */ 'f', 'c', 'f', 'i', 'd', 'u', '.', 32, 0,
  /* 1543 */ 'f', 'c', 't', 'i', 'd', 'u', '.', 32, 0,
  /* 1552 */ 'd', 'i', 'v', 'd', 'u', '.', 32, 0,
  /* 1560 */ 'd', 'i', 'v', 'd', 'e', 'u', '.', 32, 0,
  /* 1569 */ 'd', 'i', 'v', 'w', 'e', 'u', '.', 32, 0,
  /* 1578 */ 'm', 'u', 'l', 'h', 'w', 'u', '.', 32, 0,
  /* 1587 */ 'f', 'c', 't', 'i', 'w', 'u', '.', 32, 0,
  /* 1596 */ 'd', 'i', 'v', 'w', 'u', '.', 32, 0,
  /* 1604 */ 'f', 'd', 'i', 'v', '.', 32, 0,
  /* 1611 */ 'e', 'q', 'v', '.', 32, 0,
  /* 1617 */ 's', 'r', 'a', 'w', '.', 32, 0,
  /* 1624 */ 'v', 'c', 'm', 'p', 'n', 'e', 'w', '.', 32, 0,
  /* 1634 */ 'm', 'u', 'l', 'h', 'w', '.', 32, 0,
  /* 1642 */ 'f', 'c', 't', 'i', 'w', '.', 32, 0,
  /* 1650 */ 'm', 'u', 'l', 'l', 'w', '.', 32, 0,
  /* 1658 */ 's', 'l', 'w', '.', 32, 0,
  /* 1664 */ 's', 'r', 'w', '.', 32, 0,
  /* 1670 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', '.', 32, 0,
  /* 1681 */ 'e', 'x', 't', 's', 'w', '.', 32, 0,
  /* 1689 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', '.', 32, 0,
  /* 1700 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', '.', 32, 0,
  /* 1711 */ 'd', 'i', 'v', 'w', '.', 32, 0,
  /* 1718 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'w', '.', 32, 0,
  /* 1729 */ 'c', 'n', 't', 'l', 'z', 'w', '.', 32, 0,
  /* 1738 */ 'c', 'n', 't', 't', 'z', 'w', '.', 32, 0,
  /* 1747 */ 's', 't', 'b', 'c', 'x', '.', 32, 0,
  /* 1755 */ 's', 't', 'd', 'c', 'x', '.', 32, 0,
  /* 1763 */ 's', 't', 'h', 'c', 'x', '.', 32, 0,
  /* 1771 */ 's', 't', 'w', 'c', 'x', '.', 32, 0,
  /* 1779 */ 't', 'l', 'b', 's', 'x', '.', 32, 0,
  /* 1787 */ 'f', 'c', 't', 'i', 'd', 'z', '.', 32, 0,
  /* 1796 */ 'b', 'c', 'd', 'c', 'f', 'z', '.', 32, 0,
  /* 1805 */ 'f', 'r', 'i', 'z', '.', 32, 0,
  /* 1812 */ 'b', 'c', 'd', 'c', 't', 'z', '.', 32, 0,
  /* 1821 */ 'f', 'c', 't', 'i', 'd', 'u', 'z', '.', 32, 0,
  /* 1831 */ 'f', 'c', 't', 'i', 'w', 'u', 'z', '.', 32, 0,
  /* 1841 */ 'f', 'c', 't', 'i', 'w', 'z', '.', 32, 0,
  /* 1850 */ 'm', 't', 'f', 's', 'b', '0', 32, 0,
  /* 1858 */ 'm', 't', 'f', 's', 'b', '1', 32, 0,
  /* 1866 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 32, 0,
  /* 1888 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 32, 0,
  /* 1910 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', '8', 32, 0,
  /* 1924 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', '8', 32, 0,
  /* 1938 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', '8', 32, 0,
  /* 1952 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 32, 0,
  /* 1967 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 1986 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 2003 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 32, 0,
  /* 2016 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2029 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2042 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2053 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'a', 32, 0,
  /* 2064 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2077 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2090 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2101 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2114 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2127 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2138 */ 'd', 'c', 'b', 'a', 32, 0,
  /* 2144 */ 'b', 'c', 'a', 32, 0,
  /* 2149 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 32, 0,
  /* 2160 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 'a', 32, 0,
  /* 2171 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 32, 0,
  /* 2182 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 32, 0,
  /* 2192 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 32, 0,
  /* 2203 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 'a', 32, 0,
  /* 2214 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 32, 0,
  /* 2225 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 32, 0,
  /* 2235 */ 'l', 'h', 'a', 32, 0,
  /* 2240 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 32, 0,
  /* 2251 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 'a', 32, 0,
  /* 2262 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 32, 0,
  /* 2273 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 32, 0,
  /* 2283 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 32, 0,
  /* 2294 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 'a', 32, 0,
  /* 2305 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 32, 0,
  /* 2316 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 32, 0,
  /* 2327 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 32, 0,
  /* 2337 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 'a', 32, 0,
  /* 2349 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 'a', 32, 0,
  /* 2360 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 'a', 32, 0,
  /* 2372 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 'a', 32, 0,
  /* 2383 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2396 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2408 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2421 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2433 */ 'b', 'l', 'a', 32, 0,
  /* 2438 */ 'b', 'c', 'l', 'a', 32, 0,
  /* 2444 */ 'b', 'd', 'z', 'l', 'a', 32, 0,
  /* 2451 */ 'b', 'd', 'n', 'z', 'l', 'a', 32, 0,
  /* 2459 */ 'e', 'v', 'm', 'r', 'a', 32, 0,
  /* 2466 */ 'l', 'w', 'a', 32, 0,
  /* 2471 */ 'm', 't', 'v', 's', 'r', 'w', 'a', 32, 0,
  /* 2480 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 'a', 32, 0,
  /* 2491 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2501 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2512 */ 'q', 'v', 'l', 'f', 'd', 'x', 'a', 32, 0,
  /* 2521 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'a', 32, 0,
  /* 2531 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2541 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2552 */ 'q', 'v', 'l', 'f', 's', 'x', 'a', 32, 0,
  /* 2561 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'a', 32, 0,
  /* 2571 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2582 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2594 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 2604 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 2615 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 2626 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 2638 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 2648 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 2659 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 'a', 32, 0,
  /* 2670 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 'a', 32, 0,
  /* 2681 */ 'b', 'd', 'z', 'a', 32, 0,
  /* 2687 */ 'b', 'd', 'n', 'z', 'a', 32, 0,
  /* 2694 */ 'v', 's', 'r', 'a', 'b', 32, 0,
  /* 2701 */ 'r', 'f', 'e', 'b', 'b', 32, 0,
  /* 2708 */ 'v', 'c', 'l', 'z', 'l', 's', 'b', 'b', 32, 0,
  /* 2718 */ 'v', 'c', 't', 'z', 'l', 's', 'b', 'b', 32, 0,
  /* 2728 */ 'v', 'c', 'm', 'p', 'n', 'e', 'b', 32, 0,
  /* 2737 */ 'v', 'm', 'r', 'g', 'h', 'b', 32, 0,
  /* 2745 */ 'x', 'x', 's', 'p', 'l', 't', 'i', 'b', 32, 0,
  /* 2755 */ 'v', 'm', 'r', 'g', 'l', 'b', 32, 0,
  /* 2763 */ 'v', 'r', 'l', 'b', 32, 0,
  /* 2769 */ 'v', 's', 'l', 'b', 32, 0,
  /* 2775 */ 'v', 'p', 'm', 's', 'u', 'm', 'b', 32, 0,
  /* 2784 */ 'c', 'm', 'p', 'b', 32, 0,
  /* 2790 */ 'c', 'm', 'p', 'e', 'q', 'b', 32, 0,
  /* 2798 */ 'c', 'm', 'p', 'r', 'b', 32, 0,
  /* 2805 */ 'v', 's', 'r', 'b', 32, 0,
  /* 2811 */ 'v', 'm', 'u', 'l', 'e', 's', 'b', 32, 0,
  /* 2820 */ 'v', 'a', 'v', 'g', 's', 'b', 32, 0,
  /* 2828 */ 'v', 'u', 'p', 'k', 'h', 's', 'b', 32, 0,
  /* 2837 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'b', 32, 0,
  /* 2847 */ 'v', 'u', 'p', 'k', 'l', 's', 'b', 32, 0,
  /* 2856 */ 'v', 'm', 'i', 'n', 's', 'b', 32, 0,
  /* 2864 */ 'v', 'm', 'u', 'l', 'o', 's', 'b', 32, 0,
  /* 2873 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', 32, 0,
  /* 2883 */ 'e', 'v', 'e', 'x', 't', 's', 'b', 32, 0,
  /* 2892 */ 'v', 'm', 'a', 'x', 's', 'b', 32, 0,
  /* 2900 */ 's', 'e', 't', 'b', 32, 0,
  /* 2906 */ 'm', 'f', 't', 'b', 32, 0,
  /* 2912 */ 'v', 's', 'p', 'l', 't', 'b', 32, 0,
  /* 2920 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'b', 32, 0,
  /* 2930 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'b', 32, 0,
  /* 2940 */ 's', 't', 'b', 32, 0,
  /* 2945 */ 'v', 'a', 'b', 's', 'd', 'u', 'b', 32, 0,
  /* 2954 */ 'v', 'm', 'u', 'l', 'e', 'u', 'b', 32, 0,
  /* 2963 */ 'v', 'a', 'v', 'g', 'u', 'b', 32, 0,
  /* 2971 */ 'v', 'm', 'i', 'n', 'u', 'b', 32, 0,
  /* 2979 */ 'v', 'm', 'u', 'l', 'o', 'u', 'b', 32, 0,
  /* 2988 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', 32, 0,
  /* 2998 */ 'e', 'f', 'd', 's', 'u', 'b', 32, 0,
  /* 3006 */ 'q', 'v', 'f', 's', 'u', 'b', 32, 0,
  /* 3014 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 32, 0,
  /* 3023 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 32, 0,
  /* 3033 */ 'e', 'f', 's', 's', 'u', 'b', 32, 0,
  /* 3041 */ 'e', 'v', 'f', 's', 's', 'u', 'b', 32, 0,
  /* 3050 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'b', 32, 0,
  /* 3062 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', 32, 0,
  /* 3072 */ 'v', 'm', 'a', 'x', 'u', 'b', 32, 0,
  /* 3080 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'b', 32, 0,
  /* 3090 */ 'v', 'c', 'l', 'z', 'b', 32, 0,
  /* 3097 */ 'v', 'c', 't', 'z', 'b', 32, 0,
  /* 3104 */ 'b', 'c', 32, 0,
  /* 3108 */ 'a', 'd', 'd', 'c', 32, 0,
  /* 3114 */ 'x', 'x', 'l', 'a', 'n', 'd', 'c', 32, 0,
  /* 3123 */ 'c', 'r', 'a', 'n', 'd', 'c', 32, 0,
  /* 3131 */ 'e', 'v', 'a', 'n', 'd', 'c', 32, 0,
  /* 3139 */ 's', 'u', 'b', 'f', 'c', 32, 0,
  /* 3146 */ 's', 'u', 'b', 'i', 'c', 32, 0,
  /* 3153 */ 'a', 'd', 'd', 'i', 'c', 32, 0,
  /* 3160 */ 'r', 'l', 'd', 'i', 'c', 32, 0,
  /* 3167 */ 's', 'u', 'b', 'f', 'i', 'c', 32, 0,
  /* 3175 */ 'x', 's', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 3184 */ 'x', 'v', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 3193 */ 'x', 'v', 'r', 's', 'p', 'i', 'c', 32, 0,
  /* 3202 */ 'i', 'c', 'b', 'l', 'c', 32, 0,
  /* 3209 */ 'b', 'r', 'i', 'n', 'c', 32, 0,
  /* 3216 */ 's', 'y', 'n', 'c', 32, 0,
  /* 3222 */ 'x', 'x', 'l', 'o', 'r', 'c', 32, 0,
  /* 3230 */ 'c', 'r', 'o', 'r', 'c', 32, 0,
  /* 3237 */ 'e', 'v', 'o', 'r', 'c', 32, 0,
  /* 3244 */ 's', 'c', 32, 0,
  /* 3248 */ 'v', 'e', 'x', 't', 's', 'b', '2', 'd', 32, 0,
  /* 3258 */ 'v', 'e', 'x', 't', 's', 'h', '2', 'd', 32, 0,
  /* 3268 */ 'v', 'e', 'x', 't', 's', 'w', '2', 'd', 32, 0,
  /* 3278 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 32, 0,
  /* 3291 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'd', 32, 0,
  /* 3303 */ 'v', 's', 'r', 'a', 'd', 32, 0,
  /* 3310 */ 'v', 'g', 'b', 'b', 'd', 32, 0,
  /* 3317 */ 'v', 'p', 'r', 't', 'y', 'b', 'd', 32, 0,
  /* 3326 */ 'e', 'f', 'd', 'a', 'd', 'd', 32, 0,
  /* 3334 */ 'q', 'v', 'f', 'a', 'd', 'd', 32, 0,
  /* 3342 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 32, 0,
  /* 3351 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 3361 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 3375 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 32, 0,
  /* 3388 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 3398 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 3409 */ 'e', 'f', 's', 'a', 'd', 'd', 32, 0,
  /* 3417 */ 'e', 'v', 'f', 's', 'a', 'd', 'd', 32, 0,
  /* 3426 */ 'e', 'v', 'l', 'd', 'd', 32, 0,
  /* 3433 */ 'm', 't', 'v', 's', 'r', 'd', 'd', 32, 0,
  /* 3442 */ 'e', 'v', 's', 't', 'd', 'd', 32, 0,
  /* 3450 */ 'e', 'f', 's', 'c', 'f', 'd', 32, 0,
  /* 3458 */ 'l', 'f', 'd', 32, 0,
  /* 3463 */ 's', 't', 'f', 'd', 32, 0,
  /* 3469 */ 'v', 'n', 'e', 'g', 'd', 32, 0,
  /* 3476 */ 'm', 'a', 'd', 'd', 'h', 'd', 32, 0,
  /* 3484 */ 'm', 'u', 'l', 'h', 'd', 32, 0,
  /* 3491 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 32, 0,
  /* 3500 */ 'e', 'f', 'd', 'c', 'f', 's', 'i', 'd', 32, 0,
  /* 3510 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 32, 0,
  /* 3519 */ 'e', 'f', 'd', 'c', 'f', 'u', 'i', 'd', 32, 0,
  /* 3529 */ 't', 'l', 'b', 'l', 'd', 32, 0,
  /* 3536 */ 'm', 'a', 'd', 'd', 'l', 'd', 32, 0,
  /* 3544 */ 'm', 'u', 'l', 'l', 'd', 32, 0,
  /* 3551 */ 'c', 'm', 'p', 'l', 'd', 32, 0,
  /* 3558 */ 'm', 'f', 'v', 's', 'r', 'l', 'd', 32, 0,
  /* 3567 */ 'v', 'r', 'l', 'd', 32, 0,
  /* 3573 */ 'v', 's', 'l', 'd', 32, 0,
  /* 3579 */ 'v', 'b', 'p', 'e', 'r', 'm', 'd', 32, 0,
  /* 3588 */ 'v', 'p', 'm', 's', 'u', 'm', 'd', 32, 0,
  /* 3597 */ 'x', 'x', 'l', 'a', 'n', 'd', 32, 0,
  /* 3605 */ 'x', 'x', 'l', 'n', 'a', 'n', 'd', 32, 0,
  /* 3614 */ 'c', 'r', 'n', 'a', 'n', 'd', 32, 0,
  /* 3622 */ 'e', 'v', 'n', 'a', 'n', 'd', 32, 0,
  /* 3630 */ 'c', 'r', 'a', 'n', 'd', 32, 0,
  /* 3637 */ 'e', 'v', 'a', 'n', 'd', 32, 0,
  /* 3644 */ 'c', 'm', 'p', 'd', 32, 0,
  /* 3650 */ 'x', 'x', 'b', 'r', 'd', 32, 0,
  /* 3657 */ 'm', 't', 'm', 's', 'r', 'd', 32, 0,
  /* 3665 */ 'm', 'f', 'v', 's', 'r', 'd', 32, 0,
  /* 3673 */ 'm', 't', 'v', 's', 'r', 'd', 32, 0,
  /* 3681 */ 'm', 'o', 'd', 's', 'd', 32, 0,
  /* 3688 */ 'v', 'm', 'i', 'n', 's', 'd', 32, 0,
  /* 3696 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', 32, 0,
  /* 3706 */ 'v', 'm', 'a', 'x', 's', 'd', 32, 0,
  /* 3714 */ 'l', 'x', 's', 'd', 32, 0,
  /* 3720 */ 's', 't', 'x', 's', 'd', 32, 0,
  /* 3727 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'd', 32, 0,
  /* 3738 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'd', 32, 0,
  /* 3748 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'd', 32, 0,
  /* 3758 */ 's', 't', 'd', 32, 0,
  /* 3763 */ 'm', 'o', 'd', 'u', 'd', 32, 0,
  /* 3770 */ 'v', 'm', 'i', 'n', 'u', 'd', 32, 0,
  /* 3778 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', 32, 0,
  /* 3788 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', 32, 0,
  /* 3798 */ 'v', 'm', 'a', 'x', 'u', 'd', 32, 0,
  /* 3806 */ 'd', 'i', 'v', 'd', 32, 0,
  /* 3812 */ 'v', 'c', 'l', 'z', 'd', 32, 0,
  /* 3819 */ 'c', 'n', 't', 'l', 'z', 'd', 32, 0,
  /* 3827 */ 'v', 'c', 't', 'z', 'd', 32, 0,
  /* 3834 */ 'c', 'n', 't', 't', 'z', 'd', 32, 0,
  /* 3842 */ 'm', 'f', 'b', 'h', 'r', 'b', 'e', 32, 0,
  /* 3851 */ 'm', 'f', 'f', 's', 'c', 'e', 32, 0,
  /* 3859 */ 'a', 'd', 'd', 'e', 32, 0,
  /* 3865 */ 'd', 'i', 'v', 'd', 'e', 32, 0,
  /* 3872 */ 's', 'l', 'b', 'm', 'f', 'e', 'e', 32, 0,
  /* 3881 */ 'w', 'r', 't', 'e', 'e', 32, 0,
  /* 3888 */ 's', 'u', 'b', 'f', 'e', 32, 0,
  /* 3895 */ 'e', 'v', 'l', 'w', 'h', 'e', 32, 0,
  /* 3903 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 32, 0,
  /* 3912 */ 's', 'l', 'b', 'i', 'e', 32, 0,
  /* 3919 */ 't', 'l', 'b', 'i', 'e', 32, 0,
  /* 3926 */ 'a', 'd', 'd', 'm', 'e', 32, 0,
  /* 3933 */ 's', 'u', 'b', 'f', 'm', 'e', 32, 0,
  /* 3941 */ 't', 'l', 'b', 'r', 'e', 32, 0,
  /* 3948 */ 'q', 'v', 'f', 'r', 'e', 32, 0,
  /* 3955 */ 's', 'l', 'b', 'm', 't', 'e', 32, 0,
  /* 3963 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 32, 0,
  /* 3974 */ 'p', 'a', 's', 't', 'e', 32, 0,
  /* 3981 */ 't', 'l', 'b', 'w', 'e', 32, 0,
  /* 3988 */ 'd', 'i', 'v', 'w', 'e', 32, 0,
  /* 3995 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 32, 0,
  /* 4004 */ 'a', 'd', 'd', 'z', 'e', 32, 0,
  /* 4011 */ 's', 'u', 'b', 'f', 'z', 'e', 32, 0,
  /* 4019 */ 'd', 'c', 'b', 'f', 32, 0,
  /* 4025 */ 's', 'u', 'b', 'f', 32, 0,
  /* 4031 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 32, 0,
  /* 4041 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 32, 0,
  /* 4051 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 32, 0,
  /* 4061 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 32, 0,
  /* 4070 */ 'm', 'c', 'r', 'f', 32, 0,
  /* 4076 */ 'm', 'f', 'o', 'c', 'r', 'f', 32, 0,
  /* 4084 */ 'm', 't', 'o', 'c', 'r', 'f', 32, 0,
  /* 4092 */ 'm', 't', 'c', 'r', 'f', 32, 0,
  /* 4099 */ 'e', 'f', 'd', 'c', 'f', 's', 'f', 32, 0,
  /* 4108 */ 'e', 'f', 's', 'c', 'f', 's', 'f', 32, 0,
  /* 4117 */ 'e', 'v', 'f', 's', 'c', 'f', 's', 'f', 32, 0,
  /* 4127 */ 'm', 't', 'f', 's', 'f', 32, 0,
  /* 4134 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 32, 0,
  /* 4144 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 32, 0,
  /* 4154 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 32, 0,
  /* 4164 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 32, 0,
  /* 4173 */ 'e', 'f', 'd', 'c', 't', 's', 'f', 32, 0,
  /* 4182 */ 'e', 'f', 's', 'c', 't', 's', 'f', 32, 0,
  /* 4191 */ 'e', 'v', 'f', 's', 'c', 't', 's', 'f', 32, 0,
  /* 4201 */ 'e', 'f', 'd', 'c', 'f', 'u', 'f', 32, 0,
  /* 4210 */ 'e', 'f', 's', 'c', 'f', 'u', 'f', 32, 0,
  /* 4219 */ 'e', 'v', 'f', 's', 'c', 'f', 'u', 'f', 32, 0,
  /* 4229 */ 'e', 'f', 'd', 'c', 't', 'u', 'f', 32, 0,
  /* 4238 */ 'e', 'f', 's', 'c', 't', 'u', 'f', 32, 0,
  /* 4247 */ 's', 'l', 'b', 'i', 'e', 'g', 32, 0,
  /* 4255 */ 'e', 'f', 'd', 'n', 'e', 'g', 32, 0,
  /* 4263 */ 'q', 'v', 'f', 'n', 'e', 'g', 32, 0,
  /* 4271 */ 'e', 'f', 's', 'n', 'e', 'g', 32, 0,
  /* 4279 */ 'e', 'v', 'f', 's', 'n', 'e', 'g', 32, 0,
  /* 4288 */ 'e', 'v', 'n', 'e', 'g', 32, 0,
  /* 4295 */ 'v', 's', 'r', 'a', 'h', 32, 0,
  /* 4302 */ 'e', 'v', 'l', 'd', 'h', 32, 0,
  /* 4309 */ 'e', 'v', 's', 't', 'd', 'h', 32, 0,
  /* 4317 */ 'v', 'c', 'm', 'p', 'n', 'e', 'h', 32, 0,
  /* 4326 */ 'v', 'm', 'r', 'g', 'h', 'h', 32, 0,
  /* 4334 */ 'v', 'm', 'r', 'g', 'l', 'h', 32, 0,
  /* 4342 */ 'v', 'r', 'l', 'h', 32, 0,
  /* 4348 */ 'v', 's', 'l', 'h', 32, 0,
  /* 4354 */ 'v', 'p', 'm', 's', 'u', 'm', 'h', 32, 0,
  /* 4363 */ 'x', 'x', 'b', 'r', 'h', 32, 0,
  /* 4370 */ 'v', 's', 'r', 'h', 32, 0,
  /* 4376 */ 'v', 'm', 'u', 'l', 'e', 's', 'h', 32, 0,
  /* 4385 */ 'v', 'a', 'v', 'g', 's', 'h', 32, 0,
  /* 4393 */ 'v', 'u', 'p', 'k', 'h', 's', 'h', 32, 0,
  /* 4402 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'h', 32, 0,
  /* 4412 */ 'v', 'u', 'p', 'k', 'l', 's', 'h', 32, 0,
  /* 4421 */ 'v', 'm', 'i', 'n', 's', 'h', 32, 0,
  /* 4429 */ 'v', 'm', 'u', 'l', 'o', 's', 'h', 32, 0,
  /* 4438 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', 32, 0,
  /* 4448 */ 'e', 'v', 'e', 'x', 't', 's', 'h', 32, 0,
  /* 4457 */ 'v', 'm', 'a', 'x', 's', 'h', 32, 0,
  /* 4465 */ 'v', 's', 'p', 'l', 't', 'h', 32, 0,
  /* 4473 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'h', 32, 0,
  /* 4483 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'h', 32, 0,
  /* 4493 */ 's', 't', 'h', 32, 0,
  /* 4498 */ 'v', 'a', 'b', 's', 'd', 'u', 'h', 32, 0,
  /* 4507 */ 'v', 'm', 'u', 'l', 'e', 'u', 'h', 32, 0,
  /* 4516 */ 'v', 'a', 'v', 'g', 'u', 'h', 32, 0,
  /* 4524 */ 'v', 'm', 'i', 'n', 'u', 'h', 32, 0,
  /* 4532 */ 'v', 'm', 'u', 'l', 'o', 'u', 'h', 32, 0,
  /* 4541 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', 32, 0,
  /* 4551 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'h', 32, 0,
  /* 4563 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', 32, 0,
  /* 4573 */ 'v', 'm', 'a', 'x', 'u', 'h', 32, 0,
  /* 4581 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'h', 32, 0,
  /* 4591 */ 'v', 'c', 'l', 'z', 'h', 32, 0,
  /* 4598 */ 'v', 'c', 't', 'z', 'h', 32, 0,
  /* 4605 */ 'd', 'c', 'b', 'i', 32, 0,
  /* 4611 */ 'i', 'c', 'b', 'i', 32, 0,
  /* 4617 */ 's', 'u', 'b', 'i', 32, 0,
  /* 4623 */ 'd', 'c', 'c', 'c', 'i', 32, 0,
  /* 4630 */ 'i', 'c', 'c', 'c', 'i', 32, 0,
  /* 4637 */ 'q', 'v', 'g', 'p', 'c', 'i', 32, 0,
  /* 4645 */ 's', 'r', 'a', 'd', 'i', 32, 0,
  /* 4652 */ 'a', 'd', 'd', 'i', 32, 0,
  /* 4658 */ 'c', 'm', 'p', 'l', 'd', 'i', 32, 0,
  /* 4666 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', 32, 0,
  /* 4676 */ 'e', 'x', 't', 'l', 'd', 'i', 32, 0,
  /* 4684 */ 'x', 'x', 'p', 'e', 'r', 'm', 'd', 'i', 32, 0,
  /* 4694 */ 'c', 'm', 'p', 'd', 'i', 32, 0,
  /* 4701 */ 'c', 'l', 'r', 'r', 'd', 'i', 32, 0,
  /* 4709 */ 'i', 'n', 's', 'r', 'd', 'i', 32, 0,
  /* 4717 */ 'r', 'o', 't', 'r', 'd', 'i', 32, 0,
  /* 4725 */ 'e', 'x', 't', 'r', 'd', 'i', 32, 0,
  /* 4733 */ 't', 'd', 'i', 32, 0,
  /* 4738 */ 'w', 'r', 't', 'e', 'e', 'i', 32, 0,
  /* 4746 */ 'm', 't', 'f', 's', 'f', 'i', 32, 0,
  /* 4754 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'f', 'i', 32, 0,
  /* 4765 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 32, 0,
  /* 4776 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 'h', 'i', 32, 0,
  /* 4789 */ 't', 'l', 'b', 'l', 'i', 32, 0,
  /* 4796 */ 'm', 'u', 'l', 'l', 'i', 32, 0,
  /* 4803 */ 'e', 'x', 't', 's', 'w', 's', 'l', 'i', 32, 0,
  /* 4813 */ 'v', 'r', 'l', 'd', 'm', 'i', 32, 0,
  /* 4821 */ 'r', 'l', 'd', 'i', 'm', 'i', 32, 0,
  /* 4829 */ 'r', 'l', 'w', 'i', 'm', 'i', 32, 0,
  /* 4837 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 32, 0,
  /* 4847 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 32, 0,
  /* 4857 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 32, 0,
  /* 4867 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 32, 0,
  /* 4876 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 32, 0,
  /* 4886 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 32, 0,
  /* 4896 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 32, 0,
  /* 4906 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 32, 0,
  /* 4916 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 32, 0,
  /* 4925 */ 'v', 'r', 'l', 'w', 'm', 'i', 32, 0,
  /* 4933 */ 'q', 'v', 'a', 'l', 'i', 'g', 'n', 'i', 32, 0,
  /* 4943 */ 'm', 'f', 'f', 's', 'c', 'r', 'n', 'i', 32, 0,
  /* 4953 */ 'm', 'f', 'f', 's', 'c', 'd', 'r', 'n', 'i', 32, 0,
  /* 4964 */ 'v', 's', 'l', 'd', 'o', 'i', 32, 0,
  /* 4972 */ 'x', 's', 'r', 'd', 'p', 'i', 32, 0,
  /* 4980 */ 'x', 'v', 'r', 'd', 'p', 'i', 32, 0,
  /* 4988 */ 'x', 's', 'r', 'q', 'p', 'i', 32, 0,
  /* 4996 */ 'x', 'v', 'r', 's', 'p', 'i', 32, 0,
  /* 5004 */ 'x', 'o', 'r', 'i', 32, 0,
  /* 5010 */ 'e', 'f', 'd', 'c', 'f', 's', 'i', 32, 0,
  /* 5019 */ 'e', 'f', 's', 'c', 'f', 's', 'i', 32, 0,
  /* 5028 */ 'e', 'v', 'f', 's', 'c', 'f', 's', 'i', 32, 0,
  /* 5038 */ 'e', 'f', 'd', 'c', 't', 's', 'i', 32, 0,
  /* 5047 */ 'e', 'f', 's', 'c', 't', 's', 'i', 32, 0,
  /* 5056 */ 'e', 'v', 'f', 's', 'c', 't', 's', 'i', 32, 0,
  /* 5066 */ 'q', 'v', 'e', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 5077 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 5087 */ 'e', 'f', 'd', 'c', 'f', 'u', 'i', 32, 0,
  /* 5096 */ 'e', 'f', 's', 'c', 'f', 'u', 'i', 32, 0,
  /* 5105 */ 'e', 'v', 'f', 's', 'c', 'f', 'u', 'i', 32, 0,
  /* 5115 */ 'e', 'f', 'd', 'c', 't', 'u', 'i', 32, 0,
  /* 5124 */ 'e', 'f', 's', 'c', 't', 'u', 'i', 32, 0,
  /* 5133 */ 'e', 'v', 'f', 's', 'c', 't', 'u', 'i', 32, 0,
  /* 5143 */ 's', 'r', 'a', 'w', 'i', 32, 0,
  /* 5150 */ 'x', 'x', 's', 'l', 'd', 'w', 'i', 32, 0,
  /* 5159 */ 'c', 'm', 'p', 'l', 'w', 'i', 32, 0,
  /* 5167 */ 'e', 'v', 'r', 'l', 'w', 'i', 32, 0,
  /* 5175 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', 32, 0,
  /* 5185 */ 'i', 'n', 's', 'l', 'w', 'i', 32, 0,
  /* 5193 */ 'e', 'v', 's', 'l', 'w', 'i', 32, 0,
  /* 5201 */ 'e', 'x', 't', 'l', 'w', 'i', 32, 0,
  /* 5209 */ 'c', 'm', 'p', 'w', 'i', 32, 0,
  /* 5216 */ 'c', 'l', 'r', 'r', 'w', 'i', 32, 0,
  /* 5224 */ 'i', 'n', 's', 'r', 'w', 'i', 32, 0,
  /* 5232 */ 'r', 'o', 't', 'r', 'w', 'i', 32, 0,
  /* 5240 */ 'e', 'x', 't', 'r', 'w', 'i', 32, 0,
  /* 5248 */ 'l', 's', 'w', 'i', 32, 0,
  /* 5254 */ 's', 't', 's', 'w', 'i', 32, 0,
  /* 5261 */ 't', 'w', 'i', 32, 0,
  /* 5266 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 32, 0,
  /* 5277 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 32, 0,
  /* 5287 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 32, 0,
  /* 5298 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 32, 0,
  /* 5308 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 32, 0,
  /* 5320 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 32, 0,
  /* 5331 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 32, 0,
  /* 5343 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 32, 0,
  /* 5354 */ 't', 'c', 'h', 'e', 'c', 'k', 32, 0,
  /* 5362 */ 'q', 'v', 'f', 'l', 'o', 'g', 'i', 'c', 'a', 'l', 32, 0,
  /* 5374 */ 'b', 'l', 32, 0,
  /* 5378 */ 'b', 'c', 'l', 32, 0,
  /* 5383 */ 'r', 'l', 'd', 'c', 'l', 32, 0,
  /* 5390 */ 'r', 'l', 'd', 'i', 'c', 'l', 32, 0,
  /* 5398 */ 't', 'l', 'b', 'i', 'e', 'l', 32, 0,
  /* 5406 */ 'q', 'v', 'f', 's', 'e', 'l', 32, 0,
  /* 5414 */ 'i', 's', 'e', 'l', 32, 0,
  /* 5420 */ 'v', 's', 'e', 'l', 32, 0,
  /* 5426 */ 'x', 'x', 's', 'e', 'l', 32, 0,
  /* 5433 */ 'd', 'c', 'b', 'f', 'l', 32, 0,
  /* 5440 */ 'l', 'x', 'v', 'l', 'l', 32, 0,
  /* 5447 */ 's', 't', 'x', 'v', 'l', 'l', 32, 0,
  /* 5455 */ 'b', 'c', 'l', 'r', 'l', 32, 0,
  /* 5462 */ 'b', 'c', 'c', 't', 'r', 'l', 32, 0,
  /* 5470 */ 'm', 'f', 'f', 's', 'l', 32, 0,
  /* 5477 */ 'l', 'v', 's', 'l', 32, 0,
  /* 5483 */ 'e', 'f', 'd', 'm', 'u', 'l', 32, 0,
  /* 5491 */ 'q', 'v', 'f', 'm', 'u', 'l', 32, 0,
  /* 5499 */ 'e', 'f', 's', 'm', 'u', 'l', 32, 0,
  /* 5507 */ 'e', 'v', 'f', 's', 'm', 'u', 'l', 32, 0,
  /* 5516 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 32, 0,
  /* 5525 */ 'l', 'x', 'v', 'l', 32, 0,
  /* 5531 */ 's', 't', 'x', 'v', 'l', 32, 0,
  /* 5538 */ 'l', 'v', 'x', 'l', 32, 0,
  /* 5544 */ 's', 't', 'v', 'x', 'l', 32, 0,
  /* 5551 */ 'd', 'c', 'b', 'z', 'l', 32, 0,
  /* 5558 */ 'b', 'd', 'z', 'l', 32, 0,
  /* 5564 */ 'b', 'd', 'n', 'z', 'l', 32, 0,
  /* 5571 */ 'v', 'm', 's', 'u', 'm', 'm', 'b', 'm', 32, 0,
  /* 5581 */ 'v', 's', 'u', 'b', 'u', 'b', 'm', 32, 0,
  /* 5590 */ 'v', 'a', 'd', 'd', 'u', 'b', 'm', 32, 0,
  /* 5599 */ 'v', 'm', 's', 'u', 'm', 'u', 'b', 'm', 32, 0,
  /* 5609 */ 'v', 's', 'u', 'b', 'u', 'd', 'm', 32, 0,
  /* 5618 */ 'v', 'a', 'd', 'd', 'u', 'd', 'm', 32, 0,
  /* 5627 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 'm', 32, 0,
  /* 5637 */ 'v', 's', 'u', 'b', 'u', 'h', 'm', 32, 0,
  /* 5646 */ 'v', 'm', 'l', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 5657 */ 'v', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 5666 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 'm', 32, 0,
  /* 5676 */ 'v', 'r', 'f', 'i', 'm', 32, 0,
  /* 5683 */ 'x', 's', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 5692 */ 'x', 'v', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 5701 */ 'x', 'v', 'r', 's', 'p', 'i', 'm', 32, 0,
  /* 5710 */ 'q', 'v', 'f', 'r', 'i', 'm', 32, 0,
  /* 5718 */ 'v', 'r', 'l', 'd', 'n', 'm', 32, 0,
  /* 5726 */ 'r', 'l', 'w', 'i', 'n', 'm', 32, 0,
  /* 5734 */ 'v', 'r', 'l', 'w', 'n', 'm', 32, 0,
  /* 5742 */ 'v', 's', 'u', 'b', 'u', 'q', 'm', 32, 0,
  /* 5751 */ 'v', 'a', 'd', 'd', 'u', 'q', 'm', 32, 0,
  /* 5760 */ 'v', 's', 'u', 'b', 'e', 'u', 'q', 'm', 32, 0,
  /* 5770 */ 'v', 'a', 'd', 'd', 'e', 'u', 'q', 'm', 32, 0,
  /* 5780 */ 'q', 'v', 'f', 'p', 'e', 'r', 'm', 32, 0,
  /* 5789 */ 'v', 'p', 'e', 'r', 'm', 32, 0,
  /* 5796 */ 'x', 'x', 'p', 'e', 'r', 'm', 32, 0,
  /* 5804 */ 'v', 'p', 'k', 'u', 'd', 'u', 'm', 32, 0,
  /* 5813 */ 'v', 'p', 'k', 'u', 'h', 'u', 'm', 32, 0,
  /* 5822 */ 'v', 'p', 'k', 'u', 'w', 'u', 'm', 32, 0,
  /* 5831 */ 'v', 's', 'u', 'b', 'u', 'w', 'm', 32, 0,
  /* 5840 */ 'v', 'a', 'd', 'd', 'u', 'w', 'm', 32, 0,
  /* 5849 */ 'v', 'm', 'u', 'l', 'u', 'w', 'm', 32, 0,
  /* 5858 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 5871 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 5884 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 5895 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'n', 32, 0,
  /* 5906 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 5919 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 5932 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 5943 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 5956 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 5969 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 5980 */ 'q', 'v', 'f', 't', 's', 't', 'n', 'a', 'n', 32, 0,
  /* 5991 */ 'q', 'v', 'f', 'c', 'p', 's', 'g', 'n', 32, 0,
  /* 6001 */ 'v', 'r', 'f', 'i', 'n', 32, 0,
  /* 6008 */ 'q', 'v', 'f', 'r', 'i', 'n', 32, 0,
  /* 6016 */ 'm', 'f', 's', 'r', 'i', 'n', 32, 0,
  /* 6024 */ 'm', 't', 's', 'r', 'i', 'n', 32, 0,
  /* 6032 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 'n', 32, 0,
  /* 6043 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 'n', 32, 0,
  /* 6054 */ 'd', 'a', 'r', 'n', 32, 0,
  /* 6060 */ 'm', 'f', 'f', 's', 'c', 'r', 'n', 32, 0,
  /* 6069 */ 'm', 'f', 'f', 's', 'c', 'd', 'r', 'n', 32, 0,
  /* 6079 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 32, 0,
  /* 6088 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 32, 0,
  /* 6099 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 'l', 'o', 32, 0,
  /* 6112 */ 'v', 's', 'l', 'o', 32, 0,
  /* 6118 */ 'x', 's', 'c', 'v', 'q', 'p', 'd', 'p', 'o', 32, 0,
  /* 6129 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 6141 */ 'x', 's', 'm', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 6152 */ 'x', 's', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 6162 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 6174 */ 'x', 's', 'm', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 6185 */ 'x', 's', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 6195 */ 'x', 's', 'm', 'u', 'l', 'q', 'p', 'o', 32, 0,
  /* 6205 */ 'x', 's', 's', 'q', 'r', 't', 'q', 'p', 'o', 32, 0,
  /* 6216 */ 'x', 's', 'd', 'i', 'v', 'q', 'p', 'o', 32, 0,
  /* 6226 */ 'v', 's', 'r', 'o', 32, 0,
  /* 6232 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 32, 0,
  /* 6241 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 6253 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 6265 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 6276 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 6287 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 6299 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 6311 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 6322 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 6333 */ 'x', 's', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 6342 */ 'x', 'v', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 6351 */ 'x', 's', 't', 's', 't', 'd', 'c', 'd', 'p', 32, 0,
  /* 6362 */ 'x', 'v', 't', 's', 't', 'd', 'c', 'd', 'p', 32, 0,
  /* 6373 */ 'x', 's', 'm', 'i', 'n', 'c', 'd', 'p', 32, 0,
  /* 6383 */ 'x', 's', 'm', 'a', 'x', 'c', 'd', 'p', 32, 0,
  /* 6393 */ 'x', 's', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 6402 */ 'x', 'v', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 6411 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 6422 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 6433 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 6444 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 6455 */ 'x', 's', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 6466 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 6477 */ 'x', 's', 'r', 'e', 'd', 'p', 32, 0,
  /* 6485 */ 'x', 'v', 'r', 'e', 'd', 'p', 32, 0,
  /* 6493 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 6505 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 6517 */ 'x', 's', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 6526 */ 'x', 'v', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 6535 */ 'x', 's', 'x', 's', 'i', 'g', 'd', 'p', 32, 0,
  /* 6545 */ 'x', 'v', 'x', 's', 'i', 'g', 'd', 'p', 32, 0,
  /* 6555 */ 'x', 's', 'm', 'i', 'n', 'j', 'd', 'p', 32, 0,
  /* 6565 */ 'x', 's', 'm', 'a', 'x', 'j', 'd', 'p', 32, 0,
  /* 6575 */ 'x', 's', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 6584 */ 'x', 'v', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 6593 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6605 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6617 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6628 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6639 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6651 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6663 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6674 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6685 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 6696 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 6707 */ 'x', 's', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 6716 */ 'x', 'v', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 6725 */ 'x', 's', 'c', 'm', 'p', 'o', 'd', 'p', 32, 0,
  /* 6735 */ 'x', 's', 'c', 'v', 'h', 'p', 'd', 'p', 32, 0,
  /* 6745 */ 'x', 's', 'c', 'v', 'q', 'p', 'd', 'p', 32, 0,
  /* 6755 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 6765 */ 'x', 'v', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 6775 */ 'x', 's', 'i', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6785 */ 'x', 'v', 'i', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6795 */ 'x', 's', 'c', 'm', 'p', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6807 */ 'x', 's', 'x', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6817 */ 'x', 'v', 'x', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6827 */ 'x', 's', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 6838 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 6849 */ 'x', 's', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6859 */ 'x', 'v', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6869 */ 'x', 's', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6878 */ 'x', 'v', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6887 */ 'x', 's', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 6898 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 6909 */ 'x', 's', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6919 */ 'x', 's', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6930 */ 'x', 'v', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6941 */ 'x', 'v', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6951 */ 'x', 's', 'c', 'm', 'p', 'u', 'd', 'p', 32, 0,
  /* 6961 */ 'x', 's', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6970 */ 'x', 's', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6980 */ 'x', 'v', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6990 */ 'x', 'v', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6999 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 'd', 'p', 32, 0,
  /* 7010 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 'd', 'p', 32, 0,
  /* 7021 */ 'x', 's', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 7030 */ 'x', 'v', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 7039 */ 'd', 'c', 'b', 'f', 'e', 'p', 32, 0,
  /* 7047 */ 'i', 'c', 'b', 'i', 'e', 'p', 32, 0,
  /* 7055 */ 'd', 'c', 'b', 'z', 'l', 'e', 'p', 32, 0,
  /* 7064 */ 'd', 'c', 'b', 't', 'e', 'p', 32, 0,
  /* 7072 */ 'd', 'c', 'b', 's', 't', 'e', 'p', 32, 0,
  /* 7081 */ 'd', 'c', 'b', 't', 's', 't', 'e', 'p', 32, 0,
  /* 7091 */ 'd', 'c', 'b', 'z', 'e', 'p', 32, 0,
  /* 7099 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', 32, 0,
  /* 7108 */ 'v', 'n', 'm', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 7118 */ 'v', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 7126 */ 'v', 'm', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 7135 */ 'v', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 7143 */ 'v', 'l', 'o', 'g', 'e', 'f', 'p', 32, 0,
  /* 7152 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', 32, 0,
  /* 7162 */ 'v', 'r', 'e', 'f', 'p', 32, 0,
  /* 7169 */ 'v', 'e', 'x', 'p', 't', 'e', 'f', 'p', 32, 0,
  /* 7179 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 'f', 'p', 32, 0,
  /* 7190 */ 'v', 'm', 'i', 'n', 'f', 'p', 32, 0,
  /* 7198 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', 32, 0,
  /* 7208 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', 32, 0,
  /* 7218 */ 'v', 'm', 'a', 'x', 'f', 'p', 32, 0,
  /* 7226 */ 'x', 's', 'c', 'v', 'd', 'p', 'h', 'p', 32, 0,
  /* 7236 */ 'x', 'v', 'c', 'v', 's', 'p', 'h', 'p', 32, 0,
  /* 7246 */ 'v', 'r', 'f', 'i', 'p', 32, 0,
  /* 7253 */ 'x', 's', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 7262 */ 'x', 'v', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 7271 */ 'x', 'v', 'r', 's', 'p', 'i', 'p', 32, 0,
  /* 7280 */ 'q', 'v', 'f', 'r', 'i', 'p', 32, 0,
  /* 7288 */ 'd', 'c', 'b', 'f', 'l', 'p', 32, 0,
  /* 7296 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 7307 */ 'x', 's', 'm', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 7317 */ 'x', 's', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 7326 */ 'x', 's', 't', 's', 't', 'd', 'c', 'q', 'p', 32, 0,
  /* 7337 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 7348 */ 'x', 's', 'm', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 7358 */ 'x', 's', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 7367 */ 'x', 's', 'c', 'v', 's', 'd', 'q', 'p', 32, 0,
  /* 7377 */ 'x', 's', 'c', 'v', 'u', 'd', 'q', 'p', 32, 0,
  /* 7387 */ 'x', 's', 'n', 'e', 'g', 'q', 'p', 32, 0,
  /* 7396 */ 'x', 's', 'x', 's', 'i', 'g', 'q', 'p', 32, 0,
  /* 7406 */ 'x', 's', 'm', 'u', 'l', 'q', 'p', 32, 0,
  /* 7415 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'q', 'p', 32, 0,
  /* 7426 */ 'x', 's', 'c', 'm', 'p', 'o', 'q', 'p', 32, 0,
  /* 7436 */ 'x', 's', 'c', 'v', 'd', 'p', 'q', 'p', 32, 0,
  /* 7446 */ 'x', 's', 'i', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 7456 */ 'x', 's', 'c', 'm', 'p', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 7468 */ 'x', 's', 'x', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 7478 */ 'x', 's', 'n', 'a', 'b', 's', 'q', 'p', 32, 0,
  /* 7488 */ 'x', 's', 'a', 'b', 's', 'q', 'p', 32, 0,
  /* 7497 */ 'x', 's', 's', 'q', 'r', 't', 'q', 'p', 32, 0,
  /* 7507 */ 'x', 's', 'c', 'm', 'p', 'u', 'q', 'p', 32, 0,
  /* 7517 */ 'x', 's', 'd', 'i', 'v', 'q', 'p', 32, 0,
  /* 7526 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7538 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7550 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7561 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7572 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7584 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7596 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7607 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7618 */ 'x', 's', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 7627 */ 'x', 'v', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 7636 */ 'x', 's', 't', 's', 't', 'd', 'c', 's', 'p', 32, 0,
  /* 7647 */ 'x', 'v', 't', 's', 't', 'd', 'c', 's', 'p', 32, 0,
  /* 7658 */ 'x', 's', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 7667 */ 'x', 'v', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 7676 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 7687 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 7698 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 7709 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 7720 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', 32, 0,
  /* 7731 */ 'x', 's', 'r', 'e', 's', 'p', 32, 0,
  /* 7739 */ 'x', 'v', 'r', 'e', 's', 'p', 32, 0,
  /* 7747 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 7759 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 7771 */ 'x', 'v', 'n', 'e', 'g', 's', 'p', 32, 0,
  /* 7780 */ 'x', 'v', 'x', 's', 'i', 'g', 's', 'p', 32, 0,
  /* 7790 */ 'x', 's', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 7799 */ 'x', 'v', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 7808 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7820 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7832 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7843 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7854 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7866 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7878 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7889 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7900 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 's', 'p', 32, 0,
  /* 7911 */ 'x', 'v', 'm', 'i', 'n', 's', 'p', 32, 0,
  /* 7920 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 7930 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 7940 */ 'x', 'v', 'c', 'v', 'h', 'p', 's', 'p', 32, 0,
  /* 7950 */ 'x', 'v', 'i', 'e', 'x', 'p', 's', 'p', 32, 0,
  /* 7960 */ 'x', 'v', 'x', 'e', 'x', 'p', 's', 'p', 32, 0,
  /* 7970 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', 32, 0,
  /* 7981 */ 'q', 'v', 'f', 'r', 's', 'p', 32, 0,
  /* 7989 */ 'x', 's', 'r', 's', 'p', 32, 0,
  /* 7996 */ 'x', 'v', 'n', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 8006 */ 'x', 'v', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 8015 */ 'l', 'x', 's', 's', 'p', 32, 0,
  /* 8022 */ 's', 't', 'x', 's', 's', 'p', 32, 0,
  /* 8030 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', 32, 0,
  /* 8041 */ 'x', 's', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 8051 */ 'x', 'v', 't', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 8062 */ 'x', 'v', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 8072 */ 'x', 's', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 8081 */ 'x', 'v', 't', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 8091 */ 'x', 'v', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 8100 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 's', 'p', 32, 0,
  /* 8111 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 's', 'p', 32, 0,
  /* 8122 */ 'x', 'v', 'm', 'a', 'x', 's', 'p', 32, 0,
  /* 8131 */ 'x', 's', 'r', 'q', 'p', 'x', 'p', 32, 0,
  /* 8140 */ 'v', 'p', 'r', 't', 'y', 'b', 'q', 32, 0,
  /* 8149 */ 'e', 'f', 'd', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8159 */ 'q', 'v', 'f', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8169 */ 'e', 'f', 's', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8179 */ 'e', 'v', 'f', 's', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8190 */ 'e', 'v', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8199 */ 'e', 'f', 'd', 't', 's', 't', 'e', 'q', 32, 0,
  /* 8209 */ 'e', 'f', 's', 't', 's', 't', 'e', 'q', 32, 0,
  /* 8219 */ 'e', 'v', 'f', 's', 't', 's', 't', 'e', 'q', 32, 0,
  /* 8230 */ 'v', 'b', 'p', 'e', 'r', 'm', 'q', 32, 0,
  /* 8239 */ 'x', 'x', 'b', 'r', 'q', 32, 0,
  /* 8246 */ 'v', 'm', 'u', 'l', '1', '0', 'u', 'q', 32, 0,
  /* 8256 */ 'v', 'm', 'u', 'l', '1', '0', 'c', 'u', 'q', 32, 0,
  /* 8267 */ 'v', 's', 'u', 'b', 'c', 'u', 'q', 32, 0,
  /* 8276 */ 'v', 'a', 'd', 'd', 'c', 'u', 'q', 32, 0,
  /* 8285 */ 'v', 'm', 'u', 'l', '1', '0', 'e', 'c', 'u', 'q', 32, 0,
  /* 8297 */ 'v', 's', 'u', 'b', 'e', 'c', 'u', 'q', 32, 0,
  /* 8307 */ 'v', 'a', 'd', 'd', 'e', 'c', 'u', 'q', 32, 0,
  /* 8317 */ 'v', 'm', 'u', 'l', '1', '0', 'e', 'u', 'q', 32, 0,
  /* 8328 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 32, 0,
  /* 8341 */ 'm', 'b', 'a', 'r', 32, 0,
  /* 8347 */ 'm', 'f', 'd', 'c', 'r', 32, 0,
  /* 8354 */ 'r', 'l', 'd', 'c', 'r', 32, 0,
  /* 8361 */ 'm', 't', 'd', 'c', 'r', 32, 0,
  /* 8368 */ 'm', 'f', 'c', 'r', 32, 0,
  /* 8374 */ 'r', 'l', 'd', 'i', 'c', 'r', 32, 0,
  /* 8382 */ 'm', 'f', 'v', 's', 'c', 'r', 32, 0,
  /* 8390 */ 'm', 't', 'v', 's', 'c', 'r', 32, 0,
  /* 8398 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 8408 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 8417 */ 'b', 'c', 'l', 'r', 32, 0,
  /* 8423 */ 'm', 'f', 'l', 'r', 32, 0,
  /* 8429 */ 'm', 't', 'l', 'r', 32, 0,
  /* 8435 */ 'q', 'v', 'f', 'm', 'r', 32, 0,
  /* 8442 */ 'm', 'f', 'p', 'm', 'r', 32, 0,
  /* 8449 */ 'm', 't', 'p', 'm', 'r', 32, 0,
  /* 8456 */ 'v', 'p', 'e', 'r', 'm', 'r', 32, 0,
  /* 8464 */ 'x', 'x', 'p', 'e', 'r', 'm', 'r', 32, 0,
  /* 8473 */ 'x', 'x', 'l', 'o', 'r', 32, 0,
  /* 8480 */ 'x', 'x', 'l', 'n', 'o', 'r', 32, 0,
  /* 8488 */ 'c', 'r', 'n', 'o', 'r', 32, 0,
  /* 8495 */ 'e', 'v', 'n', 'o', 'r', 32, 0,
  /* 8502 */ 'c', 'r', 'o', 'r', 32, 0,
  /* 8508 */ 'e', 'v', 'o', 'r', 32, 0,
  /* 8514 */ 'x', 'x', 'l', 'x', 'o', 'r', 32, 0,
  /* 8522 */ 'v', 'p', 'e', 'r', 'm', 'x', 'o', 'r', 32, 0,
  /* 8532 */ 'c', 'r', 'x', 'o', 'r', 32, 0,
  /* 8539 */ 'e', 'v', 'x', 'o', 'r', 32, 0,
  /* 8546 */ 'm', 'f', 's', 'p', 'r', 32, 0,
  /* 8553 */ 'm', 't', 's', 'p', 'r', 32, 0,
  /* 8560 */ 'm', 'f', 's', 'r', 32, 0,
  /* 8566 */ 'm', 'f', 'm', 's', 'r', 32, 0,
  /* 8573 */ 'm', 't', 'm', 's', 'r', 32, 0,
  /* 8580 */ 'm', 't', 's', 'r', 32, 0,
  /* 8586 */ 'l', 'v', 's', 'r', 32, 0,
  /* 8592 */ 'b', 'c', 'c', 't', 'r', 32, 0,
  /* 8599 */ 'm', 'f', 'c', 't', 'r', 32, 0,
  /* 8606 */ 'm', 't', 'c', 't', 'r', 32, 0,
  /* 8613 */ 'e', 'f', 'd', 'a', 'b', 's', 32, 0,
  /* 8621 */ 'q', 'v', 'f', 'a', 'b', 's', 32, 0,
  /* 8629 */ 'e', 'f', 'd', 'n', 'a', 'b', 's', 32, 0,
  /* 8638 */ 'q', 'v', 'f', 'n', 'a', 'b', 's', 32, 0,
  /* 8647 */ 'e', 'f', 's', 'n', 'a', 'b', 's', 32, 0,
  /* 8656 */ 'e', 'v', 'f', 's', 'n', 'a', 'b', 's', 32, 0,
  /* 8666 */ 'e', 'f', 's', 'a', 'b', 's', 32, 0,
  /* 8674 */ 'e', 'v', 'f', 's', 'a', 'b', 's', 32, 0,
  /* 8683 */ 'e', 'v', 'a', 'b', 's', 32, 0,
  /* 8690 */ 'v', 's', 'u', 'm', '4', 's', 'b', 's', 32, 0,
  /* 8700 */ 'v', 's', 'u', 'b', 's', 'b', 's', 32, 0,
  /* 8709 */ 'v', 'a', 'd', 'd', 's', 'b', 's', 32, 0,
  /* 8718 */ 'v', 's', 'u', 'm', '4', 'u', 'b', 's', 32, 0,
  /* 8728 */ 'v', 's', 'u', 'b', 'u', 'b', 's', 32, 0,
  /* 8737 */ 'v', 'a', 'd', 'd', 'u', 'b', 's', 32, 0,
  /* 8746 */ 'q', 'v', 'f', 's', 'u', 'b', 's', 32, 0,
  /* 8755 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 8765 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 8776 */ 'q', 'v', 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 8785 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8795 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8806 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8821 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8835 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8846 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8858 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 's', 32, 0,
  /* 8868 */ 'd', 'c', 'b', 't', 'd', 's', 32, 0,
  /* 8876 */ 'd', 'c', 'b', 't', 's', 't', 'd', 's', 32, 0,
  /* 8886 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 8898 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 8910 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 8922 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 8934 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 8946 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 8958 */ 'q', 'v', 'f', 'r', 'e', 's', 32, 0,
  /* 8966 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 's', 32, 0,
  /* 8978 */ 'e', 'f', 'd', 'c', 'f', 's', 32, 0,
  /* 8986 */ 'm', 'f', 'f', 's', 32, 0,
  /* 8992 */ 'l', 'f', 's', 32, 0,
  /* 8997 */ 'm', 'c', 'r', 'f', 's', 32, 0,
  /* 9004 */ 's', 't', 'f', 's', 32, 0,
  /* 9010 */ 'v', 's', 'u', 'm', '4', 's', 'h', 's', 32, 0,
  /* 9020 */ 'v', 's', 'u', 'b', 's', 'h', 's', 32, 0,
  /* 9029 */ 'v', 'm', 'h', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 9040 */ 'v', 'm', 'h', 'r', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 9052 */ 'v', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 9061 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 's', 32, 0,
  /* 9071 */ 'v', 's', 'u', 'b', 'u', 'h', 's', 32, 0,
  /* 9080 */ 'v', 'a', 'd', 'd', 'u', 'h', 's', 32, 0,
  /* 9089 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 's', 32, 0,
  /* 9099 */ 's', 'u', 'b', 'i', 's', 32, 0,
  /* 9106 */ 's', 'u', 'b', 'p', 'c', 'i', 's', 32, 0,
  /* 9115 */ 'a', 'd', 'd', 'p', 'c', 'i', 's', 32, 0,
  /* 9124 */ 'a', 'd', 'd', 'i', 's', 32, 0,
  /* 9131 */ 'l', 'i', 's', 32, 0,
  /* 9136 */ 'x', 'o', 'r', 'i', 's', 32, 0,
  /* 9143 */ 'e', 'v', 's', 'r', 'w', 'i', 's', 32, 0,
  /* 9152 */ 'i', 'c', 'b', 't', 'l', 's', 32, 0,
  /* 9160 */ 'q', 'v', 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 9169 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 's', 32, 0,
  /* 9179 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 32, 0,
  /* 9188 */ 'v', 'p', 'k', 's', 'd', 's', 's', 32, 0,
  /* 9197 */ 'v', 'p', 'k', 's', 'h', 's', 's', 32, 0,
  /* 9206 */ 'v', 'p', 'k', 's', 'w', 's', 's', 32, 0,
  /* 9215 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 's', 32, 0,
  /* 9225 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 's', 32, 0,
  /* 9235 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 9243 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 's', 32, 0,
  /* 9254 */ 'v', 'p', 'k', 's', 'd', 'u', 's', 32, 0,
  /* 9263 */ 'v', 'p', 'k', 'u', 'd', 'u', 's', 32, 0,
  /* 9272 */ 'v', 'p', 'k', 's', 'h', 'u', 's', 32, 0,
  /* 9281 */ 'v', 'p', 'k', 'u', 'h', 'u', 's', 32, 0,
  /* 9290 */ 'v', 'p', 'k', 's', 'w', 'u', 's', 32, 0,
  /* 9299 */ 'v', 'p', 'k', 'u', 'w', 'u', 's', 32, 0,
  /* 9308 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 9315 */ 'e', 'v', 's', 'r', 'w', 's', 32, 0,
  /* 9323 */ 'm', 't', 'v', 's', 'r', 'w', 's', 32, 0,
  /* 9332 */ 'v', 's', 'u', 'm', '2', 's', 'w', 's', 32, 0,
  /* 9342 */ 'v', 's', 'u', 'b', 's', 'w', 's', 32, 0,
  /* 9351 */ 'v', 'a', 'd', 'd', 's', 'w', 's', 32, 0,
  /* 9360 */ 'v', 's', 'u', 'm', 's', 'w', 's', 32, 0,
  /* 9369 */ 'v', 's', 'u', 'b', 'u', 'w', 's', 32, 0,
  /* 9378 */ 'v', 'a', 'd', 'd', 'u', 'w', 's', 32, 0,
  /* 9387 */ 'e', 'v', 'd', 'i', 'v', 'w', 's', 32, 0,
  /* 9396 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 9408 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 9420 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 9432 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 9444 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 9456 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 9468 */ 'v', 'c', 't', 's', 'x', 's', 32, 0,
  /* 9476 */ 'v', 'c', 't', 'u', 'x', 's', 32, 0,
  /* 9484 */ 'l', 'd', 'a', 't', 32, 0,
  /* 9490 */ 's', 't', 'd', 'a', 't', 32, 0,
  /* 9497 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 9510 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 9522 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 9536 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 9550 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 9562 */ 'l', 'w', 'a', 't', 32, 0,
  /* 9568 */ 's', 't', 'w', 'a', 't', 32, 0,
  /* 9575 */ 'd', 'c', 'b', 't', 32, 0,
  /* 9581 */ 'i', 'c', 'b', 't', 32, 0,
  /* 9587 */ 'd', 'c', 'b', 't', 'c', 't', 32, 0,
  /* 9595 */ 'd', 'c', 'b', 't', 's', 't', 'c', 't', 32, 0,
  /* 9605 */ 'e', 'f', 'd', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 9615 */ 'q', 'v', 'f', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 9625 */ 'e', 'f', 's', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 9635 */ 'e', 'v', 'f', 's', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 9646 */ 'e', 'f', 'd', 't', 's', 't', 'g', 't', 32, 0,
  /* 9656 */ 'e', 'f', 's', 't', 's', 't', 'g', 't', 32, 0,
  /* 9666 */ 'e', 'v', 'f', 's', 't', 's', 't', 'g', 't', 32, 0,
  /* 9677 */ 'w', 'a', 'i', 't', 32, 0,
  /* 9683 */ 'e', 'f', 'd', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 9693 */ 'q', 'v', 'f', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 9703 */ 'e', 'f', 's', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 9713 */ 'e', 'v', 'f', 's', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 9724 */ 'e', 'f', 'd', 't', 's', 't', 'l', 't', 32, 0,
  /* 9734 */ 'e', 'f', 's', 't', 's', 't', 'l', 't', 32, 0,
  /* 9744 */ 'e', 'v', 'f', 's', 't', 's', 't', 'l', 't', 32, 0,
  /* 9755 */ 'f', 's', 'q', 'r', 't', 32, 0,
  /* 9762 */ 'f', 't', 's', 'q', 'r', 't', 32, 0,
  /* 9770 */ 'p', 'a', 's', 't', 'e', '_', 'l', 'a', 's', 't', 32, 0,
  /* 9782 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 9796 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 9809 */ 'd', 'c', 'b', 's', 't', 32, 0,
  /* 9816 */ 'd', 's', 't', 32, 0,
  /* 9821 */ 'c', 'o', 'p', 'y', '_', 'f', 'i', 'r', 's', 't', 32, 0,
  /* 9833 */ 'd', 'c', 'b', 't', 's', 't', 32, 0,
  /* 9841 */ 'd', 's', 't', 's', 't', 32, 0,
  /* 9848 */ 'd', 'c', 'b', 't', 't', 32, 0,
  /* 9855 */ 'd', 's', 't', 't', 32, 0,
  /* 9861 */ 'd', 'c', 'b', 't', 's', 't', 't', 32, 0,
  /* 9870 */ 'd', 's', 't', 's', 't', 't', 32, 0,
  /* 9878 */ 'l', 'h', 'a', 'u', 32, 0,
  /* 9884 */ 's', 't', 'b', 'u', 32, 0,
  /* 9890 */ 'l', 'f', 'd', 'u', 32, 0,
  /* 9896 */ 's', 't', 'f', 'd', 'u', 32, 0,
  /* 9903 */ 'm', 'a', 'd', 'd', 'h', 'd', 'u', 32, 0,
  /* 9912 */ 'm', 'u', 'l', 'h', 'd', 'u', 32, 0,
  /* 9920 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 32, 0,
  /* 9930 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 32, 0,
  /* 9940 */ 'l', 'd', 'u', 32, 0,
  /* 9945 */ 's', 't', 'd', 'u', 32, 0,
  /* 9951 */ 'd', 'i', 'v', 'd', 'u', 32, 0,
  /* 9958 */ 'd', 'i', 'v', 'd', 'e', 'u', 32, 0,
  /* 9966 */ 'd', 'i', 'v', 'w', 'e', 'u', 32, 0,
  /* 9974 */ 's', 't', 'h', 'u', 32, 0,
  /* 9980 */ 'e', 'v', 's', 'r', 'w', 'i', 'u', 32, 0,
  /* 9989 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 32, 0,
  /* 9998 */ 'f', 'c', 'm', 'p', 'u', 32, 0,
  /* 10005 */ 'l', 'f', 's', 'u', 32, 0,
  /* 10011 */ 's', 't', 'f', 's', 'u', 32, 0,
  /* 10018 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 'u', 32, 0,
  /* 10028 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 'u', 32, 0,
  /* 10038 */ 'm', 'u', 'l', 'h', 'w', 'u', 32, 0,
  /* 10046 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 32, 0,
  /* 10056 */ 'e', 'v', 's', 'r', 'w', 'u', 32, 0,
  /* 10064 */ 's', 't', 'w', 'u', 32, 0,
  /* 10070 */ 'e', 'v', 'd', 'i', 'v', 'w', 'u', 32, 0,
  /* 10079 */ 'l', 'b', 'z', 'u', 32, 0,
  /* 10085 */ 'l', 'h', 'z', 'u', 32, 0,
  /* 10091 */ 'l', 'w', 'z', 'u', 32, 0,
  /* 10097 */ 's', 'l', 'b', 'm', 'f', 'e', 'v', 32, 0,
  /* 10106 */ 'e', 'f', 'd', 'd', 'i', 'v', 32, 0,
  /* 10114 */ 'f', 'd', 'i', 'v', 32, 0,
  /* 10120 */ 'e', 'f', 's', 'd', 'i', 'v', 32, 0,
  /* 10128 */ 'e', 'v', 'f', 's', 'd', 'i', 'v', 32, 0,
  /* 10137 */ 'f', 't', 'd', 'i', 'v', 32, 0,
  /* 10144 */ 'v', 's', 'l', 'v', 32, 0,
  /* 10150 */ 'x', 'x', 'l', 'e', 'q', 'v', 32, 0,
  /* 10158 */ 'c', 'r', 'e', 'q', 'v', 32, 0,
  /* 10165 */ 'e', 'v', 'e', 'q', 'v', 32, 0,
  /* 10172 */ 'v', 's', 'r', 'v', 32, 0,
  /* 10178 */ 'l', 'x', 'v', 32, 0,
  /* 10183 */ 's', 't', 'x', 'v', 32, 0,
  /* 10189 */ 'v', 'e', 'x', 't', 's', 'b', '2', 'w', 32, 0,
  /* 10199 */ 'v', 'e', 'x', 't', 's', 'h', '2', 'w', 32, 0,
  /* 10209 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 10222 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 10235 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 10248 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 10261 */ 'e', 'v', 'a', 'd', 'd', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10274 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10287 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10301 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10314 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10327 */ 'e', 'v', 'a', 'd', 'd', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10340 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10353 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10367 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10380 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10393 */ 'e', 'v', 'a', 'd', 'd', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10406 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10419 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10433 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10446 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10459 */ 'e', 'v', 'a', 'd', 'd', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10472 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10485 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10499 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10512 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10525 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'w', 32, 0,
  /* 10537 */ 'v', 's', 'r', 'a', 'w', 32, 0,
  /* 10544 */ 'v', 'p', 'r', 't', 'y', 'b', 'w', 32, 0,
  /* 10553 */ 'e', 'v', 'a', 'd', 'd', 'w', 32, 0,
  /* 10561 */ 'e', 'v', 'l', 'd', 'w', 32, 0,
  /* 10568 */ 'e', 'v', 'r', 'n', 'd', 'w', 32, 0,
  /* 10576 */ 'e', 'v', 's', 't', 'd', 'w', 32, 0,
  /* 10584 */ 'v', 'm', 'r', 'g', 'e', 'w', 32, 0,
  /* 10592 */ 'v', 'c', 'm', 'p', 'n', 'e', 'w', 32, 0,
  /* 10601 */ 'e', 'v', 's', 'u', 'b', 'f', 'w', 32, 0,
  /* 10610 */ 'e', 'v', 's', 'u', 'b', 'i', 'f', 'w', 32, 0,
  /* 10620 */ 'v', 'n', 'e', 'g', 'w', 32, 0,
  /* 10627 */ 'v', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 10635 */ 'x', 'x', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 10644 */ 'm', 'u', 'l', 'h', 'w', 32, 0,
  /* 10651 */ 'e', 'v', 'a', 'd', 'd', 'i', 'w', 32, 0,
  /* 10660 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 32, 0,
  /* 10669 */ 'v', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 10677 */ 'x', 'x', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 10686 */ 'm', 'u', 'l', 'l', 'w', 32, 0,
  /* 10693 */ 'c', 'm', 'p', 'l', 'w', 32, 0,
  /* 10700 */ 'e', 'v', 'r', 'l', 'w', 32, 0,
  /* 10707 */ 'e', 'v', 's', 'l', 'w', 32, 0,
  /* 10714 */ 'l', 'm', 'w', 32, 0,
  /* 10719 */ 's', 't', 'm', 'w', 32, 0,
  /* 10725 */ 'v', 'p', 'm', 's', 'u', 'm', 'w', 32, 0,
  /* 10734 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 10747 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 10760 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 10773 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 10786 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10799 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10812 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10825 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10838 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10851 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10864 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10877 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10890 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10903 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10916 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10929 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10942 */ 'v', 'm', 'r', 'g', 'o', 'w', 32, 0,
  /* 10950 */ 'c', 'm', 'p', 'w', 32, 0,
  /* 10956 */ 'x', 'x', 'b', 'r', 'w', 32, 0,
  /* 10963 */ 'v', 's', 'r', 'w', 32, 0,
  /* 10969 */ 'm', 'o', 'd', 's', 'w', 32, 0,
  /* 10976 */ 'v', 'm', 'u', 'l', 'e', 's', 'w', 32, 0,
  /* 10985 */ 'v', 'a', 'v', 'g', 's', 'w', 32, 0,
  /* 10993 */ 'v', 'u', 'p', 'k', 'h', 's', 'w', 32, 0,
  /* 11002 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'w', 32, 0,
  /* 11012 */ 'v', 'u', 'p', 'k', 'l', 's', 'w', 32, 0,
  /* 11021 */ 'e', 'v', 'c', 'n', 't', 'l', 's', 'w', 32, 0,
  /* 11031 */ 'v', 'm', 'i', 'n', 's', 'w', 32, 0,
  /* 11039 */ 'v', 'm', 'u', 'l', 'o', 's', 'w', 32, 0,
  /* 11048 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', 32, 0,
  /* 11058 */ 'e', 'x', 't', 's', 'w', 32, 0,
  /* 11065 */ 'v', 'm', 'a', 'x', 's', 'w', 32, 0,
  /* 11073 */ 'v', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 11081 */ 'x', 'x', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 11090 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'w', 32, 0,
  /* 11100 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'w', 32, 0,
  /* 11110 */ 'x', 'x', 'i', 'n', 's', 'e', 'r', 't', 'w', 32, 0,
  /* 11121 */ 's', 't', 'w', 32, 0,
  /* 11126 */ 'v', 's', 'u', 'b', 'c', 'u', 'w', 32, 0,
  /* 11135 */ 'v', 'a', 'd', 'd', 'c', 'u', 'w', 32, 0,
  /* 11144 */ 'm', 'o', 'd', 'u', 'w', 32, 0,
  /* 11151 */ 'v', 'a', 'b', 's', 'd', 'u', 'w', 32, 0,
  /* 11160 */ 'v', 'm', 'u', 'l', 'e', 'u', 'w', 32, 0,
  /* 11169 */ 'v', 'a', 'v', 'g', 'u', 'w', 32, 0,
  /* 11177 */ 'v', 'm', 'i', 'n', 'u', 'w', 32, 0,
  /* 11185 */ 'v', 'm', 'u', 'l', 'o', 'u', 'w', 32, 0,
  /* 11194 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', 32, 0,
  /* 11204 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'w', 32, 0,
  /* 11216 */ 'x', 'x', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'w', 32, 0,
  /* 11229 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', 32, 0,
  /* 11239 */ 'v', 'm', 'a', 'x', 'u', 'w', 32, 0,
  /* 11247 */ 'd', 'i', 'v', 'w', 32, 0,
  /* 11253 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'w', 32, 0,
  /* 11263 */ 'v', 'c', 'l', 'z', 'w', 32, 0,
  /* 11270 */ 'e', 'v', 'c', 'n', 't', 'l', 'z', 'w', 32, 0,
  /* 11280 */ 'v', 'c', 't', 'z', 'w', 32, 0,
  /* 11287 */ 'c', 'n', 't', 't', 'z', 'w', 32, 0,
  /* 11295 */ 'l', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 11303 */ 's', 't', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 11312 */ 'l', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 11320 */ 's', 't', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 11329 */ 'l', 'x', 'v', 'b', '1', '6', 'x', 32, 0,
  /* 11338 */ 's', 't', 'x', 'v', 'b', '1', '6', 'x', 32, 0,
  /* 11348 */ 'l', 'x', 'v', 'h', '8', 'x', 32, 0,
  /* 11356 */ 's', 't', 'x', 'v', 'h', '8', 'x', 32, 0,
  /* 11365 */ 'l', 'h', 'a', 'x', 32, 0,
  /* 11371 */ 't', 'l', 'b', 'i', 'v', 'a', 'x', 32, 0,
  /* 11380 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 32, 0,
  /* 11390 */ 'l', 'x', 's', 'i', 'w', 'a', 'x', 32, 0,
  /* 11399 */ 'l', 'w', 'a', 'x', 32, 0,
  /* 11405 */ 'l', 'v', 'e', 'b', 'x', 32, 0,
  /* 11412 */ 's', 't', 'v', 'e', 'b', 'x', 32, 0,
  /* 11420 */ 's', 't', 'x', 's', 'i', 'b', 'x', 32, 0,
  /* 11429 */ 's', 't', 'b', 'x', 32, 0,
  /* 11435 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 32, 0,
  /* 11444 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 32, 0,
  /* 11454 */ 'e', 'v', 'l', 'd', 'd', 'x', 32, 0,
  /* 11462 */ 'e', 'v', 's', 't', 'd', 'd', 'x', 32, 0,
  /* 11471 */ 'q', 'v', 'l', 'f', 'd', 'x', 32, 0,
  /* 11479 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 32, 0,
  /* 11488 */ 'q', 'v', 'l', 'p', 'c', 'l', 'd', 'x', 32, 0,
  /* 11498 */ 'q', 'v', 'l', 'p', 'c', 'r', 'd', 'x', 32, 0,
  /* 11508 */ 'l', 'x', 's', 'd', 'x', 32, 0,
  /* 11515 */ 's', 't', 'x', 's', 'd', 'x', 32, 0,
  /* 11523 */ 's', 't', 'd', 'x', 32, 0,
  /* 11529 */ 'e', 'v', 'l', 'w', 'h', 'e', 'x', 32, 0,
  /* 11538 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 'x', 32, 0,
  /* 11548 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 'x', 32, 0,
  /* 11558 */ 'e', 'v', 'l', 'd', 'h', 'x', 32, 0,
  /* 11566 */ 'e', 'v', 's', 't', 'd', 'h', 'x', 32, 0,
  /* 11575 */ 'l', 'v', 'e', 'h', 'x', 32, 0,
  /* 11582 */ 's', 't', 'v', 'e', 'h', 'x', 32, 0,
  /* 11590 */ 's', 't', 'x', 's', 'i', 'h', 'x', 32, 0,
  /* 11599 */ 's', 't', 'h', 'x', 32, 0,
  /* 11605 */ 's', 't', 'b', 'c', 'i', 'x', 32, 0,
  /* 11613 */ 'l', 'd', 'c', 'i', 'x', 32, 0,
  /* 11620 */ 's', 't', 'd', 'c', 'i', 'x', 32, 0,
  /* 11628 */ 's', 't', 'h', 'c', 'i', 'x', 32, 0,
  /* 11636 */ 's', 't', 'w', 'c', 'i', 'x', 32, 0,
  /* 11644 */ 'l', 'b', 'z', 'c', 'i', 'x', 32, 0,
  /* 11652 */ 'l', 'h', 'z', 'c', 'i', 'x', 32, 0,
  /* 11660 */ 'l', 'w', 'z', 'c', 'i', 'x', 32, 0,
  /* 11668 */ 'x', 's', 'r', 'q', 'p', 'i', 'x', 32, 0,
  /* 11677 */ 'v', 'e', 'x', 't', 'u', 'b', 'l', 'x', 32, 0,
  /* 11687 */ 'v', 'e', 'x', 't', 'u', 'h', 'l', 'x', 32, 0,
  /* 11697 */ 'v', 'e', 'x', 't', 'u', 'w', 'l', 'x', 32, 0,
  /* 11707 */ 'l', 'd', 'm', 'x', 32, 0,
  /* 11713 */ 'v', 's', 'b', 'o', 'x', 32, 0,
  /* 11720 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 'x', 32, 0,
  /* 11730 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 'x', 32, 0,
  /* 11740 */ 'l', 'b', 'e', 'p', 'x', 32, 0,
  /* 11747 */ 's', 't', 'b', 'e', 'p', 'x', 32, 0,
  /* 11755 */ 'l', 'f', 'd', 'e', 'p', 'x', 32, 0,
  /* 11763 */ 's', 't', 'f', 'd', 'e', 'p', 'x', 32, 0,
  /* 11772 */ 'l', 'h', 'e', 'p', 'x', 32, 0,
  /* 11779 */ 's', 't', 'h', 'e', 'p', 'x', 32, 0,
  /* 11787 */ 'l', 'w', 'e', 'p', 'x', 32, 0,
  /* 11794 */ 's', 't', 'w', 'e', 'p', 'x', 32, 0,
  /* 11802 */ 'v', 'u', 'p', 'k', 'h', 'p', 'x', 32, 0,
  /* 11811 */ 'v', 'p', 'k', 'p', 'x', 32, 0,
  /* 11818 */ 'v', 'u', 'p', 'k', 'l', 'p', 'x', 32, 0,
  /* 11827 */ 'l', 'x', 's', 's', 'p', 'x', 32, 0,
  /* 11835 */ 's', 't', 'x', 's', 's', 'p', 'x', 32, 0,
  /* 11844 */ 'l', 'b', 'a', 'r', 'x', 32, 0,
  /* 11851 */ 'l', 'd', 'a', 'r', 'x', 32, 0,
  /* 11858 */ 'l', 'h', 'a', 'r', 'x', 32, 0,
  /* 11865 */ 'l', 'w', 'a', 'r', 'x', 32, 0,
  /* 11872 */ 'l', 'd', 'b', 'r', 'x', 32, 0,
  /* 11879 */ 's', 't', 'd', 'b', 'r', 'x', 32, 0,
  /* 11887 */ 'l', 'h', 'b', 'r', 'x', 32, 0,
  /* 11894 */ 's', 't', 'h', 'b', 'r', 'x', 32, 0,
  /* 11902 */ 'v', 'e', 'x', 't', 'u', 'b', 'r', 'x', 32, 0,
  /* 11912 */ 'l', 'w', 'b', 'r', 'x', 32, 0,
  /* 11919 */ 's', 't', 'w', 'b', 'r', 'x', 32, 0,
  /* 11927 */ 'v', 'e', 'x', 't', 'u', 'h', 'r', 'x', 32, 0,
  /* 11937 */ 'v', 'e', 'x', 't', 'u', 'w', 'r', 'x', 32, 0,
  /* 11947 */ 'm', 'c', 'r', 'x', 'r', 'x', 32, 0,
  /* 11955 */ 't', 'l', 'b', 's', 'x', 32, 0,
  /* 11962 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 32, 0,
  /* 11971 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 32, 0,
  /* 11981 */ 'l', 'x', 'v', 'd', 's', 'x', 32, 0,
  /* 11989 */ 'v', 'c', 'f', 's', 'x', 32, 0,
  /* 11996 */ 'q', 'v', 'l', 'f', 's', 'x', 32, 0,
  /* 12004 */ 'q', 'v', 's', 't', 'f', 's', 'x', 32, 0,
  /* 12013 */ 'q', 'v', 'l', 'p', 'c', 'l', 's', 'x', 32, 0,
  /* 12023 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 'x', 32, 0,
  /* 12033 */ 'q', 'v', 'l', 'p', 'c', 'r', 's', 'x', 32, 0,
  /* 12043 */ 'l', 'x', 'v', 'w', 's', 'x', 32, 0,
  /* 12051 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12065 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12078 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12093 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12108 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12121 */ 'l', 'h', 'a', 'u', 'x', 32, 0,
  /* 12128 */ 'l', 'w', 'a', 'u', 'x', 32, 0,
  /* 12135 */ 's', 't', 'b', 'u', 'x', 32, 0,
  /* 12142 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 12152 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 12163 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 32, 0,
  /* 12172 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 32, 0,
  /* 12182 */ 'l', 'd', 'u', 'x', 32, 0,
  /* 12188 */ 's', 't', 'd', 'u', 'x', 32, 0,
  /* 12195 */ 'v', 'c', 'f', 'u', 'x', 32, 0,
  /* 12202 */ 's', 't', 'h', 'u', 'x', 32, 0,
  /* 12209 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 'x', 32, 0,
  /* 12219 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 12229 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 12240 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 32, 0,
  /* 12249 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 32, 0,
  /* 12259 */ 's', 't', 'w', 'u', 'x', 32, 0,
  /* 12266 */ 'l', 'b', 'z', 'u', 'x', 32, 0,
  /* 12273 */ 'l', 'h', 'z', 'u', 'x', 32, 0,
  /* 12280 */ 'l', 'w', 'z', 'u', 'x', 32, 0,
  /* 12287 */ 'l', 'v', 'x', 32, 0,
  /* 12292 */ 's', 't', 'v', 'x', 32, 0,
  /* 12298 */ 'l', 'x', 'v', 'x', 32, 0,
  /* 12304 */ 's', 't', 'x', 'v', 'x', 32, 0,
  /* 12311 */ 'e', 'v', 'l', 'd', 'w', 'x', 32, 0,
  /* 12319 */ 'e', 'v', 's', 't', 'd', 'w', 'x', 32, 0,
  /* 12328 */ 'l', 'v', 'e', 'w', 'x', 32, 0,
  /* 12335 */ 's', 't', 'v', 'e', 'w', 'x', 32, 0,
  /* 12343 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 32, 0,
  /* 12353 */ 's', 't', 'x', 's', 'i', 'w', 'x', 32, 0,
  /* 12362 */ 's', 't', 'w', 'x', 32, 0,
  /* 12368 */ 'l', 'x', 's', 'i', 'b', 'z', 'x', 32, 0,
  /* 12377 */ 'l', 'b', 'z', 'x', 32, 0,
  /* 12383 */ 'l', 'x', 's', 'i', 'h', 'z', 'x', 32, 0,
  /* 12392 */ 'l', 'h', 'z', 'x', 32, 0,
  /* 12398 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 32, 0,
  /* 12408 */ 'l', 'x', 's', 'i', 'w', 'z', 'x', 32, 0,
  /* 12417 */ 'l', 'w', 'z', 'x', 32, 0,
  /* 12423 */ 'c', 'o', 'p', 'y', 32, 0,
  /* 12429 */ 'd', 'c', 'b', 'z', 32, 0,
  /* 12435 */ 'l', 'b', 'z', 32, 0,
  /* 12440 */ 'b', 'd', 'z', 32, 0,
  /* 12445 */ 'e', 'f', 'd', 'c', 't', 's', 'i', 'd', 'z', 32, 0,
  /* 12456 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'z', 32, 0,
  /* 12466 */ 'e', 'f', 'd', 'c', 't', 'u', 'i', 'd', 'z', 32, 0,
  /* 12477 */ 'x', 's', 'c', 'v', 'q', 'p', 's', 'd', 'z', 32, 0,
  /* 12488 */ 'x', 's', 'c', 'v', 'q', 'p', 'u', 'd', 'z', 32, 0,
  /* 12499 */ 'l', 'h', 'z', 32, 0,
  /* 12504 */ 'v', 'r', 'f', 'i', 'z', 32, 0,
  /* 12511 */ 'x', 's', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 12520 */ 'x', 'v', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 12529 */ 'x', 'v', 'r', 's', 'p', 'i', 'z', 32, 0,
  /* 12538 */ 'q', 'v', 'f', 'r', 'i', 'z', 32, 0,
  /* 12546 */ 'e', 'f', 'd', 'c', 't', 's', 'i', 'z', 32, 0,
  /* 12556 */ 'e', 'f', 's', 'c', 't', 's', 'i', 'z', 32, 0,
  /* 12566 */ 'e', 'v', 'f', 's', 'c', 't', 's', 'i', 'z', 32, 0,
  /* 12577 */ 'e', 'f', 'd', 'c', 't', 'u', 'i', 'z', 32, 0,
  /* 12587 */ 'e', 'f', 's', 'c', 't', 'u', 'i', 'z', 32, 0,
  /* 12597 */ 'b', 'd', 'n', 'z', 32, 0,
  /* 12603 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 'z', 32, 0,
  /* 12614 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 'z', 32, 0,
  /* 12625 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'z', 32, 0,
  /* 12635 */ 'l', 'w', 'z', 32, 0,
  /* 12640 */ 'm', 'f', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 12649 */ 'm', 't', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 12658 */ 'x', 's', 'c', 'v', 'q', 'p', 's', 'w', 'z', 32, 0,
  /* 12669 */ 'x', 's', 'c', 'v', 'q', 'p', 'u', 'w', 'z', 32, 0,
  /* 12680 */ 'b', 'd', 'z', 'l', 'r', 'l', '+', 0,
  /* 12688 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '+', 0,
  /* 12697 */ 'b', 'd', 'z', 'l', 'r', '+', 0,
  /* 12704 */ 'b', 'd', 'n', 'z', 'l', 'r', '+', 0,
  /* 12712 */ 'e', 'v', 's', 'e', 'l', 32, 'c', 'r', 'D', ',', 0,
  /* 12723 */ 'b', 'd', 'z', 'l', 'r', 'l', '-', 0,
  /* 12731 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '-', 0,
  /* 12740 */ 'b', 'd', 'z', 'l', 'r', '-', 0,
  /* 12747 */ 'b', 'd', 'n', 'z', 'l', 'r', '-', 0,
  /* 12755 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 12786 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'y', 'p', 'e', 'd', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 12810 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 12835 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 12858 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 12881 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 12903 */ 't', 'r', 'e', 'c', 'h', 'k', 'p', 't', '.', 0,
  /* 12913 */ 'o', 'r', 'i', 32, '1', ',', 32, '1', ',', 32, '0', 0,
  /* 12925 */ 'o', 'r', 'i', 32, '2', ',', 32, '2', ',', 32, '0', 0,
  /* 12937 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', '3', '2', 0,
  /* 12954 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 12975 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 12996 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 13018 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 13039 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 13061 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 13082 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 13099 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 13120 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 13140 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 13162 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 13183 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', '3', '2', 0,
  /* 13197 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', '3', '2', 0,
  /* 13211 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 13226 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 13241 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '3', '2', 0,
  /* 13260 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '3', '2', 0,
  /* 13278 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 13296 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 13314 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 13329 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 13342 */ '#', 'D', 'F', 'L', 'O', 'A', 'D', 'f', '3', '2', 0,
  /* 13353 */ '#', 'X', 'F', 'L', 'O', 'A', 'D', 'f', '3', '2', 0,
  /* 13364 */ '#', 'D', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '3', '2', 0,
  /* 13376 */ '#', 'X', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '3', '2', 0,
  /* 13388 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 13409 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 13430 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 13452 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '6', '4', 0,
  /* 13474 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '6', '4', 0,
  /* 13495 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 13512 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 13533 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 13554 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 13574 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '6', '4', 0,
  /* 13596 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '6', '4', 0,
  /* 13617 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '6', '4', 0,
  /* 13636 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '6', '4', 0,
  /* 13654 */ '#', 'D', 'F', 'L', 'O', 'A', 'D', 'f', '6', '4', 0,
  /* 13665 */ '#', 'X', 'F', 'L', 'O', 'A', 'D', 'f', '6', '4', 0,
  /* 13676 */ '#', 'D', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '6', '4', 0,
  /* 13688 */ '#', 'X', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '6', '4', 0,
  /* 13700 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'i', '6', '4', 0,
  /* 13721 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'S', 'P', 'E', '4', 0,
  /* 13737 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'S', 'P', 'E', '4', 0,
  /* 13750 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 13764 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '4', 0,
  /* 13775 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 13789 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '4', 0,
  /* 13800 */ 'c', 'r', 'x', 'o', 'r', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 13814 */ 'c', 'r', 'e', 'q', 'v', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 13828 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '1', '6', 0,
  /* 13843 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '1', '6', 0,
  /* 13855 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 13876 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 13897 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 13919 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 13940 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '1', '6', 0,
  /* 13962 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '1', '6', 0,
  /* 13983 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 14000 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 14021 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 14041 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '1', '6', 0,
  /* 14063 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '1', '6', 0,
  /* 14084 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 14095 */ '#', 'C', 'F', 'E', 'N', 'C', 'E', '8', 0,
  /* 14104 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 14118 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '8', 0,
  /* 14129 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 14149 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 14163 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 14183 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 14204 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 14224 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '8', 0,
  /* 14245 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '8', 0,
  /* 14265 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 14285 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 14304 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 14323 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '8', 0,
  /* 14334 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '8', 0,
  /* 14355 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '8', 0,
  /* 14375 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 14388 */ '#', 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', '8', 0,
  /* 14404 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', '8', 0,
  /* 14421 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', '8', 0,
  /* 14438 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'i', '8', 0,
  /* 14454 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 14466 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 14480 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 14494 */ '#', 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 14511 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 14526 */ '#', 'R', 'e', 'a', 'd', 'T', 'B', 0,
  /* 14534 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 14544 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'B', 'R', 'C', 0,
  /* 14560 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'B', 'R', 'C', 0,
  /* 14573 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'R', 'C', 0,
  /* 14589 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'F', 'R', 'C', 0,
  /* 14602 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 14619 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 14633 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 14649 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'R', 'R', 'C', 0,
  /* 14662 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'S', 'R', 'C', 0,
  /* 14678 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'S', 'R', 'C', 0,
  /* 14691 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 14708 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 14722 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'R', 'C', 0,
  /* 14738 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'R', 'C', 0,
  /* 14751 */ '#', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'L', 'D', 0,
  /* 14766 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 14779 */ '#', 'S', 'E', 'T', 'R', 'N', 'D', 0,
  /* 14787 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 14794 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'S', 'P', 'E', 0,
  /* 14809 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'S', 'P', 'E', 0,
  /* 14821 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 14831 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 14847 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 14861 */ '#', 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 14871 */ 'D', 'B', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 14881 */ '#', 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 14889 */ '#', 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 14899 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 14911 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 14923 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 14936 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 14949 */ '#', 'U', 'p', 'd', 'a', 't', 'e', 'G', 'B', 'R', 0,
  /* 14960 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 14972 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 14982 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 14998 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 15014 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 15028 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 15040 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 15052 */ '#', 'M', 'o', 'v', 'e', 'G', 'O', 'T', 't', 'o', 'L', 'R', 0,
  /* 15065 */ '#', 'T', 'C', 'H', 'E', 'C', 'K', '_', 'R', 'E', 'T', 0,
  /* 15077 */ '#', 'T', 'B', 'E', 'G', 'I', 'N', '_', 'R', 'E', 'T', 0,
  /* 15089 */ '#', 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', 0,
  /* 15104 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 15119 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 15132 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', 0,
  /* 15148 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', 0,
  /* 15164 */ '#', 'P', 'P', 'C', '3', '2', 'G', 'O', 'T', 0,
  /* 15174 */ '#', 'P', 'P', 'C', '3', '2', 'P', 'I', 'C', 'G', 'O', 'T', 0,
  /* 15187 */ '#', 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 15197 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 15212 */ '#', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'S', 'T', 0,
  /* 15227 */ '#', 'L', 'I', 'W', 'A', 'X', 0,
  /* 15234 */ '#', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'L', 'D', 'X', 0,
  /* 15250 */ '#', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'S', 'T', 'X', 0,
  /* 15266 */ '#', 'S', 'T', 'I', 'W', 'X', 0,
  /* 15273 */ '#', 'L', 'I', 'W', 'Z', 'X', 0,
  /* 15280 */ 'b', 'c', 'a', 0,
  /* 15284 */ 's', 'l', 'b', 'i', 'a', 0,
  /* 15290 */ 't', 'l', 'b', 'i', 'a', 0,
  /* 15296 */ 'b', 'c', 'l', 'a', 0,
  /* 15301 */ 'c', 'l', 'r', 'b', 'h', 'r', 'b', 0,
  /* 15309 */ 'b', 'c', 0,
  /* 15312 */ 's', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 15320 */ 't', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 15328 */ 'm', 's', 'g', 's', 'y', 'n', 'c', 0,
  /* 15336 */ 'i', 's', 'y', 'n', 'c', 0,
  /* 15342 */ 'm', 's', 'y', 'n', 'c', 0,
  /* 15348 */ '#', 'L', 'D', 't', 'o', 'c', 0,
  /* 15355 */ '#', 'L', 'W', 'Z', 't', 'o', 'c', 0,
  /* 15363 */ 'h', 'r', 'f', 'i', 'd', 0,
  /* 15369 */ 't', 'l', 'b', 'r', 'e', 0,
  /* 15375 */ 't', 'l', 'b', 'w', 'e', 0,
  /* 15381 */ '#', 'S', 'E', 'T', 'R', 'N', 'D', 'i', 0,
  /* 15390 */ 'r', 'f', 'c', 'i', 0,
  /* 15395 */ 'r', 'f', 'm', 'c', 'i', 0,
  /* 15401 */ 'r', 'f', 'd', 'i', 0,
  /* 15406 */ 'r', 'f', 'i', 0,
  /* 15410 */ 'b', 'c', 'l', 0,
  /* 15414 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 15428 */ 'd', 's', 's', 'a', 'l', 'l', 0,
  /* 15435 */ 'b', 'l', 'r', 'l', 0,
  /* 15440 */ 'b', 'd', 'z', 'l', 'r', 'l', 0,
  /* 15447 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', 0,
  /* 15455 */ 'b', 'c', 't', 'r', 'l', 0,
  /* 15461 */ 'a', 't', 't', 'n', 0,
  /* 15466 */ 'e', 'i', 'e', 'i', 'o', 0,
  /* 15472 */ 'n', 'a', 'p', 0,
  /* 15476 */ 't', 'r', 'a', 'p', 0,
  /* 15481 */ 'n', 'o', 'p', 0,
  /* 15485 */ 's', 't', 'o', 'p', 0,
  /* 15490 */ 'b', 'l', 'r', 0,
  /* 15494 */ 'b', 'd', 'z', 'l', 'r', 0,
  /* 15500 */ 'b', 'd', 'n', 'z', 'l', 'r', 0,
  /* 15507 */ 'b', 'c', 't', 'r', 0,
  /* 15512 */ 'c', 'p', '_', 'a', 'b', 'o', 'r', 't', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    14822U,	// DBG_VALUE
    14872U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    14788U,	// BUNDLE
    15198U,	// LIFETIME_START
    14767U,	// LIFETIME_END
    0U,	// STACKMAP
    15415U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    12836U,	// PATCHABLE_FUNCTION_ENTER
    12756U,	// PATCHABLE_RET
    12882U,	// PATCHABLE_FUNCTION_EXIT
    12859U,	// PATCHABLE_TAIL_CALL
    12811U,	// PATCHABLE_EVENT_CALL
    12787U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    14096U,	// CFENCE8
    21051U,	// CLRLSLDI
    17220U,	// CLRLSLDIo
    21560U,	// CLRLSLWI
    17329U,	// CLRLSLWIo
    21086U,	// CLRRDI
    17247U,	// CLRRDIo
    21601U,	// CLRRWI
    17358U,	// CLRRWIo
    536897118U,	// CP_COPY_FIRST
    536899720U,	// CP_COPYx
    536897067U,	// CP_PASTE_LAST
    536891271U,	// CP_PASTEx
    562490U,	// DCBFL
    564345U,	// DCBFLP
    561076U,	// DCBFx
    553690484U,	// DCBTCT
    553689765U,	// DCBTDS
    553690492U,	// DCBTSTCT
    553689773U,	// DCBTSTDS
    566918U,	// DCBTSTT
    566890U,	// DCBTSTx
    566905U,	// DCBTT
    566632U,	// DCBTx
    13343U,	// DFLOADf32
    13655U,	// DFLOADf64
    13365U,	// DFSTOREf32
    13677U,	// DFSTOREf64
    21061U,	// EXTLDI
    17231U,	// EXTLDIo
    21586U,	// EXTLWI
    17349U,	// EXTLWIo
    21110U,	// EXTRDI
    17274U,	// EXTRDIo
    21625U,	// EXTRWI
    17385U,	// EXTRWIo
    21570U,	// INSLWI
    17340U,	// INSLWIo
    21094U,	// INSRDI
    17256U,	// INSRDIo
    21609U,	// INSRWI
    17367U,	// INSRWIo
    33573251U,	// LAx
    15228U,	// LIWAX
    15274U,	// LIWZX
    21214U,	// RLWIMIbm
    17312U,	// RLWIMIobm
    22111U,	// RLWINMbm
    17443U,	// RLWINMobm
    22120U,	// RLWNMbm
    17452U,	// RLWNMobm
    21102U,	// ROTRDI
    17265U,	// ROTRDIo
    21617U,	// ROTRWI
    17376U,	// ROTRWIo
    21055U,	// SLDI
    17224U,	// SLDIo
    21564U,	// SLWI
    17333U,	// SLWIo
    14752U,	// SPILLTOVSR_LD
    15235U,	// SPILLTOVSR_LDX
    15213U,	// SPILLTOVSR_ST
    15251U,	// SPILLTOVSR_STX
    21096U,	// SRDI
    17258U,	// SRDIo
    21611U,	// SRWI
    17369U,	// SRWIo
    15267U,	// STIWX
    21002U,	// SUBI
    19531U,	// SUBIC
    16795U,	// SUBICo
    25484U,	// SUBIS
    50357139U,	// SUBPCIS
    13354U,	// XFLOADf32
    13666U,	// XFLOADf64
    13377U,	// XFSTOREf32
    13689U,	// XFSTOREf64
    19714U,	// ADD4
    19714U,	// ADD4TLS
    16867U,	// ADD4o
    19714U,	// ADD8
    19714U,	// ADD8TLS
    19714U,	// ADD8TLS_
    16867U,	// ADD8o
    19493U,	// ADDC
    19493U,	// ADDC8
    16762U,	// ADDC8o
    16762U,	// ADDCo
    20244U,	// ADDE
    20244U,	// ADDE8
    17006U,	// ADDE8o
    17006U,	// ADDEo
    21037U,	// ADDI
    21037U,	// ADDI8
    19538U,	// ADDIC
    19538U,	// ADDIC8
    16803U,	// ADDICo
    25509U,	// ADDIS
    25509U,	// ADDIS8
    14512U,	// ADDISdtprelHA
    12938U,	// ADDISdtprelHA32
    14495U,	// ADDISgotTprelHA
    14467U,	// ADDIStlsgdHA
    14481U,	// ADDIStlsldHA
    14455U,	// ADDIStocHA
    14937U,	// ADDIdtprelL
    13227U,	// ADDIdtprelL32
    14900U,	// ADDItlsgdL
    13184U,	// ADDItlsgdL32
    14983U,	// ADDItlsgdLADDR
    13279U,	// ADDItlsgdLADDR32
    14912U,	// ADDItlsldL
    13198U,	// ADDItlsldL32
    14999U,	// ADDItlsldLADDR
    13297U,	// ADDItlsldLADDR32
    14890U,	// ADDItocL
    536891223U,	// ADDME
    536891223U,	// ADDME8
    536887950U,	// ADDME8o
    536887950U,	// ADDMEo
    536896412U,	// ADDPCIS
    536891301U,	// ADDZE
    536891301U,	// ADDZE8
    536887999U,	// ADDZE8o
    536887999U,	// ADDZEo
    51120U,	// ADJCALLSTACKDOWN
    51139U,	// ADJCALLSTACKUP
    19985U,	// AND
    19985U,	// AND8
    16929U,	// AND8o
    19502U,	// ANDC
    19502U,	// ANDC8
    16769U,	// ANDC8o
    16769U,	// ANDCo
    17842U,	// ANDISo
    17842U,	// ANDISo8
    17240U,	// ANDIo
    17240U,	// ANDIo8
    15133U,	// ANDIo_1_EQ_BIT
    14405U,	// ANDIo_1_EQ_BIT8
    15149U,	// ANDIo_1_GT_BIT
    14422U,	// ANDIo_1_GT_BIT8
    16929U,	// ANDo
    1141917537U,	// ATOMIC_CMP_SWAP_I16
    1141917515U,	// ATOMIC_CMP_SWAP_I32
    13513U,	// ATOMIC_CMP_SWAP_I64
    14266U,	// ATOMIC_CMP_SWAP_I8
    13877U,	// ATOMIC_LOAD_ADD_I16
    12976U,	// ATOMIC_LOAD_ADD_I32
    13410U,	// ATOMIC_LOAD_ADD_I64
    14164U,	// ATOMIC_LOAD_ADD_I8
    13920U,	// ATOMIC_LOAD_AND_I16
    13019U,	// ATOMIC_LOAD_AND_I32
    13701U,	// ATOMIC_LOAD_AND_I64
    14205U,	// ATOMIC_LOAD_AND_I8
    14064U,	// ATOMIC_LOAD_MAX_I16
    13163U,	// ATOMIC_LOAD_MAX_I32
    13597U,	// ATOMIC_LOAD_MAX_I64
    14356U,	// ATOMIC_LOAD_MAX_I8
    13963U,	// ATOMIC_LOAD_MIN_I16
    13062U,	// ATOMIC_LOAD_MIN_I32
    13475U,	// ATOMIC_LOAD_MIN_I64
    14246U,	// ATOMIC_LOAD_MIN_I8
    13898U,	// ATOMIC_LOAD_NAND_I16
    12997U,	// ATOMIC_LOAD_NAND_I32
    13431U,	// ATOMIC_LOAD_NAND_I64
    14184U,	// ATOMIC_LOAD_NAND_I8
    14022U,	// ATOMIC_LOAD_OR_I16
    13121U,	// ATOMIC_LOAD_OR_I32
    13555U,	// ATOMIC_LOAD_OR_I64
    14305U,	// ATOMIC_LOAD_OR_I8
    13856U,	// ATOMIC_LOAD_SUB_I16
    12955U,	// ATOMIC_LOAD_SUB_I32
    13389U,	// ATOMIC_LOAD_SUB_I64
    14130U,	// ATOMIC_LOAD_SUB_I8
    14042U,	// ATOMIC_LOAD_UMAX_I16
    13141U,	// ATOMIC_LOAD_UMAX_I32
    13575U,	// ATOMIC_LOAD_UMAX_I64
    14335U,	// ATOMIC_LOAD_UMAX_I8
    13941U,	// ATOMIC_LOAD_UMIN_I16
    13040U,	// ATOMIC_LOAD_UMIN_I32
    13453U,	// ATOMIC_LOAD_UMIN_I64
    14225U,	// ATOMIC_LOAD_UMIN_I8
    14001U,	// ATOMIC_LOAD_XOR_I16
    13100U,	// ATOMIC_LOAD_XOR_I32
    13534U,	// ATOMIC_LOAD_XOR_I64
    14286U,	// ATOMIC_LOAD_XOR_I8
    13984U,	// ATOMIC_SWAP_I16
    13083U,	// ATOMIC_SWAP_I32
    13496U,	// ATOMIC_SWAP_I64
    14439U,	// ATOMIC_SWAP_I8
    15462U,	// ATTN
    592523U,	// B
    608349U,	// BA
    83902568U,	// BC
    1686476U,	// BCC
    2210764U,	// BCCA
    2735052U,	// BCCCTR
    2735052U,	// BCCCTR8
    3259340U,	// BCCCTRL
    3259340U,	// BCCCTRL8
    3783628U,	// BCCL
    4307916U,	// BCCLA
    4832204U,	// BCCLR
    5356492U,	// BCCLRL
    5783706U,	// BCCTR
    5783706U,	// BCCTR8
    5783762U,	// BCCTR8n
    5783684U,	// BCCTRL
    5783684U,	// BCCTRL8
    5783742U,	// BCCTRL8n
    5783742U,	// BCCTRLn
    5783762U,	// BCCTRn
    17460U,	// BCDCFNo
    17663U,	// BCDCFSQo
    18181U,	// BCDCFZo
    17469U,	// BCDCPSGNo
    536888429U,	// BCDCTNo
    536888585U,	// BCDCTSQo
    18197U,	// BCDCTZo
    17489U,	// BCDSETSGNo
    17718U,	// BCDSRo
    17774U,	// BCDSo
    16819U,	// BCDTRUNCo
    17867U,	// BCDUSo
    16830U,	// BCDUTRUNCo
    83902576U,	// BCL
    5783696U,	// BCLR
    5783673U,	// BCLRL
    5783732U,	// BCLRLn
    5783753U,	// BCLRn
    589901U,	// BCLalways
    83902636U,	// BCLn
    15508U,	// BCTR
    15508U,	// BCTR8
    15456U,	// BCTRL
    15456U,	// BCTRL8
    114778U,	// BCTRL8_LDinto_toc
    83902629U,	// BCn
    602422U,	// BDNZ
    602422U,	// BDNZ8
    608896U,	// BDNZA
    606464U,	// BDNZAm
    606249U,	// BDNZAp
    595389U,	// BDNZL
    608660U,	// BDNZLA
    606448U,	// BDNZLAm
    606233U,	// BDNZLAp
    15501U,	// BDNZLR
    15501U,	// BDNZLR8
    15448U,	// BDNZLRL
    12732U,	// BDNZLRLm
    12689U,	// BDNZLRLp
    12748U,	// BDNZLRm
    12705U,	// BDNZLRp
    590095U,	// BDNZLm
    589880U,	// BDNZLp
    590109U,	// BDNZm
    589894U,	// BDNZp
    602265U,	// BDZ
    602265U,	// BDZ8
    608890U,	// BDZA
    606457U,	// BDZAm
    606242U,	// BDZAp
    595383U,	// BDZL
    608653U,	// BDZLA
    606440U,	// BDZLAm
    606225U,	// BDZLAp
    15495U,	// BDZLR
    15495U,	// BDZLR8
    15441U,	// BDZLRL
    12724U,	// BDZLRLm
    12681U,	// BDZLRLp
    12741U,	// BDZLRm
    12698U,	// BDZLRp
    590088U,	// BDZLm
    589873U,	// BDZLp
    590103U,	// BDZm
    589888U,	// BDZp
    595199U,	// BL
    595199U,	// BL8
    6362367U,	// BL8_NOP
    6427903U,	// BL8_NOP_TLS
    660735U,	// BL8_TLS
    660735U,	// BL8_TLS_
    608642U,	// BLA
    608642U,	// BLA8
    6375810U,	// BLA8_NOP
    15491U,	// BLR
    15491U,	// BLR8
    15436U,	// BLRL
    6362367U,	// BL_NOP
    660735U,	// BL_TLS
    19965U,	// BPERMD
    19594U,	// BRINC
    15302U,	// CLRBHRB
    19169U,	// CMPB
    19169U,	// CMPB8
    20029U,	// CMPD
    21079U,	// CMPDI
    19175U,	// CMPEQB
    19936U,	// CMPLD
    21043U,	// CMPLDI
    27078U,	// CMPLW
    21544U,	// CMPLWI
    100682479U,	// CMPRB
    100682479U,	// CMPRB8
    27335U,	// CMPW
    21594U,	// CMPWI
    536891116U,	// CNTLZD
    536887900U,	// CNTLZDo
    536898569U,	// CNTLZW
    536898569U,	// CNTLZW8
    536889026U,	// CNTLZW8o
    536889026U,	// CNTLZWo
    536891131U,	// CNTTZD
    536887909U,	// CNTTZDo
    536898584U,	// CNTTZW
    536898584U,	// CNTTZW8
    536889035U,	// CNTTZW8o
    536889035U,	// CNTTZWo
    15513U,	// CP_ABORT
    28808U,	// CP_COPY
    28808U,	// CP_COPY8
    20359U,	// CP_PASTE
    20359U,	// CP_PASTE8
    17071U,	// CP_PASTE8o
    17071U,	// CP_PASTEo
    13815U,	// CR6SET
    13801U,	// CR6UNSET
    20015U,	// CRAND
    19508U,	// CRANDC
    26543U,	// CREQV
    19999U,	// CRNAND
    24873U,	// CRNOR
    24887U,	// CROR
    19615U,	// CRORC
    117467055U,	// CRSET
    117465429U,	// CRUNSET
    24917U,	// CRXOR
    1686476U,	// CTRL_DEP
    536893351U,	// DARN
    559195U,	// DCBA
    151476U,	// DCBF
    564096U,	// DCBFEP
    561662U,	// DCBI
    566866U,	// DCBST
    564129U,	// DCBSTEP
    157032U,	// DCBT
    170905U,	// DCBTEP
    157290U,	// DCBTST
    170922U,	// DCBTSTEP
    569486U,	// DCBZ
    564148U,	// DCBZEP
    562608U,	// DCBZL
    564112U,	// DCBZLEP
    536891920U,	// DCCCI
    20191U,	// DIVD
    20250U,	// DIVDE
    26343U,	// DIVDEU
    17945U,	// DIVDEUo
    17013U,	// DIVDEo
    26336U,	// DIVDU
    17937U,	// DIVDUo
    16981U,	// DIVDo
    27632U,	// DIVW
    20373U,	// DIVWE
    26351U,	// DIVWEU
    17954U,	// DIVWEUo
    17079U,	// DIVWEo
    26457U,	// DIVWU
    17981U,	// DIVWUo
    18096U,	// DIVWo
    713705U,	// DSS
    15429U,	// DSSALL
    1745036889U,	// DST
    1745036889U,	// DST64
    1745036914U,	// DSTST
    1745036914U,	// DSTST64
    1745036943U,	// DSTSTT
    1745036943U,	// DSTSTT64
    1745036928U,	// DSTT
    1745036928U,	// DSTT64
    14535U,	// DYNALLOC
    14085U,	// DYNALLOC8
    15090U,	// DYNAREAOFFSET
    14389U,	// DYNAREAOFFSET8
    536895910U,	// EFDABS
    19711U,	// EFDADD
    536896275U,	// EFDCFS
    536891396U,	// EFDCFSF
    536892307U,	// EFDCFSI
    536890797U,	// EFDCFSID
    536891498U,	// EFDCFUF
    536892384U,	// EFDCFUI
    536890816U,	// EFDCFUID
    24534U,	// EFDCMPEQ
    25990U,	// EFDCMPGT
    26068U,	// EFDCMPLT
    536891470U,	// EFDCTSF
    536892335U,	// EFDCTSI
    536899742U,	// EFDCTSIDZ
    536899843U,	// EFDCTSIZ
    536891526U,	// EFDCTUF
    536892412U,	// EFDCTUI
    536899763U,	// EFDCTUIDZ
    536899874U,	// EFDCTUIZ
    26491U,	// EFDDIV
    21868U,	// EFDMUL
    536895926U,	// EFDNABS
    536891552U,	// EFDNEG
    19383U,	// EFDSUB
    24584U,	// EFDTSTEQ
    26031U,	// EFDTSTGT
    26109U,	// EFDTSTLT
    536895963U,	// EFSABS
    19794U,	// EFSADD
    536890747U,	// EFSCFD
    536891405U,	// EFSCFSF
    536892316U,	// EFSCFSI
    536891507U,	// EFSCFUF
    536892393U,	// EFSCFUI
    24554U,	// EFSCMPEQ
    26010U,	// EFSCMPGT
    26088U,	// EFSCMPLT
    536891479U,	// EFSCTSF
    536892344U,	// EFSCTSI
    536899853U,	// EFSCTSIZ
    536891535U,	// EFSCTUF
    536892421U,	// EFSCTUI
    536899884U,	// EFSCTUIZ
    26505U,	// EFSDIV
    21884U,	// EFSMUL
    536895944U,	// EFSNABS
    536891568U,	// EFSNEG
    19418U,	// EFSSUB
    24594U,	// EFSTSTEQ
    26041U,	// EFSTSTGT
    26119U,	// EFSTSTLT
    13242U,	// EH_SjLj_LongJmp32
    13618U,	// EH_SjLj_LongJmp64
    13261U,	// EH_SjLj_SetJmp32
    13637U,	// EH_SjLj_SetJmp64
    589825U,	// EH_SjLj_Setup
    26538U,	// EQV
    26538U,	// EQV8
    17996U,	// EQV8o
    17996U,	// EQVo
    536895980U,	// EVABS
    16804252U,	// EVADDIW
    536897558U,	// EVADDSMIAAW
    536897690U,	// EVADDSSIAAW
    536897624U,	// EVADDUMIAAW
    536897756U,	// EVADDUSIAAW
    26938U,	// EVADDW
    20022U,	// EVAND
    19516U,	// EVANDC
    24575U,	// EVCMPEQ
    25600U,	// EVCMPGTS
    26403U,	// EVCMPGTU
    25610U,	// EVCMPLTS
    26413U,	// EVCMPLTU
    536898318U,	// EVCNTLSW
    536898567U,	// EVCNTLZW
    25772U,	// EVDIVWS
    26455U,	// EVDIVWU
    26550U,	// EVEQV
    536890180U,	// EVEXTSB
    536891745U,	// EVEXTSH
    536895971U,	// EVFSABS
    19802U,	// EVFSADD
    536891414U,	// EVFSCFSF
    536892325U,	// EVFSCFSI
    536891516U,	// EVFSCFUF
    536892402U,	// EVFSCFUI
    24564U,	// EVFSCMPEQ
    26020U,	// EVFSCMPGT
    26098U,	// EVFSCMPLT
    536891488U,	// EVFSCTSF
    536892353U,	// EVFSCTSI
    536899863U,	// EVFSCTSIZ
    536891488U,	// EVFSCTUF
    536892430U,	// EVFSCTUI
    536899863U,	// EVFSCTUIZ
    26513U,	// EVFSDIV
    21892U,	// EVFSMUL
    536895953U,	// EVFSNABS
    536891576U,	// EVFSNEG
    19426U,	// EVFSSUB
    24604U,	// EVFSTSTEQ
    26051U,	// EVFSTSTGT
    26129U,	// EVFSTSTLT
    33574243U,	// EVLDD
    604007615U,	// EVLDDX
    33575119U,	// EVLDH
    604007719U,	// EVLDHX
    33581378U,	// EVLDW
    604008472U,	// EVLDWX
    33580314U,	// EVLHHESPLAT
    604008212U,	// EVLHHESPLATX
    33580339U,	// EVLHHOSSPLAT
    604008239U,	// EVLHHOSSPLATX
    33580353U,	// EVLHHOUSPLAT
    604008254U,	// EVLHHOUSPLATX
    33574712U,	// EVLWHE
    604007690U,	// EVLWHEX
    33579996U,	// EVLWHOS
    604008184U,	// EVLWHOSX
    33580806U,	// EVLWHOU
    604008370U,	// EVLWHOUX
    33580327U,	// EVLWHSPLAT
    604008226U,	// EVLWHSPLATX
    33580367U,	// EVLWWSPLAT
    604008269U,	// EVLWWSPLATX
    21150U,	// EVMERGEHI
    22484U,	// EVMERGEHILO
    22473U,	// EVMERGELO
    21161U,	// EVMERGELOHI
    18401U,	// EVMHEGSMFAA
    22243U,	// EVMHEGSMFAN
    18449U,	// EVMHEGSMIAA
    22291U,	// EVMHEGSMIAN
    18486U,	// EVMHEGUMIAA
    22328U,	// EVMHEGUMIAN
    20416U,	// EVMHESMF
    18534U,	// EVMHESMFA
    26594U,	// EVMHESMFAAW
    27119U,	// EVMHESMFANW
    21222U,	// EVMHESMI
    18625U,	// EVMHESMIA
    26659U,	// EVMHESMIAAW
    27171U,	// EVMHESMIANW
    20519U,	// EVMHESSF
    18577U,	// EVMHESSFA
    26620U,	// EVMHESSFAAW
    27145U,	// EVMHESSFANW
    26791U,	// EVMHESSIAAW
    27249U,	// EVMHESSIANW
    21261U,	// EVMHEUMI
    18668U,	// EVMHEUMIA
    26725U,	// EVMHEUMIAAW
    27210U,	// EVMHEUMIANW
    26857U,	// EVMHEUSIAAW
    27288U,	// EVMHEUSIANW
    18414U,	// EVMHOGSMFAA
    22256U,	// EVMHOGSMFAN
    18462U,	// EVMHOGSMIAA
    22304U,	// EVMHOGSMIAN
    18499U,	// EVMHOGUMIAA
    22341U,	// EVMHOGUMIAN
    20436U,	// EVMHOSMF
    18556U,	// EVMHOSMFA
    26607U,	// EVMHOSMFAAW
    27132U,	// EVMHOSMFANW
    21242U,	// EVMHOSMI
    18647U,	// EVMHOSMIA
    26699U,	// EVMHOSMIAAW
    27197U,	// EVMHOSMIANW
    20539U,	// EVMHOSSF
    18599U,	// EVMHOSSFA
    26633U,	// EVMHOSSFAAW
    27158U,	// EVMHOSSFANW
    26831U,	// EVMHOSSIAAW
    27275U,	// EVMHOSSIANW
    21291U,	// EVMHOUMI
    18701U,	// EVMHOUMIA
    26765U,	// EVMHOUMIAAW
    27236U,	// EVMHOUMIANW
    26897U,	// EVMHOUSIAAW
    27314U,	// EVMHOUSIANW
    536889756U,	// EVMRA
    20426U,	// EVMWHSMF
    18545U,	// EVMWHSMFA
    21232U,	// EVMWHSMI
    18636U,	// EVMWHSMIA
    20529U,	// EVMWHSSF
    18588U,	// EVMWHSSFA
    21271U,	// EVMWHUMI
    18679U,	// EVMWHUMIA
    26686U,	// EVMWLSMIAAW
    27184U,	// EVMWLSMIANW
    26818U,	// EVMWLSSIAAW
    27262U,	// EVMWLSSIANW
    21281U,	// EVMWLUMI
    18690U,	// EVMWLUMIA
    26752U,	// EVMWLUMIAAW
    27223U,	// EVMWLUMIANW
    26884U,	// EVMWLUSIAAW
    27301U,	// EVMWLUSIANW
    20446U,	// EVMWSMF
    18567U,	// EVMWSMFA
    18427U,	// EVMWSMFAA
    22269U,	// EVMWSMFAN
    21252U,	// EVMWSMI
    18658U,	// EVMWSMIA
    18475U,	// EVMWSMIAA
    22317U,	// EVMWSMIAN
    20549U,	// EVMWSSF
    18610U,	// EVMWSSFA
    18438U,	// EVMWSSFAA
    22280U,	// EVMWSSFAN
    21301U,	// EVMWUMI
    18712U,	// EVMWUMIA
    18512U,	// EVMWUMIAA
    22354U,	// EVMWUMIAN
    20007U,	// EVNAND
    536891585U,	// EVNEG
    24880U,	// EVNOR
    24893U,	// EVOR
    19622U,	// EVORC
    27085U,	// EVRLW
    21552U,	// EVRLWI
    536897865U,	// EVRNDW
    2154328489U,	// EVSEL
    27092U,	// EVSLW
    21578U,	// EVSLWI
    151016083U,	// EVSPLATFI
    151016406U,	// EVSPLATI
    25528U,	// EVSRWIS
    26365U,	// EVSRWIU
    25700U,	// EVSRWS
    26441U,	// EVSRWU
    33574259U,	// EVSTDD
    604007623U,	// EVSTDDX
    33575126U,	// EVSTDH
    604007727U,	// EVSTDHX
    33581393U,	// EVSTDW
    604008480U,	// EVSTDWX
    33574720U,	// EVSTWHE
    604007699U,	// EVSTWHEX
    33576896U,	// EVSTWHO
    604007881U,	// EVSTWHOX
    33574812U,	// EVSTWWE
    604007709U,	// EVSTWWEX
    33577049U,	// EVSTWWO
    604007891U,	// EVSTWWOX
    536897584U,	// EVSUBFSMIAAW
    536897716U,	// EVSUBFSSIAAW
    536897650U,	// EVSUBFUMIAAW
    536897782U,	// EVSUBFUSIAAW
    26986U,	// EVSUBFW
    167799155U,	// EVSUBIFW
    24924U,	// EVXOR
    536890182U,	// EXTSB
    536890182U,	// EXTSB8
    536890182U,	// EXTSB8_32_64
    536887609U,	// EXTSB8o
    536887609U,	// EXTSBo
    536891747U,	// EXTSH
    536891747U,	// EXTSH8
    536891747U,	// EXTSH8_32_64
    536888059U,	// EXTSH8o
    536888059U,	// EXTSHo
    536898355U,	// EXTSW
    21188U,	// EXTSWSLI
    21188U,	// EXTSWSLI_32_64
    17292U,	// EXTSWSLI_32_64o
    17292U,	// EXTSWSLIo
    536898355U,	// EXTSW_32
    536898355U,	// EXTSW_32_64
    536888978U,	// EXTSW_32_64o
    536888978U,	// EXTSWo
    15467U,	// EnforceIEIO
    536895920U,	// FABSD
    536888644U,	// FABSDo
    536895920U,	// FABSS
    536888644U,	// FABSSo
    19721U,	// FADD
    25163U,	// FADDS
    17781U,	// FADDSo
    16866U,	// FADDo
    0U,	// FADDrtz
    536890790U,	// FCFID
    536896157U,	// FCFIDS
    536888720U,	// FCFIDSo
    536897219U,	// FCFIDU
    536896542U,	// FCFIDUS
    536888787U,	// FCFIDUSo
    536888831U,	// FCFIDUo
    536887810U,	// FCFIDo
    26383U,	// FCMPUD
    26383U,	// FCMPUS
    22378U,	// FCPSGND
    17480U,	// FCPSGNDo
    22378U,	// FCPSGNS
    17480U,	// FCPSGNSo
    536890809U,	// FCTID
    536897229U,	// FCTIDU
    536899902U,	// FCTIDUZ
    536889118U,	// FCTIDUZo
    536888840U,	// FCTIDUo
    536899755U,	// FCTIDZ
    536889084U,	// FCTIDZo
    536887818U,	// FCTIDo
    536897959U,	// FCTIW
    536897345U,	// FCTIWU
    536899913U,	// FCTIWUZ
    536889128U,	// FCTIWUZo
    536888884U,	// FCTIWUo
    536899924U,	// FCTIWZ
    536889138U,	// FCTIWZo
    536888939U,	// FCTIWo
    26499U,	// FDIV
    25693U,	// FDIVS
    17885U,	// FDIVSo
    17989U,	// FDIVo
    19729U,	// FMADD
    25172U,	// FMADDS
    17789U,	// FMADDSo
    16873U,	// FMADDo
    536895734U,	// FMR
    536888612U,	// FMRo
    19401U,	// FMSUB
    25142U,	// FMSUBS
    17755U,	// FMSUBSo
    16723U,	// FMSUBo
    21878U,	// FMUL
    25547U,	// FMULS
    17850U,	// FMULSo
    17418U,	// FMULo
    536895937U,	// FNABSD
    536888651U,	// FNABSDo
    536895937U,	// FNABSS
    536888651U,	// FNABSSo
    536891562U,	// FNEGD
    536888031U,	// FNEGDo
    536891562U,	// FNEGS
    536888031U,	// FNEGSo
    19738U,	// FNMADD
    25182U,	// FNMADDS
    17798U,	// FNMADDSo
    16881U,	// FNMADDo
    19410U,	// FNMSUB
    25152U,	// FNMSUBS
    17764U,	// FNMSUBSo
    16731U,	// FNMSUBo
    536891247U,	// FRE
    536896257U,	// FRES
    536888729U,	// FRESo
    536887967U,	// FREo
    536893009U,	// FRIMD
    536888348U,	// FRIMDo
    536893009U,	// FRIMS
    536888348U,	// FRIMSo
    536893307U,	// FRIND
    536888422U,	// FRINDo
    536893307U,	// FRINS
    536888422U,	// FRINSo
    536894579U,	// FRIPD
    536888517U,	// FRIPDo
    536894579U,	// FRIPS
    536888517U,	// FRIPSo
    536899837U,	// FRIZD
    536889102U,	// FRIZDo
    536899837U,	// FRIZS
    536889102U,	// FRIZSo
    536895280U,	// FRSP
    536888548U,	// FRSPo
    536891262U,	// FRSQRTE
    536896265U,	// FRSQRTES
    536888736U,	// FRSQRTESo
    536887973U,	// FRSQRTEo
    21793U,	// FSELD
    17411U,	// FSELDo
    21793U,	// FSELS
    17411U,	// FSELSo
    536897052U,	// FSQRT
    536896532U,	// FSQRTS
    536888770U,	// FSQRTSo
    536888814U,	// FSQRTo
    19393U,	// FSUB
    25133U,	// FSUBS
    17747U,	// FSUBSo
    16716U,	// FSUBo
    26522U,	// FTDIV
    536897059U,	// FTSQRT
    15029U,	// GETtlsADDR
    13330U,	// GETtlsADDR32
    15015U,	// GETtlsldADDR
    13315U,	// GETtlsldADDR32
    15364U,	// HRFID
    561668U,	// ICBI
    564104U,	// ICBIEP
    216195U,	// ICBLC
    214263U,	// ICBLQ
    222574U,	// ICBT
    222145U,	// ICBTLS
    536891927U,	// ICCCI
    21799U,	// ISEL
    21799U,	// ISEL8
    15337U,	// ISYNC
    184568195U,	// LA
    604008005U,	// LBARX
    2751491653U,	// LBARXL
    604007901U,	// LBEPX
    33583252U,	// LBZ
    33583252U,	// LBZ8
    28029U,	// LBZCIX
    201353056U,	// LBZU
    201353056U,	// LBZU8
    218132459U,	// LBZUX
    218132459U,	// LBZUX8
    604008538U,	// LBZX
    604008538U,	// LBZX8
    28762U,	// LBZXTLS
    28762U,	// LBZXTLS_
    28762U,	// LBZXTLS_32
    33574349U,	// LD
    604008012U,	// LDARX
    2751491660U,	// LDARXL
    25869U,	// LDAT
    604008033U,	// LDBRX
    27998U,	// LDCIX
    604007868U,	// LDMX
    201352917U,	// LDU
    218132375U,	// LDUX
    604007654U,	// LDX
    27878U,	// LDXTLS
    27878U,	// LDXTLS_
    14924U,	// LDgotTprelL
    13212U,	// LDgotTprelL32
    15349U,	// LDtoc
    15188U,	// LDtocBA
    15188U,	// LDtocCPT
    14862U,	// LDtocJTI
    14882U,	// LDtocL
    33574275U,	// LFD
    604007916U,	// LFDEPX
    201352867U,	// LFDU
    218132358U,	// LFDUX
    604007634U,	// LFDX
    604007543U,	// LFIWAX
    604008561U,	// LFIWZX
    33579809U,	// LFS
    201352982U,	// LFSU
    218132435U,	// LFSUX
    604008159U,	// LFSX
    33573052U,	// LHA
    33573052U,	// LHA8
    604008019U,	// LHARX
    2751491667U,	// LHARXL
    201352855U,	// LHAU
    201352855U,	// LHAU8
    218132314U,	// LHAUX
    218132314U,	// LHAUX8
    604007526U,	// LHAX
    604007526U,	// LHAX8
    604008048U,	// LHBRX
    604008048U,	// LHBRX8
    604007933U,	// LHEPX
    33583316U,	// LHZ
    33583316U,	// LHZ8
    28037U,	// LHZCIX
    201353062U,	// LHZU
    201353062U,	// LHZU8
    218132466U,	// LHZUX
    218132466U,	// LHZUX8
    604008553U,	// LHZX
    604008553U,	// LHZX8
    28777U,	// LHZXTLS
    28777U,	// LHZXTLS_
    28777U,	// LHZXTLS_32
    50352825U,	// LI
    50352825U,	// LI8
    50357164U,	// LIS
    50357164U,	// LIS8
    33581531U,	// LMW
    21633U,	// LSWI
    604007566U,	// LVEBX
    604007736U,	// LVEHX
    604008489U,	// LVEWX
    604001638U,	// LVSL
    604004747U,	// LVSR
    604008448U,	// LVX
    604001699U,	// LVXL
    33573283U,	// LWA
    604008026U,	// LWARX
    2751491674U,	// LWARXL
    25947U,	// LWAT
    218132321U,	// LWAUX
    604007560U,	// LWAX
    604007560U,	// LWAX_32
    33573283U,	// LWA_32
    604008073U,	// LWBRX
    604008073U,	// LWBRX8
    604007948U,	// LWEPX
    33583452U,	// LWZ
    33583452U,	// LWZ8
    28045U,	// LWZCIX
    201353068U,	// LWZU
    201353068U,	// LWZU8
    218132473U,	// LWZUX
    218132473U,	// LWZUX8
    604008578U,	// LWZX
    604008578U,	// LWZX8
    28802U,	// LWZXTLS
    28802U,	// LWZXTLS_
    28802U,	// LWZXTLS_32
    15356U,	// LWZtoc
    33574531U,	// LXSD
    604007669U,	// LXSDX
    604008529U,	// LXSIBZX
    604008544U,	// LXSIHZX
    604007551U,	// LXSIWAX
    604008569U,	// LXSIWZX
    33578832U,	// LXSSP
    604007988U,	// LXSSPX
    33580995U,	// LXV
    604007490U,	// LXVB16X
    604007456U,	// LXVD2X
    604008142U,	// LXVDSX
    604007509U,	// LXVH8X
    21910U,	// LXVL
    21825U,	// LXVLL
    604007473U,	// LXVW4X
    604008204U,	// LXVWSX
    604008459U,	// LXVX
    19861U,	// MADDHD
    26288U,	// MADDHDU
    19921U,	// MADDLD
    19921U,	// MADDLD8
    712854U,	// MBAR
    536891367U,	// MCRF
    536896294U,	// MCRFS
    552620U,	// MCRXRX
    234901251U,	// MFBHRBE
    549041U,	// MFCR
    549041U,	// MFCR8
    549272U,	// MFCTR
    549272U,	// MFCTR8
    536895644U,	// MFDCR
    549659U,	// MFFS
    536893366U,	// MFFSCDRN
    251679578U,	// MFFSCDRNI
    544524U,	// MFFSCE
    536893357U,	// MFFSCRN
    268456784U,	// MFFSCRNI
    546143U,	// MFFSL
    542123U,	// MFFSo
    549096U,	// MFLR
    549096U,	// MFLR8
    549239U,	// MFMSR
    285233133U,	// MFOCRF
    285233133U,	// MFOCRF8
    536895739U,	// MFPMR
    536895843U,	// MFSPR
    536895843U,	// MFSPR8
    302014833U,	// MFSR
    536893313U,	// MFSRIN
    536890203U,	// MFTB
    7364963U,	// MFTB8
    536890962U,	// MFVRD
    7889251U,	// MFVRSAVE
    7889251U,	// MFVRSAVEv
    549055U,	// MFVSCR
    536890962U,	// MFVSRD
    536890855U,	// MFVSRLD
    536899937U,	// MFVSRWZ
    20066U,	// MODSD
    27354U,	// MODSW
    20148U,	// MODUD
    27529U,	// MODUW
    15329U,	// MSGSYNC
    15343U,	// MSYNC
    536891389U,	// MTCRF
    536891389U,	// MTCRF8
    549279U,	// MTCTR
    549279U,	// MTCTR8
    549279U,	// MTCTR8loop
    549279U,	// MTCTRloop
    654516394U,	// MTDCR
    706363U,	// MTFSB0
    706371U,	// MTFSB1
    20512U,	// MTFSF
    21131U,	// MTFSFI
    17283U,	// MTFSFIo
    536891424U,	// MTFSFb
    17111U,	// MTFSFo
    549102U,	// MTLR
    549102U,	// MTLR8
    536895870U,	// MTMSR
    536890954U,	// MTMSRD
    233461U,	// MTOCRF
    233461U,	// MTOCRF8
    536895746U,	// MTPMR
    536895850U,	// MTSPR
    536895850U,	// MTSPR8
    254341U,	// MTSR
    536893321U,	// MTSRIN
    540892U,	// MTVRSAVE
    721116U,	// MTVRSAVEv
    549063U,	// MTVSCR
    536890970U,	// MTVSRD
    19818U,	// MTVSRDD
    536889768U,	// MTVSRWA
    536896620U,	// MTVSRWS
    536899946U,	// MTVSRWZ
    19869U,	// MULHD
    26297U,	// MULHDU
    17910U,	// MULHDUo
    16890U,	// MULHDo
    27029U,	// MULHW
    26423U,	// MULHWU
    17963U,	// MULHWUo
    18019U,	// MULHWo
    19929U,	// MULLD
    16914U,	// MULLDo
    21181U,	// MULLI
    21181U,	// MULLI8
    27071U,	// MULLW
    18035U,	// MULLWo
    15053U,	// MoveGOTtoLR
    15041U,	// MovePCtoLR
    14376U,	// MovePCtoLR8
    19993U,	// NAND
    19993U,	// NAND8
    16928U,	// NAND8o
    16928U,	// NANDo
    15473U,	// NAP
    536891555U,	// NEG
    536891555U,	// NEG8
    536888032U,	// NEG8o
    536888032U,	// NEGo
    15482U,	// NOP
    12914U,	// NOP_GT_PWR6
    12926U,	// NOP_GT_PWR7
    24868U,	// NOR
    24868U,	// NOR8
    17706U,	// NOR8o
    17706U,	// NORo
    24861U,	// OR
    24861U,	// OR8
    17707U,	// OR8o
    19610U,	// ORC
    19610U,	// ORC8
    16842U,	// ORC8o
    16842U,	// ORCo
    21390U,	// ORI
    21390U,	// ORI8
    25522U,	// ORIS
    25522U,	// ORIS8
    17707U,	// ORo
    536890218U,	// POPCNTB
    536891036U,	// POPCNTD
    536898388U,	// POPCNTW
    15165U,	// PPC32GOT
    15175U,	// PPC32PICGOT
    21318U,	// QVALIGNI
    21318U,	// QVALIGNIb
    21318U,	// QVALIGNIs
    21451U,	// QVESPLATI
    21451U,	// QVESPLATIb
    21451U,	// QVESPLATIs
    536895918U,	// QVFABS
    536895918U,	// QVFABSs
    19719U,	// QVFADD
    25161U,	// QVFADDS
    25161U,	// QVFADDSs
    536890788U,	// QVFCFID
    536896155U,	// QVFCFIDS
    536897217U,	// QVFCFIDU
    536896540U,	// QVFCFIDUS
    536890788U,	// QVFCFIDb
    24544U,	// QVFCMPEQ
    24544U,	// QVFCMPEQb
    24544U,	// QVFCMPEQbs
    26000U,	// QVFCMPGT
    26000U,	// QVFCMPGTb
    26000U,	// QVFCMPGTbs
    26078U,	// QVFCMPLT
    26078U,	// QVFCMPLTb
    26078U,	// QVFCMPLTbs
    22376U,	// QVFCPSGN
    22376U,	// QVFCPSGNs
    536890807U,	// QVFCTID
    536897227U,	// QVFCTIDU
    536899900U,	// QVFCTIDUZ
    536899753U,	// QVFCTIDZ
    536890807U,	// QVFCTIDb
    536897957U,	// QVFCTIW
    536897343U,	// QVFCTIWU
    536899911U,	// QVFCTIWUZ
    536899922U,	// QVFCTIWZ
    21747U,	// QVFLOGICAL
    21747U,	// QVFLOGICALb
    21747U,	// QVFLOGICALs
    19727U,	// QVFMADD
    25170U,	// QVFMADDS
    25170U,	// QVFMADDSs
    536895732U,	// QVFMR
    536895732U,	// QVFMRb
    536895732U,	// QVFMRs
    19399U,	// QVFMSUB
    25140U,	// QVFMSUBS
    25140U,	// QVFMSUBSs
    21876U,	// QVFMUL
    25545U,	// QVFMULS
    25545U,	// QVFMULSs
    536895935U,	// QVFNABS
    536895935U,	// QVFNABSs
    536891560U,	// QVFNEG
    536891560U,	// QVFNEGs
    19736U,	// QVFNMADD
    25180U,	// QVFNMADDS
    25180U,	// QVFNMADDSs
    19408U,	// QVFNMSUB
    25150U,	// QVFNMSUBS
    25150U,	// QVFNMSUBSs
    22165U,	// QVFPERM
    22165U,	// QVFPERMs
    536891245U,	// QVFRE
    536896255U,	// QVFRES
    536896255U,	// QVFRESs
    536893007U,	// QVFRIM
    536893007U,	// QVFRIMs
    536893305U,	// QVFRIN
    536893305U,	// QVFRINs
    536894577U,	// QVFRIP
    536894577U,	// QVFRIPs
    536899835U,	// QVFRIZ
    536899835U,	// QVFRIZs
    536895278U,	// QVFRSP
    536895278U,	// QVFRSPs
    536891260U,	// QVFRSQRTE
    536896263U,	// QVFRSQRTES
    536896263U,	// QVFRSQRTESs
    21791U,	// QVFSEL
    21791U,	// QVFSELb
    21791U,	// QVFSELbb
    21791U,	// QVFSELbs
    19391U,	// QVFSUB
    25131U,	// QVFSUBS
    25131U,	// QVFSUBSs
    22365U,	// QVFTSTNAN
    22365U,	// QVFTSTNANb
    22365U,	// QVFTSTNANbs
    19773U,	// QVFXMADD
    25220U,	// QVFXMADDS
    21901U,	// QVFXMUL
    25554U,	// QVFXMULS
    19746U,	// QVFXXCPNMADD
    25191U,	// QVFXXCPNMADDS
    19783U,	// QVFXXMADD
    25231U,	// QVFXXMADDS
    19760U,	// QVFXXNPMADD
    25206U,	// QVFXXNPMADDS
    318788126U,	// QVGPCI
    604008303U,	// QVLFCDUX
    603998732U,	// QVLFCDUXA
    604007596U,	// QVLFCDX
    603998652U,	// QVLFCDXA
    604008380U,	// QVLFCSUX
    603998776U,	// QVLFCSUXA
    604008123U,	// QVLFCSX
    603998692U,	// QVLFCSXA
    604008123U,	// QVLFCSXs
    218132356U,	// QVLFDUX
    603998755U,	// QVLFDUXA
    604007632U,	// QVLFDX
    603998673U,	// QVLFDXA
    604007632U,	// QVLFDXb
    604007541U,	// QVLFIWAX
    603998641U,	// QVLFIWAXA
    604008559U,	// QVLFIWZX
    603998831U,	// QVLFIWZXA
    218132433U,	// QVLFSUX
    603998799U,	// QVLFSUXA
    604008157U,	// QVLFSX
    603998713U,	// QVLFSXA
    604008157U,	// QVLFSXb
    604008157U,	// QVLFSXs
    604007649U,	// QVLPCLDX
    604008174U,	// QVLPCLSX
    8417006U,	// QVLPCLSXint
    604007659U,	// QVLPCRDX
    604008194U,	// QVLPCRSX
    604008313U,	// QVSTFCDUX
    603998743U,	// QVSTFCDUXA
    604001469U,	// QVSTFCDUXI
    603998544U,	// QVSTFCDUXIA
    604007605U,	// QVSTFCDX
    603998662U,	// QVSTFCDXA
    604001427U,	// QVSTFCDXI
    603998498U,	// QVSTFCDXIA
    604008390U,	// QVSTFCSUX
    603998787U,	// QVSTFCSUXA
    604001492U,	// QVSTFCSUXI
    603998569U,	// QVSTFCSUXIA
    604008132U,	// QVSTFCSX
    603998702U,	// QVSTFCSXA
    604001448U,	// QVSTFCSXI
    603998521U,	// QVSTFCSXIA
    604008132U,	// QVSTFCSXs
    218312589U,	// QVSTFDUX
    603998765U,	// QVSTFDUXA
    604001481U,	// QVSTFDUXI
    603998557U,	// QVSTFDUXIA
    604007640U,	// QVSTFDX
    603998682U,	// QVSTFDXA
    604001438U,	// QVSTFDXI
    603998510U,	// QVSTFDXIA
    604007640U,	// QVSTFDXb
    604008504U,	// QVSTFIWX
    603998820U,	// QVSTFIWXA
    218312666U,	// QVSTFSUX
    603998809U,	// QVSTFSUXA
    604001504U,	// QVSTFSUXI
    603998582U,	// QVSTFSUXIA
    218312666U,	// QVSTFSUXs
    604008165U,	// QVSTFSX
    603998722U,	// QVSTFSXA
    604001459U,	// QVSTFSXI
    603998533U,	// QVSTFSXIA
    604008165U,	// QVSTFSXs
    14961U,	// RESTORE_CR
    15105U,	// RESTORE_CRBIT
    14832U,	// RESTORE_VRSAVE
    15391U,	// RFCI
    15402U,	// RFDI
    264846U,	// RFEBB
    15407U,	// RFI
    15365U,	// RFID
    15396U,	// RFMCI
    21768U,	// RLDCL
    17394U,	// RLDCLo
    24739U,	// RLDCR
    17683U,	// RLDCRo
    19545U,	// RLDIC
    21775U,	// RLDICL
    21775U,	// RLDICL_32
    21775U,	// RLDICL_32_64
    17402U,	// RLDICL_32o
    17402U,	// RLDICLo
    24759U,	// RLDICR
    24759U,	// RLDICR_32
    17691U,	// RLDICRo
    16811U,	// RLDICo
    3355464406U,	// RLDIMI
    3355460503U,	// RLDIMIo
    3892335326U,	// RLWIMI
    3892335326U,	// RLWIMI8
    3892331424U,	// RLWIMI8o
    3892331424U,	// RLWIMIo
    22111U,	// RLWINM
    22111U,	// RLWINM8
    17443U,	// RLWINM8o
    17443U,	// RLWINMo
    22120U,	// RLWNM
    22120U,	// RLWNM8
    17452U,	// RLWNM8o
    17452U,	// RLWNMo
    14527U,	// ReadTB
    543917U,	// SC
    13829U,	// SELECT_CC_F16
    13751U,	// SELECT_CC_F4
    14105U,	// SELECT_CC_F8
    13776U,	// SELECT_CC_I4
    14150U,	// SELECT_CC_I8
    14545U,	// SELECT_CC_QBRC
    14574U,	// SELECT_CC_QFRC
    14663U,	// SELECT_CC_QSRC
    14795U,	// SELECT_CC_SPE
    13722U,	// SELECT_CC_SPE4
    14634U,	// SELECT_CC_VRRC
    14603U,	// SELECT_CC_VSFRC
    14723U,	// SELECT_CC_VSRC
    14692U,	// SELECT_CC_VSSRC
    13844U,	// SELECT_F16
    13765U,	// SELECT_F4
    14119U,	// SELECT_F8
    13790U,	// SELECT_I4
    14324U,	// SELECT_I8
    14561U,	// SELECT_QBRC
    14590U,	// SELECT_QFRC
    14679U,	// SELECT_QSRC
    14810U,	// SELECT_SPE
    13738U,	// SELECT_SPE4
    14650U,	// SELECT_VRRC
    14620U,	// SELECT_VSFRC
    14739U,	// SELECT_VSRC
    14709U,	// SELECT_VSSRC
    536890197U,	// SETB
    536890197U,	// SETB8
    14780U,	// SETRND
    15382U,	// SETRNDi
    536887933U,	// SLBFEEo
    15285U,	// SLBIA
    544585U,	// SLBIE
    536891544U,	// SLBIEG
    536891169U,	// SLBMFEE
    536897394U,	// SLBMFEV
    536891252U,	// SLBMTE
    15313U,	// SLBSYNC
    19959U,	// SLD
    16922U,	// SLDo
    27094U,	// SLW
    27094U,	// SLW8
    18043U,	// SLW8o
    18043U,	// SLWo
    33583452U,	// SPELWZ
    604008578U,	// SPELWZX
    33581938U,	// SPESTW
    604008523U,	// SPESTWX
    14973U,	// SPILL_CR
    15120U,	// SPILL_CRBIT
    14848U,	// SPILL_VRSAVE
    19689U,	// SRAD
    21030U,	// SRADI
    21030U,	// SRADI_32
    17212U,	// SRADIo
    16859U,	// SRADo
    26923U,	// SRAW
    21528U,	// SRAWI
    17321U,	// SRAWIo
    18002U,	// SRAWo
    20045U,	// SRD
    16942U,	// SRDo
    27349U,	// SRW
    27349U,	// SRW8
    18049U,	// SRW8o
    18049U,	// SRWo
    33573757U,	// STB
    33573757U,	// STB8
    27990U,	// STBCIX
    603997908U,	// STBCX
    604007908U,	// STBEPX
    201533085U,	// STBU
    201533085U,	// STBU8
    218312552U,	// STBUX
    218312552U,	// STBUX8
    604007590U,	// STBX
    604007590U,	// STBX8
    27814U,	// STBXTLS
    27814U,	// STBXTLS_
    27814U,	// STBXTLS_32
    33574575U,	// STD
    25875U,	// STDAT
    604008040U,	// STDBRX
    28005U,	// STDCIX
    603997916U,	// STDCX
    201533146U,	// STDU
    218312605U,	// STDUX
    604007684U,	// STDX
    27908U,	// STDXTLS
    27908U,	// STDXTLS_
    33574280U,	// STFD
    604007924U,	// STFDEPX
    201533097U,	// STFDU
    218312591U,	// STFDUX
    604007642U,	// STFDX
    604008506U,	// STFIWX
    33579821U,	// STFS
    201533212U,	// STFSU
    218312668U,	// STFSUX
    604008167U,	// STFSX
    33575310U,	// STH
    33575310U,	// STH8
    604008055U,	// STHBRX
    28013U,	// STHCIX
    603997924U,	// STHCX
    604007940U,	// STHEPX
    201533175U,	// STHU
    201533175U,	// STHU8
    218312619U,	// STHUX
    218312619U,	// STHUX8
    604007760U,	// STHX
    604007760U,	// STHX8
    27984U,	// STHXTLS
    27984U,	// STHXTLS_
    27984U,	// STHXTLS_32
    33581536U,	// STMW
    15486U,	// STOP
    21639U,	// STSWI
    604007573U,	// STVEBX
    604007743U,	// STVEHX
    604008496U,	// STVEWX
    604008453U,	// STVX
    604001705U,	// STVXL
    33581938U,	// STW
    33581938U,	// STW8
    25953U,	// STWAT
    604008080U,	// STWBRX
    28021U,	// STWCIX
    603997932U,	// STWCX
    604007955U,	// STWEPX
    201533265U,	// STWU
    201533265U,	// STWU8
    218312676U,	// STWUX
    218312676U,	// STWUX8
    604008523U,	// STWX
    604008523U,	// STWX8
    28747U,	// STWXTLS
    28747U,	// STWXTLS_
    28747U,	// STWXTLS_32
    33574537U,	// STXSD
    604007676U,	// STXSDX
    604007581U,	// STXSIBX
    604007581U,	// STXSIBXv
    604007751U,	// STXSIHX
    604007751U,	// STXSIHXv
    604008514U,	// STXSIWX
    33578839U,	// STXSSP
    604007996U,	// STXSSPX
    33581000U,	// STXV
    604007499U,	// STXVB16X
    604007464U,	// STXVD2X
    604007517U,	// STXVH8X
    21916U,	// STXVL
    21832U,	// STXVLL
    604007481U,	// STXVW4X
    604008465U,	// STXVX
    20410U,	// SUBF
    20410U,	// SUBF8
    17104U,	// SUBF8o
    19524U,	// SUBFC
    19524U,	// SUBFC8
    16787U,	// SUBFC8o
    16787U,	// SUBFCo
    20273U,	// SUBFE
    20273U,	// SUBFE8
    17030U,	// SUBFE8o
    17030U,	// SUBFEo
    19552U,	// SUBFIC
    19552U,	// SUBFIC8
    536891230U,	// SUBFME
    536891230U,	// SUBFME8
    536887958U,	// SUBFME8o
    536887958U,	// SUBFMEo
    536891308U,	// SUBFZE
    536891308U,	// SUBFZE8
    536888007U,	// SUBFZE8o
    536888007U,	// SUBFZEo
    17104U,	// SUBFo
    543889U,	// SYNC
    542181U,	// TABORT
    180616U,	// TABORTDC
    181028U,	// TABORTDCI
    180688U,	// TABORTWC
    181040U,	// TABORTWCI
    592523U,	// TAILB
    592523U,	// TAILB8
    608349U,	// TAILBA
    608349U,	// TAILBA8
    15508U,	// TAILBCTR
    15508U,	// TAILBCTR8
    263261U,	// TBEGIN
    15078U,	// TBEGIN_RET
    546027U,	// TCHECK
    15066U,	// TCHECK_RET
    538003412U,	// TCRETURNai
    538003319U,	// TCRETURNai8
    537988303U,	// TCRETURNdi
    537986949U,	// TCRETURNdi8
    537944201U,	// TCRETURNri
    537937811U,	// TCRETURNri8
    183959U,	// TD
    184958U,	// TDI
    262695U,	// TEND
    15291U,	// TLBIA
    661327696U,	// TLBIE
    546071U,	// TLBIEL
    536898668U,	// TLBIVAX
    544202U,	// TLBLD
    545462U,	// TLBLI
    15370U,	// TLBRE
    20326U,	// TLBRE2
    536899252U,	// TLBSX
    28340U,	// TLBSX2
    18164U,	// TLBSX2D
    15321U,	// TLBSYNC
    15376U,	// TLBWE
    20366U,	// TLBWE2
    15477U,	// TRAP
    12904U,	// TRECHKPT
    541713U,	// TRECLAIM
    263486U,	// TSR
    191302U,	// TW
    185486U,	// TWI
    536889249U,	// UPDATE_VRSAVE
    14950U,	// UpdateGBR
    19330U,	// VABSDUB
    20883U,	// VABSDUH
    27536U,	// VABSDUW
    24661U,	// VADDCUQ
    27520U,	// VADDCUW
    24692U,	// VADDECUQ
    22155U,	// VADDEUQM
    23520U,	// VADDFP
    25094U,	// VADDSBS
    25437U,	// VADDSHS
    25736U,	// VADDSWS
    21975U,	// VADDUBM
    25122U,	// VADDUBS
    22003U,	// VADDUDM
    22042U,	// VADDUHM
    25465U,	// VADDUHS
    22136U,	// VADDUQM
    22225U,	// VADDUWM
    25763U,	// VADDUWS
    20023U,	// VAND
    19517U,	// VANDC
    19205U,	// VAVGSB
    20770U,	// VAVGSH
    27370U,	// VAVGSW
    19348U,	// VAVGUB
    20901U,	// VAVGUH
    27554U,	// VAVGUW
    19964U,	// VBPERMD
    24615U,	// VBPERMQ
    134246102U,	// VCFSX
    536899286U,	// VCFSX_0
    134246308U,	// VCFUX
    536899492U,	// VCFUX_0
    24793U,	// VCIPHER
    26181U,	// VCIPHERLAST
    536890387U,	// VCLZB
    536891109U,	// VCLZD
    536891888U,	// VCLZH
    536890005U,	// VCLZLSBB
    536898560U,	// VCLZW
    23484U,	// VCMPBFP
    17562U,	// VCMPBFPo
    23583U,	// VCMPEQFP
    17583U,	// VCMPEQFPo
    19373U,	// VCMPEQUB
    16705U,	// VCMPEQUBo
    20163U,	// VCMPEQUD
    16959U,	// VCMPEQUDo
    20926U,	// VCMPEQUH
    17155U,	// VCMPEQUHo
    27579U,	// VCMPEQUW
    18074U,	// VCMPEQUWo
    23537U,	// VCMPGEFP
    17572U,	// VCMPGEFPo
    23593U,	// VCMPGTFP
    17594U,	// VCMPGTFPo
    19258U,	// VCMPGTSB
    16686U,	// VCMPGTSBo
    20081U,	// VCMPGTSD
    16948U,	// VCMPGTSDo
    20823U,	// VCMPGTSH
    17136U,	// VCMPGTSHo
    27433U,	// VCMPGTSW
    18055U,	// VCMPGTSWo
    19447U,	// VCMPGTUB
    16740U,	// VCMPGTUBo
    20173U,	// VCMPGTUD
    16970U,	// VCMPGTUDo
    20948U,	// VCMPGTUH
    17166U,	// VCMPGTUHo
    27614U,	// VCMPGTUW
    18085U,	// VCMPGTUWo
    19113U,	// VCMPNEB
    16676U,	// VCMPNEBo
    20702U,	// VCMPNEH
    17126U,	// VCMPNEHo
    26977U,	// VCMPNEW
    18009U,	// VCMPNEWo
    19465U,	// VCMPNEZB
    16751U,	// VCMPNEZBo
    20966U,	// VCMPNEZH
    17177U,	// VCMPNEZHo
    27638U,	// VCMPNEZW
    18103U,	// VCMPNEZWo
    134243581U,	// VCTSXS
    536896765U,	// VCTSXS_0
    134243589U,	// VCTUXS
    536896773U,	// VCTUXS_0
    536890394U,	// VCTZB
    536891124U,	// VCTZD
    536891895U,	// VCTZH
    536890015U,	// VCTZLSBB
    536898577U,	// VCTZW
    26551U,	// VEQV
    536894466U,	// VEXPTEFP
    1207979664U,	// VEXTRACTD
    1207978987U,	// VEXTRACTUB
    1207980488U,	// VEXTRACTUH
    1207987141U,	// VEXTRACTUW
    536890545U,	// VEXTSB2D
    536890545U,	// VEXTSB2Ds
    536897486U,	// VEXTSB2W
    536897486U,	// VEXTSB2Ws
    536890555U,	// VEXTSH2D
    536890555U,	// VEXTSH2Ds
    536897496U,	// VEXTSH2W
    536897496U,	// VEXTSH2Ws
    536890565U,	// VEXTSW2D
    536890565U,	// VEXTSW2Ds
    28062U,	// VEXTUBLX
    28287U,	// VEXTUBRX
    28072U,	// VEXTUHLX
    28312U,	// VEXTUHRX
    28082U,	// VEXTUWLX
    28322U,	// VEXTUWRX
    536890607U,	// VGBBD
    335563635U,	// VINSERTB
    1207979685U,	// VINSERTD
    335565188U,	// VINSERTH
    1207987037U,	// VINSERTW
    536894440U,	// VLOGEFP
    23511U,	// VMADDFP
    23603U,	// VMAXFP
    19277U,	// VMAXSB
    20091U,	// VMAXSD
    20842U,	// VMAXSH
    27450U,	// VMAXSW
    19457U,	// VMAXUB
    20183U,	// VMAXUD
    20958U,	// VMAXUH
    27624U,	// VMAXUW
    25414U,	// VMHADDSHS
    25425U,	// VMHRADDSHS
    23575U,	// VMINFP
    19241U,	// VMINSB
    20073U,	// VMINSD
    20806U,	// VMINSH
    27416U,	// VMINSW
    19356U,	// VMINUB
    20155U,	// VMINUD
    20909U,	// VMINUH
    27562U,	// VMINUW
    22031U,	// VMLADDUHM
    26969U,	// VMRGEW
    19122U,	// VMRGHB
    20711U,	// VMRGHH
    27012U,	// VMRGHW
    19140U,	// VMRGLB
    20719U,	// VMRGLH
    27054U,	// VMRGLW
    27327U,	// VMRGOW
    21956U,	// VMSUMMBM
    22012U,	// VMSUMSHM
    25446U,	// VMSUMSHS
    21984U,	// VMSUMUBM
    22051U,	// VMSUMUHM
    25474U,	// VMSUMUHS
    536895553U,	// VMUL10CUQ
    24670U,	// VMUL10ECUQ
    24702U,	// VMUL10EUQ
    536895543U,	// VMUL10UQ
    19196U,	// VMULESB
    20761U,	// VMULESH
    27361U,	// VMULESW
    19339U,	// VMULEUB
    20892U,	// VMULEUH
    27545U,	// VMULEUW
    19249U,	// VMULOSB
    20814U,	// VMULOSH
    27424U,	// VMULOSW
    19364U,	// VMULOUB
    20917U,	// VMULOUH
    27570U,	// VMULOUW
    22234U,	// VMULUWM
    20008U,	// VNAND
    24783U,	// VNCIPHER
    26167U,	// VNCIPHERLAST
    536890766U,	// VNEGD
    536897917U,	// VNEGW
    23493U,	// VNMSUBFP
    24881U,	// VNOR
    24894U,	// VOR
    19623U,	// VORC
    22174U,	// VPERM
    24841U,	// VPERMR
    24907U,	// VPERMXOR
    28196U,	// VPKPX
    25573U,	// VPKSDSS
    25639U,	// VPKSDUS
    25582U,	// VPKSHSS
    25657U,	// VPKSHUS
    25591U,	// VPKSWSS
    25675U,	// VPKSWUS
    22189U,	// VPKUDUM
    25648U,	// VPKUDUS
    22198U,	// VPKUHUM
    25666U,	// VPKUHUS
    22207U,	// VPKUWUM
    25684U,	// VPKUWUS
    19160U,	// VPMSUMB
    19973U,	// VPMSUMD
    20739U,	// VPMSUMH
    27110U,	// VPMSUMW
    536890217U,	// VPOPCNTB
    536891035U,	// VPOPCNTD
    536891770U,	// VPOPCNTH
    536898387U,	// VPOPCNTW
    536890614U,	// VPRTYBD
    536895437U,	// VPRTYBQ
    536897841U,	// VPRTYBW
    536894459U,	// VREFP
    536892973U,	// VRFIM
    536893298U,	// VRFIN
    536894543U,	// VRFIP
    536899801U,	// VRFIZ
    19148U,	// VRLB
    19952U,	// VRLD
    21198U,	// VRLDMI
    22103U,	// VRLDNM
    20727U,	// VRLH
    27086U,	// VRLW
    21310U,	// VRLWMI
    22119U,	// VRLWNM
    536894476U,	// VRSQRTEFP
    536899010U,	// VSBOX
    21805U,	// VSEL
    19676U,	// VSHASIGMAD
    26910U,	// VSHASIGMAW
    21863U,	// VSL
    19154U,	// VSLB
    19958U,	// VSLD
    21349U,	// VSLDOI
    20733U,	// VSLH
    22497U,	// VSLO
    26529U,	// VSLV
    27093U,	// VSLW
    134237025U,	// VSPLTB
    134237025U,	// VSPLTBs
    134238578U,	// VSPLTH
    134238578U,	// VSPLTHs
    151014166U,	// VSPLTISB
    151015731U,	// VSPLTISH
    151022331U,	// VSPLTISW
    134245186U,	// VSPLTW
    24972U,	// VSR
    19079U,	// VSRAB
    19688U,	// VSRAD
    20680U,	// VSRAH
    26922U,	// VSRAW
    19190U,	// VSRB
    20052U,	// VSRD
    20755U,	// VSRH
    22611U,	// VSRO
    26557U,	// VSRV
    27348U,	// VSRW
    24652U,	// VSUBCUQ
    27511U,	// VSUBCUW
    24682U,	// VSUBECUQ
    22145U,	// VSUBEUQM
    23503U,	// VSUBFP
    25085U,	// VSUBSBS
    25405U,	// VSUBSHS
    25727U,	// VSUBSWS
    21966U,	// VSUBUBM
    25113U,	// VSUBUBS
    21994U,	// VSUBUDM
    22022U,	// VSUBUHM
    25456U,	// VSUBUHS
    22127U,	// VSUBUQM
    22216U,	// VSUBUWM
    25754U,	// VSUBUWS
    25717U,	// VSUM2SWS
    25075U,	// VSUM4SBS
    25395U,	// VSUM4SHS
    25103U,	// VSUM4UBS
    25745U,	// VSUMSWS
    536899099U,	// VUPKHPX
    536890125U,	// VUPKHSB
    536891690U,	// VUPKHSH
    536898290U,	// VUPKHSW
    536899115U,	// VUPKLPX
    536890144U,	// VUPKLSB
    536891709U,	// VUPKLSH
    536898309U,	// VUPKLSW
    24925U,	// VXOR
    117465437U,	// V_SET0
    117465437U,	// V_SET0B
    117465437U,	// V_SET0H
    8940283U,	// V_SETALLONES
    8940283U,	// V_SETALLONESB
    8940283U,	// V_SETALLONESH
    550350U,	// WAIT
    544554U,	// WRTEE
    545411U,	// WRTEEI
    24902U,	// XOR
    24902U,	// XOR8
    17712U,	// XOR8o
    21389U,	// XORI
    21389U,	// XORI8
    25521U,	// XORIS
    25521U,	// XORIS8
    17712U,	// XORo
    536894166U,	// XSABSDP
    536894785U,	// XSABSQP
    22778U,	// XSADDDP
    23743U,	// XSADDQP
    22570U,	// XSADDQPO
    24043U,	// XSADDSP
    23212U,	// XSCMPEQDP
    23180U,	// XSCMPEXPDP
    23841U,	// XSCMPEXPQP
    22840U,	// XSCMPGEDP
    23272U,	// XSCMPGTDP
    23110U,	// XSCMPODP
    23811U,	// XSCMPOQP
    23336U,	// XSCMPUDP
    23892U,	// XSCMPUQP
    23070U,	// XSCPSGNDP
    23800U,	// XSCPSGNQP
    536894523U,	// XSCVDPHP
    536894733U,	// XSCVDPQP
    536895217U,	// XSCVDPSP
    536893340U,	// XSCVDPSPN
    536896183U,	// XSCVDPSXDS
    536896183U,	// XSCVDPSXDSs
    536896693U,	// XSCVDPSXWS
    536896693U,	// XSCVDPSXWSs
    536896219U,	// XSCVDPUXDS
    536896219U,	// XSCVDPUXDSs
    536896729U,	// XSCVDPUXWS
    536896729U,	// XSCVDPUXWSs
    536894032U,	// XSCVHPDP
    536894042U,	// XSCVQPDP
    536893415U,	// XSCVQPDPO
    536899774U,	// XSCVQPSDZ
    536899955U,	// XSCVQPSWZ
    536899785U,	// XSCVQPUDZ
    536899966U,	// XSCVQPUWZ
    536894664U,	// XSCVSDQP
    536894052U,	// XSCVSPDP
    536893329U,	// XSCVSPDPN
    536893708U,	// XSCVSXDDP
    536894973U,	// XSCVSXDSP
    536894674U,	// XSCVUDQP
    536893730U,	// XSCVUXDDP
    536894995U,	// XSCVUXDSP
    23346U,	// XSDIVDP
    23902U,	// XSDIVQP
    22601U,	// XSDIVQPO
    24457U,	// XSDIVSP
    23160U,	// XSIEXPDP
    23831U,	// XSIEXPQP
    1744853160U,	// XSMADDADP
    1744854445U,	// XSMADDASP
    1744853512U,	// XSMADDMDP
    1744854727U,	// XSMADDMSP
    1744854197U,	// XSMADDQP
    1744853023U,	// XSMADDQPO
    22768U,	// XSMAXCDP
    23406U,	// XSMAXDP
    22950U,	// XSMAXJDP
    22758U,	// XSMINCDP
    23092U,	// XSMINDP
    22940U,	// XSMINJDP
    1744853114U,	// XSMSUBADP
    1744854399U,	// XSMSUBASP
    1744853466U,	// XSMSUBMDP
    1744854681U,	// XSMSUBMSP
    1744854156U,	// XSMSUBQP
    1744852990U,	// XSMSUBQPO
    22960U,	// XSMULDP
    23791U,	// XSMULQP
    22580U,	// XSMULQPO
    24175U,	// XSMULSP
    536894146U,	// XSNABSDP
    536894775U,	// XSNABSQP
    536893814U,	// XSNEGDP
    536894684U,	// XSNEGQP
    1744853136U,	// XSNMADDADP
    1744854421U,	// XSNMADDASP
    1744853488U,	// XSNMADDMDP
    1744854703U,	// XSNMADDMSP
    1744854186U,	// XSNMADDQP
    1744853011U,	// XSNMADDQPO
    1744853090U,	// XSNMSUBADP
    1744854375U,	// XSNMSUBASP
    1744853442U,	// XSNMSUBMDP
    1744854657U,	// XSNMSUBMSP
    1744854145U,	// XSNMSUBQP
    1744852978U,	// XSNMSUBQPO
    536892269U,	// XSRDPI
    536890472U,	// XSRDPIC
    536892980U,	// XSRDPIM
    536894550U,	// XSRDPIP
    536899808U,	// XSRDPIZ
    536893774U,	// XSREDP
    536895028U,	// XSRESP
    283517U,	// XSRQPI
    290197U,	// XSRQPIX
    286660U,	// XSRQPXP
    536895286U,	// XSRSP
    536893790U,	// XSRSQRTEDP
    536895044U,	// XSRSQRTESP
    536894206U,	// XSSQRTDP
    536894794U,	// XSSQRTQP
    536893502U,	// XSSQRTQPO
    536895338U,	// XSSQRTSP
    22718U,	// XSSUBDP
    23702U,	// XSSUBQP
    22537U,	// XSSUBQPO
    24003U,	// XSSUBSP
    23355U,	// XSTDIVDP
    536894216U,	// XSTSQRTDP
    2281724112U,	// XSTSTDCDP
    2281725087U,	// XSTSTDCQP
    2281725397U,	// XSTSTDCSP
    536894104U,	// XSXEXPDP
    536894765U,	// XSXEXPQP
    536893832U,	// XSXSIGDP
    536894693U,	// XSXSIGQP
    536894175U,	// XVABSDP
    536895303U,	// XVABSSP
    22787U,	// XVADDDP
    24052U,	// XVADDSP
    23223U,	// XVCMPEQDP
    17538U,	// XVCMPEQDPo
    24355U,	// XVCMPEQSP
    17624U,	// XVCMPEQSPo
    22851U,	// XVCMPGEDP
    17526U,	// XVCMPGEDPo
    24105U,	// XVCMPGESP
    17612U,	// XVCMPGESPo
    23283U,	// XVCMPGTDP
    17550U,	// XVCMPGTDPo
    24415U,	// XVCMPGTSP
    17643U,	// XVCMPGTSPo
    23081U,	// XVCPSGNDP
    24285U,	// XVCPSGNSP
    536895227U,	// XVCVDPSP
    536896195U,	// XVCVDPSXDS
    536896705U,	// XVCVDPSXWS
    536896231U,	// XVCVDPUXDS
    536896741U,	// XVCVDPUXWS
    536895237U,	// XVCVHPSP
    536894062U,	// XVCVSPDP
    536894533U,	// XVCVSPHP
    536896207U,	// XVCVSPSXDS
    536896717U,	// XVCVSPSXWS
    536896243U,	// XVCVSPUXDS
    536896753U,	// XVCVSPUXWS
    536893719U,	// XVCVSXDDP
    536894984U,	// XVCVSXDSP
    536894296U,	// XVCVSXWDP
    536895397U,	// XVCVSXWSP
    536893741U,	// XVCVUXDDP
    536895006U,	// XVCVUXDSP
    536894307U,	// XVCVUXWDP
    536895408U,	// XVCVUXWSP
    23375U,	// XVDIVDP
    24476U,	// XVDIVSP
    23170U,	// XVIEXPDP
    24335U,	// XVIEXPSP
    1744853171U,	// XVMADDADP
    1744854456U,	// XVMADDASP
    1744853523U,	// XVMADDMDP
    1744854738U,	// XVMADDMSP
    23415U,	// XVMAXDP
    24507U,	// XVMAXSP
    23101U,	// XVMINDP
    24296U,	// XVMINSP
    1744853125U,	// XVMSUBADP
    1744854410U,	// XVMSUBASP
    1744853477U,	// XVMSUBMDP
    1744854692U,	// XVMSUBMSP
    22969U,	// XVMULDP
    24184U,	// XVMULSP
    536894156U,	// XVNABSDP
    536895293U,	// XVNABSSP
    536893823U,	// XVNEGDP
    536895068U,	// XVNEGSP
    1744853148U,	// XVNMADDADP
    1744854433U,	// XVNMADDASP
    1744853500U,	// XVNMADDMDP
    1744854715U,	// XVNMADDMSP
    1744853102U,	// XVNMSUBADP
    1744854387U,	// XVNMSUBASP
    1744853454U,	// XVNMSUBMDP
    1744854669U,	// XVNMSUBMSP
    536892277U,	// XVRDPI
    536890481U,	// XVRDPIC
    536892989U,	// XVRDPIM
    536894559U,	// XVRDPIP
    536899817U,	// XVRDPIZ
    536893782U,	// XVREDP
    536895036U,	// XVRESP
    536892293U,	// XVRSPI
    536890490U,	// XVRSPIC
    536892998U,	// XVRSPIM
    536894568U,	// XVRSPIP
    536899826U,	// XVRSPIZ
    536893802U,	// XVRSQRTEDP
    536895056U,	// XVRSQRTESP
    536894238U,	// XVSQRTDP
    536895359U,	// XVSQRTSP
    22727U,	// XVSUBDP
    24012U,	// XVSUBSP
    23365U,	// XVTDIVDP
    24466U,	// XVTDIVSP
    536894227U,	// XVTSQRTDP
    536895348U,	// XVTSQRTSP
    2281724123U,	// XVTSTDCDP
    2281725408U,	// XVTSTDCSP
    536894114U,	// XVXEXPDP
    536895257U,	// XVXEXPSP
    536893842U,	// XVXSIGDP
    536895077U,	// XVXSIGSP
    536890947U,	// XXBRD
    536891660U,	// XXBRH
    536895536U,	// XXBRQ
    536898253U,	// XXBRW
    27601U,	// XXEXTRACTUW
    2818599783U,	// XXINSERTW
    19982U,	// XXLAND
    19499U,	// XXLANDC
    26535U,	// XXLEQV
    19990U,	// XXLNAND
    24865U,	// XXLNOR
    24858U,	// XXLOR
    19607U,	// XXLORC
    24858U,	// XXLORf
    24899U,	// XXLXOR
    117465411U,	// XXLXORdpz
    117465411U,	// XXLXORspz
    117465411U,	// XXLXORz
    27020U,	// XXMRGHW
    27062U,	// XXMRGLW
    22181U,	// XXPERM
    21069U,	// XXPERMDI
    21069U,	// XXPERMDIs
    24849U,	// XXPERMR
    21811U,	// XXSEL
    21535U,	// XXSLDWI
    21535U,	// XXSLDWIs
    352340666U,	// XXSPLTIB
    27466U,	// XXSPLTW
    27466U,	// XXSPLTWs
    183329U,	// gBC
    182369U,	// gBCA
    9747377U,	// gBCAat
    188817U,	// gBCCTR
    185687U,	// gBCCTRL
    185603U,	// gBCL
    182663U,	// gBCLA
    9747393U,	// gBCLAat
    188642U,	// gBCLR
    185680U,	// gBCLRL
    10271795U,	// gBCLat
    10271694U,	// gBCat
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// CFENCE8
    0U,	// CLRLSLDI
    0U,	// CLRLSLDIo
    66U,	// CLRLSLWI
    66U,	// CLRLSLWIo
    32U,	// CLRRDI
    32U,	// CLRRDIo
    34U,	// CLRRWI
    34U,	// CLRRWIo
    0U,	// CP_COPY_FIRST
    0U,	// CP_COPYx
    0U,	// CP_PASTE_LAST
    0U,	// CP_PASTEx
    0U,	// DCBFL
    0U,	// DCBFLP
    0U,	// DCBFx
    0U,	// DCBTCT
    0U,	// DCBTDS
    0U,	// DCBTSTCT
    0U,	// DCBTSTDS
    0U,	// DCBTSTT
    0U,	// DCBTSTx
    0U,	// DCBTT
    0U,	// DCBTx
    0U,	// DFLOADf32
    0U,	// DFLOADf64
    0U,	// DFSTOREf32
    0U,	// DFSTOREf64
    0U,	// EXTLDI
    0U,	// EXTLDIo
    66U,	// EXTLWI
    66U,	// EXTLWIo
    0U,	// EXTRDI
    0U,	// EXTRDIo
    66U,	// EXTRWI
    66U,	// EXTRWIo
    66U,	// INSLWI
    66U,	// INSLWIo
    0U,	// INSRDI
    0U,	// INSRDIo
    66U,	// INSRWI
    66U,	// INSRWIo
    0U,	// LAx
    0U,	// LIWAX
    0U,	// LIWZX
    130U,	// RLWIMIbm
    130U,	// RLWIMIobm
    130U,	// RLWINMbm
    130U,	// RLWINMobm
    130U,	// RLWNMbm
    130U,	// RLWNMobm
    32U,	// ROTRDI
    32U,	// ROTRDIo
    34U,	// ROTRWI
    34U,	// ROTRWIo
    32U,	// SLDI
    32U,	// SLDIo
    34U,	// SLWI
    34U,	// SLWIo
    0U,	// SPILLTOVSR_LD
    0U,	// SPILLTOVSR_LDX
    0U,	// SPILLTOVSR_ST
    0U,	// SPILLTOVSR_STX
    32U,	// SRDI
    32U,	// SRDIo
    34U,	// SRWI
    34U,	// SRWIo
    0U,	// STIWX
    4U,	// SUBI
    4U,	// SUBIC
    4U,	// SUBICo
    4U,	// SUBIS
    0U,	// SUBPCIS
    0U,	// XFLOADf32
    0U,	// XFLOADf64
    0U,	// XFSTOREf32
    0U,	// XFSTOREf64
    38U,	// ADD4
    38U,	// ADD4TLS
    38U,	// ADD4o
    38U,	// ADD8
    38U,	// ADD8TLS
    38U,	// ADD8TLS_
    38U,	// ADD8o
    38U,	// ADDC
    38U,	// ADDC8
    38U,	// ADDC8o
    38U,	// ADDCo
    38U,	// ADDE
    38U,	// ADDE8
    38U,	// ADDE8o
    38U,	// ADDEo
    4U,	// ADDI
    4U,	// ADDI8
    4U,	// ADDIC
    4U,	// ADDIC8
    4U,	// ADDICo
    4U,	// ADDIS
    4U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISdtprelHA32
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIdtprelL
    0U,	// ADDIdtprelL32
    0U,	// ADDItlsgdL
    0U,	// ADDItlsgdL32
    0U,	// ADDItlsgdLADDR
    0U,	// ADDItlsgdLADDR32
    0U,	// ADDItlsldL
    0U,	// ADDItlsldL32
    0U,	// ADDItlsldLADDR
    0U,	// ADDItlsldLADDR32
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8o
    0U,	// ADDMEo
    0U,	// ADDPCIS
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8o
    0U,	// ADDZEo
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    38U,	// AND
    38U,	// AND8
    38U,	// AND8o
    38U,	// ANDC
    38U,	// ANDC8
    38U,	// ANDC8o
    38U,	// ANDCo
    8U,	// ANDISo
    8U,	// ANDISo8
    8U,	// ANDIo
    8U,	// ANDIo8
    0U,	// ANDIo_1_EQ_BIT
    0U,	// ANDIo_1_EQ_BIT8
    0U,	// ANDIo_1_GT_BIT
    0U,	// ANDIo_1_GT_BIT8
    38U,	// ANDo
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATTN
    0U,	// B
    0U,	// BA
    0U,	// BC
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCCTR
    0U,	// BCCCTR8
    0U,	// BCCCTRL
    0U,	// BCCCTRL8
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCLR
    0U,	// BCCLRL
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTR8n
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCCTRL8n
    0U,	// BCCTRLn
    0U,	// BCCTRn
    42U,	// BCDCFNo
    42U,	// BCDCFSQo
    42U,	// BCDCFZo
    38U,	// BCDCPSGNo
    0U,	// BCDCTNo
    0U,	// BCDCTSQo
    42U,	// BCDCTZo
    42U,	// BCDSETSGNo
    198U,	// BCDSRo
    198U,	// BCDSo
    198U,	// BCDTRUNCo
    38U,	// BCDUSo
    38U,	// BCDUTRUNCo
    0U,	// BCL
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLRLn
    0U,	// BCLRn
    0U,	// BCLalways
    0U,	// BCLn
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BCTRL8_LDinto_toc
    0U,	// BCn
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_TLS
    0U,	// BL8_TLS
    0U,	// BL8_TLS_
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLR
    0U,	// BLR8
    0U,	// BLRL
    0U,	// BL_NOP
    0U,	// BL_TLS
    38U,	// BPERMD
    38U,	// BRINC
    0U,	// CLRBHRB
    38U,	// CMPB
    38U,	// CMPB8
    38U,	// CMPD
    4U,	// CMPDI
    38U,	// CMPEQB
    38U,	// CMPLD
    8U,	// CMPLDI
    38U,	// CMPLW
    8U,	// CMPLWI
    0U,	// CMPRB
    0U,	// CMPRB8
    38U,	// CMPW
    4U,	// CMPWI
    0U,	// CNTLZD
    0U,	// CNTLZDo
    0U,	// CNTLZW
    0U,	// CNTLZW8
    0U,	// CNTLZW8o
    0U,	// CNTLZWo
    0U,	// CNTTZD
    0U,	// CNTTZDo
    0U,	// CNTTZW
    0U,	// CNTTZW8
    0U,	// CNTTZW8o
    0U,	// CNTTZWo
    0U,	// CP_ABORT
    42U,	// CP_COPY
    42U,	// CP_COPY8
    42U,	// CP_PASTE
    42U,	// CP_PASTE8
    42U,	// CP_PASTE8o
    42U,	// CP_PASTEo
    0U,	// CR6SET
    0U,	// CR6UNSET
    38U,	// CRAND
    38U,	// CRANDC
    38U,	// CREQV
    38U,	// CRNAND
    38U,	// CRNOR
    38U,	// CROR
    38U,	// CRORC
    12U,	// CRSET
    12U,	// CRUNSET
    38U,	// CRXOR
    0U,	// CTRL_DEP
    0U,	// DARN
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBFEP
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBSTEP
    0U,	// DCBT
    0U,	// DCBTEP
    0U,	// DCBTST
    0U,	// DCBTSTEP
    0U,	// DCBZ
    0U,	// DCBZEP
    0U,	// DCBZL
    0U,	// DCBZLEP
    0U,	// DCCCI
    38U,	// DIVD
    38U,	// DIVDE
    38U,	// DIVDEU
    38U,	// DIVDEUo
    38U,	// DIVDEo
    38U,	// DIVDU
    38U,	// DIVDUo
    38U,	// DIVDo
    38U,	// DIVW
    38U,	// DIVWE
    38U,	// DIVWEU
    38U,	// DIVWEUo
    38U,	// DIVWEo
    38U,	// DIVWU
    38U,	// DIVWUo
    38U,	// DIVWo
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// DYNAREAOFFSET
    0U,	// DYNAREAOFFSET8
    0U,	// EFDABS
    38U,	// EFDADD
    0U,	// EFDCFS
    0U,	// EFDCFSF
    0U,	// EFDCFSI
    0U,	// EFDCFSID
    0U,	// EFDCFUF
    0U,	// EFDCFUI
    0U,	// EFDCFUID
    38U,	// EFDCMPEQ
    38U,	// EFDCMPGT
    38U,	// EFDCMPLT
    0U,	// EFDCTSF
    0U,	// EFDCTSI
    0U,	// EFDCTSIDZ
    0U,	// EFDCTSIZ
    0U,	// EFDCTUF
    0U,	// EFDCTUI
    0U,	// EFDCTUIDZ
    0U,	// EFDCTUIZ
    38U,	// EFDDIV
    38U,	// EFDMUL
    0U,	// EFDNABS
    0U,	// EFDNEG
    38U,	// EFDSUB
    38U,	// EFDTSTEQ
    38U,	// EFDTSTGT
    38U,	// EFDTSTLT
    0U,	// EFSABS
    38U,	// EFSADD
    0U,	// EFSCFD
    0U,	// EFSCFSF
    0U,	// EFSCFSI
    0U,	// EFSCFUF
    0U,	// EFSCFUI
    38U,	// EFSCMPEQ
    38U,	// EFSCMPGT
    38U,	// EFSCMPLT
    0U,	// EFSCTSF
    0U,	// EFSCTSI
    0U,	// EFSCTSIZ
    0U,	// EFSCTUF
    0U,	// EFSCTUI
    0U,	// EFSCTUIZ
    38U,	// EFSDIV
    38U,	// EFSMUL
    0U,	// EFSNABS
    0U,	// EFSNEG
    38U,	// EFSSUB
    38U,	// EFSTSTEQ
    38U,	// EFSTSTGT
    38U,	// EFSTSTLT
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    38U,	// EQV
    38U,	// EQV8
    38U,	// EQV8o
    38U,	// EQVo
    0U,	// EVABS
    46U,	// EVADDIW
    0U,	// EVADDSMIAAW
    0U,	// EVADDSSIAAW
    0U,	// EVADDUMIAAW
    0U,	// EVADDUSIAAW
    38U,	// EVADDW
    38U,	// EVAND
    38U,	// EVANDC
    38U,	// EVCMPEQ
    38U,	// EVCMPGTS
    38U,	// EVCMPGTU
    38U,	// EVCMPLTS
    38U,	// EVCMPLTU
    0U,	// EVCNTLSW
    0U,	// EVCNTLZW
    38U,	// EVDIVWS
    38U,	// EVDIVWU
    38U,	// EVEQV
    0U,	// EVEXTSB
    0U,	// EVEXTSH
    0U,	// EVFSABS
    38U,	// EVFSADD
    0U,	// EVFSCFSF
    0U,	// EVFSCFSI
    0U,	// EVFSCFUF
    0U,	// EVFSCFUI
    38U,	// EVFSCMPEQ
    38U,	// EVFSCMPGT
    38U,	// EVFSCMPLT
    0U,	// EVFSCTSF
    0U,	// EVFSCTSI
    0U,	// EVFSCTSIZ
    0U,	// EVFSCTUF
    0U,	// EVFSCTUI
    0U,	// EVFSCTUIZ
    38U,	// EVFSDIV
    38U,	// EVFSMUL
    0U,	// EVFSNABS
    0U,	// EVFSNEG
    38U,	// EVFSSUB
    38U,	// EVFSTSTEQ
    38U,	// EVFSTSTGT
    38U,	// EVFSTSTLT
    0U,	// EVLDD
    0U,	// EVLDDX
    0U,	// EVLDH
    0U,	// EVLDHX
    0U,	// EVLDW
    0U,	// EVLDWX
    0U,	// EVLHHESPLAT
    0U,	// EVLHHESPLATX
    0U,	// EVLHHOSSPLAT
    0U,	// EVLHHOSSPLATX
    0U,	// EVLHHOUSPLAT
    0U,	// EVLHHOUSPLATX
    0U,	// EVLWHE
    0U,	// EVLWHEX
    0U,	// EVLWHOS
    0U,	// EVLWHOSX
    0U,	// EVLWHOU
    0U,	// EVLWHOUX
    0U,	// EVLWHSPLAT
    0U,	// EVLWHSPLATX
    0U,	// EVLWWSPLAT
    0U,	// EVLWWSPLATX
    38U,	// EVMERGEHI
    38U,	// EVMERGEHILO
    38U,	// EVMERGELO
    38U,	// EVMERGELOHI
    38U,	// EVMHEGSMFAA
    38U,	// EVMHEGSMFAN
    38U,	// EVMHEGSMIAA
    38U,	// EVMHEGSMIAN
    38U,	// EVMHEGUMIAA
    38U,	// EVMHEGUMIAN
    38U,	// EVMHESMF
    38U,	// EVMHESMFA
    38U,	// EVMHESMFAAW
    38U,	// EVMHESMFANW
    38U,	// EVMHESMI
    38U,	// EVMHESMIA
    38U,	// EVMHESMIAAW
    38U,	// EVMHESMIANW
    38U,	// EVMHESSF
    38U,	// EVMHESSFA
    38U,	// EVMHESSFAAW
    38U,	// EVMHESSFANW
    38U,	// EVMHESSIAAW
    38U,	// EVMHESSIANW
    38U,	// EVMHEUMI
    38U,	// EVMHEUMIA
    38U,	// EVMHEUMIAAW
    38U,	// EVMHEUMIANW
    38U,	// EVMHEUSIAAW
    38U,	// EVMHEUSIANW
    38U,	// EVMHOGSMFAA
    38U,	// EVMHOGSMFAN
    38U,	// EVMHOGSMIAA
    38U,	// EVMHOGSMIAN
    38U,	// EVMHOGUMIAA
    38U,	// EVMHOGUMIAN
    38U,	// EVMHOSMF
    38U,	// EVMHOSMFA
    38U,	// EVMHOSMFAAW
    38U,	// EVMHOSMFANW
    38U,	// EVMHOSMI
    38U,	// EVMHOSMIA
    38U,	// EVMHOSMIAAW
    38U,	// EVMHOSMIANW
    38U,	// EVMHOSSF
    38U,	// EVMHOSSFA
    38U,	// EVMHOSSFAAW
    38U,	// EVMHOSSFANW
    38U,	// EVMHOSSIAAW
    38U,	// EVMHOSSIANW
    38U,	// EVMHOUMI
    38U,	// EVMHOUMIA
    38U,	// EVMHOUMIAAW
    38U,	// EVMHOUMIANW
    38U,	// EVMHOUSIAAW
    38U,	// EVMHOUSIANW
    0U,	// EVMRA
    38U,	// EVMWHSMF
    38U,	// EVMWHSMFA
    38U,	// EVMWHSMI
    38U,	// EVMWHSMIA
    38U,	// EVMWHSSF
    38U,	// EVMWHSSFA
    38U,	// EVMWHUMI
    38U,	// EVMWHUMIA
    38U,	// EVMWLSMIAAW
    38U,	// EVMWLSMIANW
    38U,	// EVMWLSSIAAW
    38U,	// EVMWLSSIANW
    38U,	// EVMWLUMI
    38U,	// EVMWLUMIA
    38U,	// EVMWLUMIAAW
    38U,	// EVMWLUMIANW
    38U,	// EVMWLUSIAAW
    38U,	// EVMWLUSIANW
    38U,	// EVMWSMF
    38U,	// EVMWSMFA
    38U,	// EVMWSMFAA
    38U,	// EVMWSMFAN
    38U,	// EVMWSMI
    38U,	// EVMWSMIA
    38U,	// EVMWSMIAA
    38U,	// EVMWSMIAN
    38U,	// EVMWSSF
    38U,	// EVMWSSFA
    38U,	// EVMWSSFAA
    38U,	// EVMWSSFAN
    38U,	// EVMWUMI
    38U,	// EVMWUMIA
    38U,	// EVMWUMIAA
    38U,	// EVMWUMIAN
    38U,	// EVNAND
    0U,	// EVNEG
    38U,	// EVNOR
    38U,	// EVOR
    38U,	// EVORC
    38U,	// EVRLW
    34U,	// EVRLWI
    0U,	// EVRNDW
    0U,	// EVSEL
    38U,	// EVSLW
    34U,	// EVSLWI
    0U,	// EVSPLATFI
    0U,	// EVSPLATI
    34U,	// EVSRWIS
    34U,	// EVSRWIU
    38U,	// EVSRWS
    38U,	// EVSRWU
    0U,	// EVSTDD
    0U,	// EVSTDDX
    0U,	// EVSTDH
    0U,	// EVSTDHX
    0U,	// EVSTDW
    0U,	// EVSTDWX
    0U,	// EVSTWHE
    0U,	// EVSTWHEX
    0U,	// EVSTWHO
    0U,	// EVSTWHOX
    0U,	// EVSTWWE
    0U,	// EVSTWWEX
    0U,	// EVSTWWO
    0U,	// EVSTWWOX
    0U,	// EVSUBFSMIAAW
    0U,	// EVSUBFSSIAAW
    0U,	// EVSUBFUMIAAW
    0U,	// EVSUBFUSIAAW
    38U,	// EVSUBFW
    0U,	// EVSUBIFW
    38U,	// EVXOR
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8_32_64
    0U,	// EXTSB8o
    0U,	// EXTSBo
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8_32_64
    0U,	// EXTSH8o
    0U,	// EXTSHo
    0U,	// EXTSW
    32U,	// EXTSWSLI
    32U,	// EXTSWSLI_32_64
    32U,	// EXTSWSLI_32_64o
    32U,	// EXTSWSLIo
    0U,	// EXTSW_32
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64o
    0U,	// EXTSWo
    0U,	// EnforceIEIO
    0U,	// FABSD
    0U,	// FABSDo
    0U,	// FABSS
    0U,	// FABSSo
    38U,	// FADD
    38U,	// FADDS
    38U,	// FADDSo
    38U,	// FADDo
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDSo
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUSo
    0U,	// FCFIDUo
    0U,	// FCFIDo
    38U,	// FCMPUD
    38U,	// FCMPUS
    38U,	// FCPSGND
    38U,	// FCPSGNDo
    38U,	// FCPSGNS
    38U,	// FCPSGNSo
    0U,	// FCTID
    0U,	// FCTIDU
    0U,	// FCTIDUZ
    0U,	// FCTIDUZo
    0U,	// FCTIDUo
    0U,	// FCTIDZ
    0U,	// FCTIDZo
    0U,	// FCTIDo
    0U,	// FCTIW
    0U,	// FCTIWU
    0U,	// FCTIWUZ
    0U,	// FCTIWUZo
    0U,	// FCTIWUo
    0U,	// FCTIWZ
    0U,	// FCTIWZo
    0U,	// FCTIWo
    38U,	// FDIV
    38U,	// FDIVS
    38U,	// FDIVSo
    38U,	// FDIVo
    134U,	// FMADD
    134U,	// FMADDS
    134U,	// FMADDSo
    134U,	// FMADDo
    0U,	// FMR
    0U,	// FMRo
    134U,	// FMSUB
    134U,	// FMSUBS
    134U,	// FMSUBSo
    134U,	// FMSUBo
    38U,	// FMUL
    38U,	// FMULS
    38U,	// FMULSo
    38U,	// FMULo
    0U,	// FNABSD
    0U,	// FNABSDo
    0U,	// FNABSS
    0U,	// FNABSSo
    0U,	// FNEGD
    0U,	// FNEGDo
    0U,	// FNEGS
    0U,	// FNEGSo
    134U,	// FNMADD
    134U,	// FNMADDS
    134U,	// FNMADDSo
    134U,	// FNMADDo
    134U,	// FNMSUB
    134U,	// FNMSUBS
    134U,	// FNMSUBSo
    134U,	// FNMSUBo
    0U,	// FRE
    0U,	// FRES
    0U,	// FRESo
    0U,	// FREo
    0U,	// FRIMD
    0U,	// FRIMDo
    0U,	// FRIMS
    0U,	// FRIMSo
    0U,	// FRIND
    0U,	// FRINDo
    0U,	// FRINS
    0U,	// FRINSo
    0U,	// FRIPD
    0U,	// FRIPDo
    0U,	// FRIPS
    0U,	// FRIPSo
    0U,	// FRIZD
    0U,	// FRIZDo
    0U,	// FRIZS
    0U,	// FRIZSo
    0U,	// FRSP
    0U,	// FRSPo
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTESo
    0U,	// FRSQRTEo
    134U,	// FSELD
    134U,	// FSELDo
    134U,	// FSELS
    134U,	// FSELSo
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTSo
    0U,	// FSQRTo
    38U,	// FSUB
    38U,	// FSUBS
    38U,	// FSUBSo
    38U,	// FSUBo
    38U,	// FTDIV
    0U,	// FTSQRT
    0U,	// GETtlsADDR
    0U,	// GETtlsADDR32
    0U,	// GETtlsldADDR
    0U,	// GETtlsldADDR32
    0U,	// HRFID
    0U,	// ICBI
    0U,	// ICBIEP
    0U,	// ICBLC
    0U,	// ICBLQ
    0U,	// ICBT
    0U,	// ICBTLS
    0U,	// ICCCI
    134U,	// ISEL
    134U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LBARX
    0U,	// LBARXL
    0U,	// LBEPX
    0U,	// LBZ
    0U,	// LBZ8
    38U,	// LBZCIX
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    38U,	// LBZXTLS
    38U,	// LBZXTLS_
    38U,	// LBZXTLS_32
    0U,	// LD
    0U,	// LDARX
    0U,	// LDARXL
    34U,	// LDAT
    0U,	// LDBRX
    38U,	// LDCIX
    0U,	// LDMX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    38U,	// LDXTLS
    38U,	// LDXTLS_
    0U,	// LDgotTprelL
    0U,	// LDgotTprelL32
    0U,	// LDtoc
    0U,	// LDtocBA
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LFD
    0U,	// LFDEPX
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHARX
    0U,	// LHARXL
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHBRX8
    0U,	// LHEPX
    0U,	// LHZ
    0U,	// LHZ8
    38U,	// LHZCIX
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    38U,	// LHZXTLS
    38U,	// LHZXTLS_
    38U,	// LHZXTLS_32
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    34U,	// LSWI
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    0U,	// LWARXL
    34U,	// LWAT
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWAX_32
    0U,	// LWA_32
    0U,	// LWBRX
    0U,	// LWBRX8
    0U,	// LWEPX
    0U,	// LWZ
    0U,	// LWZ8
    38U,	// LWZCIX
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    38U,	// LWZXTLS
    38U,	// LWZXTLS_
    38U,	// LWZXTLS_32
    0U,	// LWZtoc
    0U,	// LXSD
    0U,	// LXSDX
    0U,	// LXSIBZX
    0U,	// LXSIHZX
    0U,	// LXSIWAX
    0U,	// LXSIWZX
    0U,	// LXSSP
    0U,	// LXSSPX
    0U,	// LXV
    0U,	// LXVB16X
    0U,	// LXVD2X
    0U,	// LXVDSX
    0U,	// LXVH8X
    38U,	// LXVL
    38U,	// LXVLL
    0U,	// LXVW4X
    0U,	// LXVWSX
    0U,	// LXVX
    134U,	// MADDHD
    134U,	// MADDHDU
    134U,	// MADDLD
    134U,	// MADDLD8
    0U,	// MBAR
    0U,	// MCRF
    0U,	// MCRFS
    0U,	// MCRXRX
    0U,	// MFBHRBE
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFDCR
    0U,	// MFFS
    0U,	// MFFSCDRN
    0U,	// MFFSCDRNI
    0U,	// MFFSCE
    0U,	// MFFSCRN
    0U,	// MFFSCRNI
    0U,	// MFFSL
    0U,	// MFFSo
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFMSR
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFPMR
    0U,	// MFSPR
    0U,	// MFSPR8
    0U,	// MFSR
    0U,	// MFSRIN
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRD
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVSCR
    0U,	// MFVSRD
    0U,	// MFVSRLD
    0U,	// MFVSRWZ
    38U,	// MODSD
    38U,	// MODSW
    38U,	// MODUD
    38U,	// MODUW
    0U,	// MSGSYNC
    0U,	// MSYNC
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTDCR
    0U,	// MTFSB0
    0U,	// MTFSB1
    134U,	// MTFSF
    38U,	// MTFSFI
    38U,	// MTFSFIo
    0U,	// MTFSFb
    134U,	// MTFSFo
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTMSR
    0U,	// MTMSRD
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTPMR
    0U,	// MTSPR
    0U,	// MTSPR8
    0U,	// MTSR
    0U,	// MTSRIN
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVSCR
    0U,	// MTVSRD
    38U,	// MTVSRDD
    0U,	// MTVSRWA
    0U,	// MTVSRWS
    0U,	// MTVSRWZ
    38U,	// MULHD
    38U,	// MULHDU
    38U,	// MULHDUo
    38U,	// MULHDo
    38U,	// MULHW
    38U,	// MULHWU
    38U,	// MULHWUo
    38U,	// MULHWo
    38U,	// MULLD
    38U,	// MULLDo
    4U,	// MULLI
    4U,	// MULLI8
    38U,	// MULLW
    38U,	// MULLWo
    0U,	// MoveGOTtoLR
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    38U,	// NAND
    38U,	// NAND8
    38U,	// NAND8o
    38U,	// NANDo
    0U,	// NAP
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8o
    0U,	// NEGo
    0U,	// NOP
    0U,	// NOP_GT_PWR6
    0U,	// NOP_GT_PWR7
    38U,	// NOR
    38U,	// NOR8
    38U,	// NOR8o
    38U,	// NORo
    38U,	// OR
    38U,	// OR8
    38U,	// OR8o
    38U,	// ORC
    38U,	// ORC8
    38U,	// ORC8o
    38U,	// ORCo
    8U,	// ORI
    8U,	// ORI8
    8U,	// ORIS
    8U,	// ORIS8
    38U,	// ORo
    0U,	// POPCNTB
    0U,	// POPCNTD
    0U,	// POPCNTW
    0U,	// PPC32GOT
    0U,	// PPC32PICGOT
    262U,	// QVALIGNI
    262U,	// QVALIGNIb
    262U,	// QVALIGNIs
    16U,	// QVESPLATI
    16U,	// QVESPLATIb
    16U,	// QVESPLATIs
    0U,	// QVFABS
    0U,	// QVFABSs
    38U,	// QVFADD
    38U,	// QVFADDS
    38U,	// QVFADDSs
    0U,	// QVFCFID
    0U,	// QVFCFIDS
    0U,	// QVFCFIDU
    0U,	// QVFCFIDUS
    0U,	// QVFCFIDb
    38U,	// QVFCMPEQ
    38U,	// QVFCMPEQb
    38U,	// QVFCMPEQbs
    38U,	// QVFCMPGT
    38U,	// QVFCMPGTb
    38U,	// QVFCMPGTbs
    38U,	// QVFCMPLT
    38U,	// QVFCMPLTb
    38U,	// QVFCMPLTbs
    38U,	// QVFCPSGN
    38U,	// QVFCPSGNs
    0U,	// QVFCTID
    0U,	// QVFCTIDU
    0U,	// QVFCTIDUZ
    0U,	// QVFCTIDZ
    0U,	// QVFCTIDb
    0U,	// QVFCTIW
    0U,	// QVFCTIWU
    0U,	// QVFCTIWUZ
    0U,	// QVFCTIWZ
    326U,	// QVFLOGICAL
    326U,	// QVFLOGICALb
    326U,	// QVFLOGICALs
    18U,	// QVFMADD
    18U,	// QVFMADDS
    18U,	// QVFMADDSs
    0U,	// QVFMR
    0U,	// QVFMRb
    0U,	// QVFMRs
    18U,	// QVFMSUB
    18U,	// QVFMSUBS
    18U,	// QVFMSUBSs
    38U,	// QVFMUL
    38U,	// QVFMULS
    38U,	// QVFMULSs
    0U,	// QVFNABS
    0U,	// QVFNABSs
    0U,	// QVFNEG
    0U,	// QVFNEGs
    18U,	// QVFNMADD
    18U,	// QVFNMADDS
    18U,	// QVFNMADDSs
    18U,	// QVFNMSUB
    18U,	// QVFNMSUBS
    18U,	// QVFNMSUBSs
    134U,	// QVFPERM
    134U,	// QVFPERMs
    0U,	// QVFRE
    0U,	// QVFRES
    0U,	// QVFRESs
    0U,	// QVFRIM
    0U,	// QVFRIMs
    0U,	// QVFRIN
    0U,	// QVFRINs
    0U,	// QVFRIP
    0U,	// QVFRIPs
    0U,	// QVFRIZ
    0U,	// QVFRIZs
    0U,	// QVFRSP
    0U,	// QVFRSPs
    0U,	// QVFRSQRTE
    0U,	// QVFRSQRTES
    0U,	// QVFRSQRTESs
    18U,	// QVFSEL
    18U,	// QVFSELb
    18U,	// QVFSELbb
    18U,	// QVFSELbs
    38U,	// QVFSUB
    38U,	// QVFSUBS
    38U,	// QVFSUBSs
    38U,	// QVFTSTNAN
    38U,	// QVFTSTNANb
    38U,	// QVFTSTNANbs
    18U,	// QVFXMADD
    18U,	// QVFXMADDS
    38U,	// QVFXMUL
    38U,	// QVFXMULS
    18U,	// QVFXXCPNMADD
    18U,	// QVFXXCPNMADDS
    18U,	// QVFXXMADD
    18U,	// QVFXXMADDS
    18U,	// QVFXXNPMADD
    18U,	// QVFXXNPMADDS
    0U,	// QVGPCI
    0U,	// QVLFCDUX
    0U,	// QVLFCDUXA
    0U,	// QVLFCDX
    0U,	// QVLFCDXA
    0U,	// QVLFCSUX
    0U,	// QVLFCSUXA
    0U,	// QVLFCSX
    0U,	// QVLFCSXA
    0U,	// QVLFCSXs
    0U,	// QVLFDUX
    0U,	// QVLFDUXA
    0U,	// QVLFDX
    0U,	// QVLFDXA
    0U,	// QVLFDXb
    0U,	// QVLFIWAX
    0U,	// QVLFIWAXA
    0U,	// QVLFIWZX
    0U,	// QVLFIWZXA
    0U,	// QVLFSUX
    0U,	// QVLFSUXA
    0U,	// QVLFSX
    0U,	// QVLFSXA
    0U,	// QVLFSXb
    0U,	// QVLFSXs
    0U,	// QVLPCLDX
    0U,	// QVLPCLSX
    0U,	// QVLPCLSXint
    0U,	// QVLPCRDX
    0U,	// QVLPCRSX
    0U,	// QVSTFCDUX
    0U,	// QVSTFCDUXA
    0U,	// QVSTFCDUXI
    0U,	// QVSTFCDUXIA
    0U,	// QVSTFCDX
    0U,	// QVSTFCDXA
    0U,	// QVSTFCDXI
    0U,	// QVSTFCDXIA
    0U,	// QVSTFCSUX
    0U,	// QVSTFCSUXA
    0U,	// QVSTFCSUXI
    0U,	// QVSTFCSUXIA
    0U,	// QVSTFCSX
    0U,	// QVSTFCSXA
    0U,	// QVSTFCSXI
    0U,	// QVSTFCSXIA
    0U,	// QVSTFCSXs
    0U,	// QVSTFDUX
    0U,	// QVSTFDUXA
    0U,	// QVSTFDUXI
    0U,	// QVSTFDUXIA
    0U,	// QVSTFDX
    0U,	// QVSTFDXA
    0U,	// QVSTFDXI
    0U,	// QVSTFDXIA
    0U,	// QVSTFDXb
    0U,	// QVSTFIWX
    0U,	// QVSTFIWXA
    0U,	// QVSTFSUX
    0U,	// QVSTFSUXA
    0U,	// QVSTFSUXI
    0U,	// QVSTFSUXIA
    0U,	// QVSTFSUXs
    0U,	// QVSTFSX
    0U,	// QVSTFSXA
    0U,	// QVSTFSXI
    0U,	// QVSTFSXIA
    0U,	// QVSTFSXs
    0U,	// RESTORE_CR
    0U,	// RESTORE_CRBIT
    0U,	// RESTORE_VRSAVE
    0U,	// RFCI
    0U,	// RFDI
    0U,	// RFEBB
    0U,	// RFI
    0U,	// RFID
    0U,	// RFMCI
    6U,	// RLDCL
    6U,	// RLDCLo
    6U,	// RLDCR
    6U,	// RLDCRo
    0U,	// RLDIC
    0U,	// RLDICL
    0U,	// RLDICL_32
    0U,	// RLDICL_32_64
    0U,	// RLDICL_32o
    0U,	// RLDICLo
    0U,	// RLDICR
    0U,	// RLDICR_32
    0U,	// RLDICRo
    0U,	// RLDICo
    0U,	// RLDIMI
    0U,	// RLDIMIo
    0U,	// RLWIMI
    0U,	// RLWIMI8
    0U,	// RLWIMI8o
    0U,	// RLWIMIo
    578U,	// RLWINM
    578U,	// RLWINM8
    578U,	// RLWINM8o
    578U,	// RLWINMo
    582U,	// RLWNM
    582U,	// RLWNM8
    582U,	// RLWNM8o
    582U,	// RLWNMo
    0U,	// ReadTB
    0U,	// SC
    0U,	// SELECT_CC_F16
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_QBRC
    0U,	// SELECT_CC_QFRC
    0U,	// SELECT_CC_QSRC
    0U,	// SELECT_CC_SPE
    0U,	// SELECT_CC_SPE4
    0U,	// SELECT_CC_VRRC
    0U,	// SELECT_CC_VSFRC
    0U,	// SELECT_CC_VSRC
    0U,	// SELECT_CC_VSSRC
    0U,	// SELECT_F16
    0U,	// SELECT_F4
    0U,	// SELECT_F8
    0U,	// SELECT_I4
    0U,	// SELECT_I8
    0U,	// SELECT_QBRC
    0U,	// SELECT_QFRC
    0U,	// SELECT_QSRC
    0U,	// SELECT_SPE
    0U,	// SELECT_SPE4
    0U,	// SELECT_VRRC
    0U,	// SELECT_VSFRC
    0U,	// SELECT_VSRC
    0U,	// SELECT_VSSRC
    0U,	// SETB
    0U,	// SETB8
    0U,	// SETRND
    0U,	// SETRNDi
    0U,	// SLBFEEo
    0U,	// SLBIA
    0U,	// SLBIE
    0U,	// SLBIEG
    0U,	// SLBMFEE
    0U,	// SLBMFEV
    0U,	// SLBMTE
    0U,	// SLBSYNC
    38U,	// SLD
    38U,	// SLDo
    38U,	// SLW
    38U,	// SLW8
    38U,	// SLW8o
    38U,	// SLWo
    0U,	// SPELWZ
    0U,	// SPELWZX
    0U,	// SPESTW
    0U,	// SPESTWX
    0U,	// SPILL_CR
    0U,	// SPILL_CRBIT
    0U,	// SPILL_VRSAVE
    38U,	// SRAD
    32U,	// SRADI
    32U,	// SRADI_32
    32U,	// SRADIo
    38U,	// SRADo
    38U,	// SRAW
    34U,	// SRAWI
    34U,	// SRAWIo
    38U,	// SRAWo
    38U,	// SRD
    38U,	// SRDo
    38U,	// SRW
    38U,	// SRW8
    38U,	// SRW8o
    38U,	// SRWo
    0U,	// STB
    0U,	// STB8
    38U,	// STBCIX
    0U,	// STBCX
    0U,	// STBEPX
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    38U,	// STBXTLS
    38U,	// STBXTLS_
    38U,	// STBXTLS_32
    0U,	// STD
    34U,	// STDAT
    0U,	// STDBRX
    38U,	// STDCIX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    38U,	// STDXTLS
    38U,	// STDXTLS_
    0U,	// STFD
    0U,	// STFDEPX
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    38U,	// STHCIX
    0U,	// STHCX
    0U,	// STHEPX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    38U,	// STHXTLS
    38U,	// STHXTLS_
    38U,	// STHXTLS_32
    0U,	// STMW
    0U,	// STOP
    34U,	// STSWI
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    34U,	// STWAT
    0U,	// STWBRX
    38U,	// STWCIX
    0U,	// STWCX
    0U,	// STWEPX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    38U,	// STWXTLS
    38U,	// STWXTLS_
    38U,	// STWXTLS_32
    0U,	// STXSD
    0U,	// STXSDX
    0U,	// STXSIBX
    0U,	// STXSIBXv
    0U,	// STXSIHX
    0U,	// STXSIHXv
    0U,	// STXSIWX
    0U,	// STXSSP
    0U,	// STXSSPX
    0U,	// STXV
    0U,	// STXVB16X
    0U,	// STXVD2X
    0U,	// STXVH8X
    38U,	// STXVL
    38U,	// STXVLL
    0U,	// STXVW4X
    0U,	// STXVX
    38U,	// SUBF
    38U,	// SUBF8
    38U,	// SUBF8o
    38U,	// SUBFC
    38U,	// SUBFC8
    38U,	// SUBFC8o
    38U,	// SUBFCo
    38U,	// SUBFE
    38U,	// SUBFE8
    38U,	// SUBFE8o
    38U,	// SUBFEo
    4U,	// SUBFIC
    4U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8o
    0U,	// SUBFMEo
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8o
    0U,	// SUBFZEo
    38U,	// SUBFo
    0U,	// SYNC
    0U,	// TABORT
    38U,	// TABORTDC
    34U,	// TABORTDCI
    38U,	// TABORTWC
    34U,	// TABORTWCI
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TBEGIN
    0U,	// TBEGIN_RET
    0U,	// TCHECK
    0U,	// TCHECK_RET
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    38U,	// TD
    4U,	// TDI
    0U,	// TEND
    0U,	// TLBIA
    0U,	// TLBIE
    0U,	// TLBIEL
    0U,	// TLBIVAX
    0U,	// TLBLD
    0U,	// TLBLI
    0U,	// TLBRE
    38U,	// TLBRE2
    0U,	// TLBSX
    38U,	// TLBSX2
    38U,	// TLBSX2D
    0U,	// TLBSYNC
    0U,	// TLBWE
    38U,	// TLBWE2
    0U,	// TRAP
    0U,	// TRECHKPT
    0U,	// TRECLAIM
    0U,	// TSR
    38U,	// TW
    4U,	// TWI
    0U,	// UPDATE_VRSAVE
    0U,	// UpdateGBR
    38U,	// VABSDUB
    38U,	// VABSDUH
    38U,	// VABSDUW
    38U,	// VADDCUQ
    38U,	// VADDCUW
    134U,	// VADDECUQ
    134U,	// VADDEUQM
    38U,	// VADDFP
    38U,	// VADDSBS
    38U,	// VADDSHS
    38U,	// VADDSWS
    38U,	// VADDUBM
    38U,	// VADDUBS
    38U,	// VADDUDM
    38U,	// VADDUHM
    38U,	// VADDUHS
    38U,	// VADDUQM
    38U,	// VADDUWM
    38U,	// VADDUWS
    38U,	// VAND
    38U,	// VANDC
    38U,	// VAVGSB
    38U,	// VAVGSH
    38U,	// VAVGSW
    38U,	// VAVGUB
    38U,	// VAVGUH
    38U,	// VAVGUW
    38U,	// VBPERMD
    38U,	// VBPERMQ
    1U,	// VCFSX
    1U,	// VCFSX_0
    1U,	// VCFUX
    1U,	// VCFUX_0
    38U,	// VCIPHER
    38U,	// VCIPHERLAST
    0U,	// VCLZB
    0U,	// VCLZD
    0U,	// VCLZH
    0U,	// VCLZLSBB
    0U,	// VCLZW
    38U,	// VCMPBFP
    38U,	// VCMPBFPo
    38U,	// VCMPEQFP
    38U,	// VCMPEQFPo
    38U,	// VCMPEQUB
    38U,	// VCMPEQUBo
    38U,	// VCMPEQUD
    38U,	// VCMPEQUDo
    38U,	// VCMPEQUH
    38U,	// VCMPEQUHo
    38U,	// VCMPEQUW
    38U,	// VCMPEQUWo
    38U,	// VCMPGEFP
    38U,	// VCMPGEFPo
    38U,	// VCMPGTFP
    38U,	// VCMPGTFPo
    38U,	// VCMPGTSB
    38U,	// VCMPGTSBo
    38U,	// VCMPGTSD
    38U,	// VCMPGTSDo
    38U,	// VCMPGTSH
    38U,	// VCMPGTSHo
    38U,	// VCMPGTSW
    38U,	// VCMPGTSWo
    38U,	// VCMPGTUB
    38U,	// VCMPGTUBo
    38U,	// VCMPGTUD
    38U,	// VCMPGTUDo
    38U,	// VCMPGTUH
    38U,	// VCMPGTUHo
    38U,	// VCMPGTUW
    38U,	// VCMPGTUWo
    38U,	// VCMPNEB
    38U,	// VCMPNEBo
    38U,	// VCMPNEH
    38U,	// VCMPNEHo
    38U,	// VCMPNEW
    38U,	// VCMPNEWo
    38U,	// VCMPNEZB
    38U,	// VCMPNEZBo
    38U,	// VCMPNEZH
    38U,	// VCMPNEZHo
    38U,	// VCMPNEZW
    38U,	// VCMPNEZWo
    1U,	// VCTSXS
    1U,	// VCTSXS_0
    1U,	// VCTUXS
    1U,	// VCTUXS_0
    0U,	// VCTZB
    0U,	// VCTZD
    0U,	// VCTZH
    0U,	// VCTZLSBB
    0U,	// VCTZW
    38U,	// VEQV
    0U,	// VEXPTEFP
    1U,	// VEXTRACTD
    1U,	// VEXTRACTUB
    1U,	// VEXTRACTUH
    1U,	// VEXTRACTUW
    0U,	// VEXTSB2D
    0U,	// VEXTSB2Ds
    0U,	// VEXTSB2W
    0U,	// VEXTSB2Ws
    0U,	// VEXTSH2D
    0U,	// VEXTSH2Ds
    0U,	// VEXTSH2W
    0U,	// VEXTSH2Ws
    0U,	// VEXTSW2D
    0U,	// VEXTSW2Ds
    38U,	// VEXTUBLX
    38U,	// VEXTUBRX
    38U,	// VEXTUHLX
    38U,	// VEXTUHRX
    38U,	// VEXTUWLX
    38U,	// VEXTUWRX
    0U,	// VGBBD
    0U,	// VINSERTB
    1U,	// VINSERTD
    0U,	// VINSERTH
    1U,	// VINSERTW
    0U,	// VLOGEFP
    134U,	// VMADDFP
    38U,	// VMAXFP
    38U,	// VMAXSB
    38U,	// VMAXSD
    38U,	// VMAXSH
    38U,	// VMAXSW
    38U,	// VMAXUB
    38U,	// VMAXUD
    38U,	// VMAXUH
    38U,	// VMAXUW
    134U,	// VMHADDSHS
    134U,	// VMHRADDSHS
    38U,	// VMINFP
    38U,	// VMINSB
    38U,	// VMINSD
    38U,	// VMINSH
    38U,	// VMINSW
    38U,	// VMINUB
    38U,	// VMINUD
    38U,	// VMINUH
    38U,	// VMINUW
    134U,	// VMLADDUHM
    38U,	// VMRGEW
    38U,	// VMRGHB
    38U,	// VMRGHH
    38U,	// VMRGHW
    38U,	// VMRGLB
    38U,	// VMRGLH
    38U,	// VMRGLW
    38U,	// VMRGOW
    134U,	// VMSUMMBM
    134U,	// VMSUMSHM
    134U,	// VMSUMSHS
    134U,	// VMSUMUBM
    134U,	// VMSUMUHM
    134U,	// VMSUMUHS
    0U,	// VMUL10CUQ
    38U,	// VMUL10ECUQ
    38U,	// VMUL10EUQ
    0U,	// VMUL10UQ
    38U,	// VMULESB
    38U,	// VMULESH
    38U,	// VMULESW
    38U,	// VMULEUB
    38U,	// VMULEUH
    38U,	// VMULEUW
    38U,	// VMULOSB
    38U,	// VMULOSH
    38U,	// VMULOSW
    38U,	// VMULOUB
    38U,	// VMULOUH
    38U,	// VMULOUW
    38U,	// VMULUWM
    38U,	// VNAND
    38U,	// VNCIPHER
    38U,	// VNCIPHERLAST
    0U,	// VNEGD
    0U,	// VNEGW
    134U,	// VNMSUBFP
    38U,	// VNOR
    38U,	// VOR
    38U,	// VORC
    134U,	// VPERM
    134U,	// VPERMR
    134U,	// VPERMXOR
    38U,	// VPKPX
    38U,	// VPKSDSS
    38U,	// VPKSDUS
    38U,	// VPKSHSS
    38U,	// VPKSHUS
    38U,	// VPKSWSS
    38U,	// VPKSWUS
    38U,	// VPKUDUM
    38U,	// VPKUDUS
    38U,	// VPKUHUM
    38U,	// VPKUHUS
    38U,	// VPKUWUM
    38U,	// VPKUWUS
    38U,	// VPMSUMB
    38U,	// VPMSUMD
    38U,	// VPMSUMH
    38U,	// VPMSUMW
    0U,	// VPOPCNTB
    0U,	// VPOPCNTD
    0U,	// VPOPCNTH
    0U,	// VPOPCNTW
    0U,	// VPRTYBD
    0U,	// VPRTYBQ
    0U,	// VPRTYBW
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    38U,	// VRLB
    38U,	// VRLD
    38U,	// VRLDMI
    38U,	// VRLDNM
    38U,	// VRLH
    38U,	// VRLW
    38U,	// VRLWMI
    38U,	// VRLWNM
    0U,	// VRSQRTEFP
    0U,	// VSBOX
    134U,	// VSEL
    394U,	// VSHASIGMAD
    394U,	// VSHASIGMAW
    38U,	// VSL
    38U,	// VSLB
    38U,	// VSLD
    390U,	// VSLDOI
    38U,	// VSLH
    38U,	// VSLO
    38U,	// VSLV
    38U,	// VSLW
    1U,	// VSPLTB
    1U,	// VSPLTBs
    1U,	// VSPLTH
    1U,	// VSPLTHs
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    1U,	// VSPLTW
    38U,	// VSR
    38U,	// VSRAB
    38U,	// VSRAD
    38U,	// VSRAH
    38U,	// VSRAW
    38U,	// VSRB
    38U,	// VSRD
    38U,	// VSRH
    38U,	// VSRO
    38U,	// VSRV
    38U,	// VSRW
    38U,	// VSUBCUQ
    38U,	// VSUBCUW
    134U,	// VSUBECUQ
    134U,	// VSUBEUQM
    38U,	// VSUBFP
    38U,	// VSUBSBS
    38U,	// VSUBSHS
    38U,	// VSUBSWS
    38U,	// VSUBUBM
    38U,	// VSUBUBS
    38U,	// VSUBUDM
    38U,	// VSUBUHM
    38U,	// VSUBUHS
    38U,	// VSUBUQM
    38U,	// VSUBUWM
    38U,	// VSUBUWS
    38U,	// VSUM2SWS
    38U,	// VSUM4SBS
    38U,	// VSUM4SHS
    38U,	// VSUM4UBS
    38U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKHSW
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VUPKLSW
    38U,	// VXOR
    12U,	// V_SET0
    12U,	// V_SET0B
    12U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// WRTEE
    0U,	// WRTEEI
    38U,	// XOR
    38U,	// XOR8
    38U,	// XOR8o
    8U,	// XORI
    8U,	// XORI8
    8U,	// XORIS
    8U,	// XORIS8
    38U,	// XORo
    0U,	// XSABSDP
    0U,	// XSABSQP
    38U,	// XSADDDP
    38U,	// XSADDQP
    38U,	// XSADDQPO
    38U,	// XSADDSP
    38U,	// XSCMPEQDP
    38U,	// XSCMPEXPDP
    38U,	// XSCMPEXPQP
    38U,	// XSCMPGEDP
    38U,	// XSCMPGTDP
    38U,	// XSCMPODP
    38U,	// XSCMPOQP
    38U,	// XSCMPUDP
    38U,	// XSCMPUQP
    38U,	// XSCPSGNDP
    38U,	// XSCPSGNQP
    0U,	// XSCVDPHP
    0U,	// XSCVDPQP
    0U,	// XSCVDPSP
    0U,	// XSCVDPSPN
    0U,	// XSCVDPSXDS
    0U,	// XSCVDPSXDSs
    0U,	// XSCVDPSXWS
    0U,	// XSCVDPSXWSs
    0U,	// XSCVDPUXDS
    0U,	// XSCVDPUXDSs
    0U,	// XSCVDPUXWS
    0U,	// XSCVDPUXWSs
    0U,	// XSCVHPDP
    0U,	// XSCVQPDP
    0U,	// XSCVQPDPO
    0U,	// XSCVQPSDZ
    0U,	// XSCVQPSWZ
    0U,	// XSCVQPUDZ
    0U,	// XSCVQPUWZ
    0U,	// XSCVSDQP
    0U,	// XSCVSPDP
    0U,	// XSCVSPDPN
    0U,	// XSCVSXDDP
    0U,	// XSCVSXDSP
    0U,	// XSCVUDQP
    0U,	// XSCVUXDDP
    0U,	// XSCVUXDSP
    38U,	// XSDIVDP
    38U,	// XSDIVQP
    38U,	// XSDIVQPO
    38U,	// XSDIVSP
    38U,	// XSIEXPDP
    38U,	// XSIEXPQP
    1U,	// XSMADDADP
    1U,	// XSMADDASP
    1U,	// XSMADDMDP
    1U,	// XSMADDMSP
    1U,	// XSMADDQP
    1U,	// XSMADDQPO
    38U,	// XSMAXCDP
    38U,	// XSMAXDP
    38U,	// XSMAXJDP
    38U,	// XSMINCDP
    38U,	// XSMINDP
    38U,	// XSMINJDP
    1U,	// XSMSUBADP
    1U,	// XSMSUBASP
    1U,	// XSMSUBMDP
    1U,	// XSMSUBMSP
    1U,	// XSMSUBQP
    1U,	// XSMSUBQPO
    38U,	// XSMULDP
    38U,	// XSMULQP
    38U,	// XSMULQPO
    38U,	// XSMULSP
    0U,	// XSNABSDP
    0U,	// XSNABSQP
    0U,	// XSNEGDP
    0U,	// XSNEGQP
    1U,	// XSNMADDADP
    1U,	// XSNMADDASP
    1U,	// XSNMADDMDP
    1U,	// XSNMADDMSP
    1U,	// XSNMADDQP
    1U,	// XSNMADDQPO
    1U,	// XSNMSUBADP
    1U,	// XSNMSUBASP
    1U,	// XSNMSUBMDP
    1U,	// XSNMSUBMSP
    1U,	// XSNMSUBQP
    1U,	// XSNMSUBQPO
    0U,	// XSRDPI
    0U,	// XSRDPIC
    0U,	// XSRDPIM
    0U,	// XSRDPIP
    0U,	// XSRDPIZ
    0U,	// XSREDP
    0U,	// XSRESP
    0U,	// XSRQPI
    0U,	// XSRQPIX
    0U,	// XSRQPXP
    0U,	// XSRSP
    0U,	// XSRSQRTEDP
    0U,	// XSRSQRTESP
    0U,	// XSSQRTDP
    0U,	// XSSQRTQP
    0U,	// XSSQRTQPO
    0U,	// XSSQRTSP
    38U,	// XSSUBDP
    38U,	// XSSUBQP
    38U,	// XSSUBQPO
    38U,	// XSSUBSP
    38U,	// XSTDIVDP
    0U,	// XSTSQRTDP
    1U,	// XSTSTDCDP
    1U,	// XSTSTDCQP
    1U,	// XSTSTDCSP
    0U,	// XSXEXPDP
    0U,	// XSXEXPQP
    0U,	// XSXSIGDP
    0U,	// XSXSIGQP
    0U,	// XVABSDP
    0U,	// XVABSSP
    38U,	// XVADDDP
    38U,	// XVADDSP
    38U,	// XVCMPEQDP
    38U,	// XVCMPEQDPo
    38U,	// XVCMPEQSP
    38U,	// XVCMPEQSPo
    38U,	// XVCMPGEDP
    38U,	// XVCMPGEDPo
    38U,	// XVCMPGESP
    38U,	// XVCMPGESPo
    38U,	// XVCMPGTDP
    38U,	// XVCMPGTDPo
    38U,	// XVCMPGTSP
    38U,	// XVCMPGTSPo
    38U,	// XVCPSGNDP
    38U,	// XVCPSGNSP
    0U,	// XVCVDPSP
    0U,	// XVCVDPSXDS
    0U,	// XVCVDPSXWS
    0U,	// XVCVDPUXDS
    0U,	// XVCVDPUXWS
    0U,	// XVCVHPSP
    0U,	// XVCVSPDP
    0U,	// XVCVSPHP
    0U,	// XVCVSPSXDS
    0U,	// XVCVSPSXWS
    0U,	// XVCVSPUXDS
    0U,	// XVCVSPUXWS
    0U,	// XVCVSXDDP
    0U,	// XVCVSXDSP
    0U,	// XVCVSXWDP
    0U,	// XVCVSXWSP
    0U,	// XVCVUXDDP
    0U,	// XVCVUXDSP
    0U,	// XVCVUXWDP
    0U,	// XVCVUXWSP
    38U,	// XVDIVDP
    38U,	// XVDIVSP
    38U,	// XVIEXPDP
    38U,	// XVIEXPSP
    1U,	// XVMADDADP
    1U,	// XVMADDASP
    1U,	// XVMADDMDP
    1U,	// XVMADDMSP
    38U,	// XVMAXDP
    38U,	// XVMAXSP
    38U,	// XVMINDP
    38U,	// XVMINSP
    1U,	// XVMSUBADP
    1U,	// XVMSUBASP
    1U,	// XVMSUBMDP
    1U,	// XVMSUBMSP
    38U,	// XVMULDP
    38U,	// XVMULSP
    0U,	// XVNABSDP
    0U,	// XVNABSSP
    0U,	// XVNEGDP
    0U,	// XVNEGSP
    1U,	// XVNMADDADP
    1U,	// XVNMADDASP
    1U,	// XVNMADDMDP
    1U,	// XVNMADDMSP
    1U,	// XVNMSUBADP
    1U,	// XVNMSUBASP
    1U,	// XVNMSUBMDP
    1U,	// XVNMSUBMSP
    0U,	// XVRDPI
    0U,	// XVRDPIC
    0U,	// XVRDPIM
    0U,	// XVRDPIP
    0U,	// XVRDPIZ
    0U,	// XVREDP
    0U,	// XVRESP
    0U,	// XVRSPI
    0U,	// XVRSPIC
    0U,	// XVRSPIM
    0U,	// XVRSPIP
    0U,	// XVRSPIZ
    0U,	// XVRSQRTEDP
    0U,	// XVRSQRTESP
    0U,	// XVSQRTDP
    0U,	// XVSQRTSP
    38U,	// XVSUBDP
    38U,	// XVSUBSP
    38U,	// XVTDIVDP
    38U,	// XVTDIVSP
    0U,	// XVTSQRTDP
    0U,	// XVTSQRTSP
    1U,	// XVTSTDCDP
    1U,	// XVTSTDCSP
    0U,	// XVXEXPDP
    0U,	// XVXEXPSP
    0U,	// XVXSIGDP
    0U,	// XVXSIGSP
    0U,	// XXBRD
    0U,	// XXBRH
    0U,	// XXBRQ
    0U,	// XXBRW
    20U,	// XXEXTRACTUW
    1U,	// XXINSERTW
    38U,	// XXLAND
    38U,	// XXLANDC
    38U,	// XXLEQV
    38U,	// XXLNAND
    38U,	// XXLNOR
    38U,	// XXLOR
    38U,	// XXLORC
    38U,	// XXLORf
    38U,	// XXLXOR
    12U,	// XXLXORdpz
    12U,	// XXLXORspz
    12U,	// XXLXORz
    38U,	// XXMRGHW
    38U,	// XXMRGLW
    38U,	// XXPERM
    262U,	// XXPERMDI
    462U,	// XXPERMDIs
    38U,	// XXPERMR
    134U,	// XXSEL
    262U,	// XXSLDWI
    462U,	// XXSLDWIs
    0U,	// XXSPLTIB
    16U,	// XXSPLTW
    16U,	// XXSPLTWs
    22U,	// gBC
    24U,	// gBCA
    0U,	// gBCAat
    38U,	// gBCCTR
    38U,	// gBCCTRL
    22U,	// gBCL
    24U,	// gBCLA
    0U,	// gBCLAat
    38U,	// gBCLR
    38U,	// gBCLRL
    0U,	// gBCLat
    0U,	// gBCat
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 14) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_LABEL, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CAL...
    return;
    break;
  case 1:
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, CLRRDI, CLRRDIo, CLRRWI, CLR...
    printOperand(MI, 0, O);
    break;
  case 2:
    // DCBFL, DCBFLP, DCBFx, DCBTCT, DCBTDS, DCBTSTCT, DCBTSTDS, DCBTSTT, DCB...
    printMemRegReg(MI, 0, O);
    break;
  case 3:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printU16ImmOperand(MI, 0, O);
    O << ' ';
    printU16ImmOperand(MI, 1, O);
    return;
    break;
  case 4:
    // B, BCLalways, BDNZ, BDNZ8, BDNZL, BDNZLm, BDNZLp, BDNZm, BDNZp, BDZ, B...
    printBranchOperand(MI, 0, O);
    break;
  case 5:
    // BA, BDNZA, BDNZAm, BDNZAp, BDNZLA, BDNZLAm, BDNZLAp, BDZA, BDZAm, BDZA...
    printAbsBranchOperand(MI, 0, O);
    break;
  case 6:
    // BCC, BCCA, BCCCTR, BCCCTR8, BCCCTRL, BCCCTRL8, BCCL, BCCLA, BCCLR, BCC...
    printPredicateOperand(MI, 0, O, "cc");
    break;
  case 7:
    // BCTRL8_LDinto_toc
    printMemRegImm(MI, 0, O);
    return;
    break;
  case 8:
    // BL8_NOP_TLS, BL8_TLS, BL8_TLS_, BL_TLS
    printTLSCall(MI, 0, O);
    break;
  case 9:
    // DCBF, DCBT, DCBTST
    printMemRegReg(MI, 1, O);
    O << ", ";
    printU5ImmOperand(MI, 0, O);
    return;
    break;
  case 10:
    // DCBTEP, DCBTSTEP
    printU5ImmOperand(MI, 2, O);
    O << ", ";
    printMemRegReg(MI, 0, O);
    return;
    break;
  case 11:
    // DSS, MBAR, MTFSB0, MTFSB1, TABORTDC, TABORTDCI, TABORTWC, TABORTWCI, T...
    printU5ImmOperand(MI, 0, O);
    break;
  case 12:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, MTDCR, MTV...
    printOperand(MI, 1, O);
    break;
  case 13:
    // ICBLC, ICBLQ, ICBT, ICBTLS
    printU4ImmOperand(MI, 0, O);
    O << ", ";
    printMemRegReg(MI, 1, O);
    return;
    break;
  case 14:
    // MTOCRF, MTOCRF8
    printcrbitm(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 15:
    // MTSR
    printU4ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 0, O);
    return;
    break;
  case 16:
    // RFEBB, TBEGIN, TEND, TSR
    printU1ImmOperand(MI, 0, O);
    return;
    break;
  case 17:
    // XSRQPI, XSRQPIX, XSRQPXP
    printU1ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    printU2ImmOperand(MI, 3, O);
    return;
    break;
  case 18:
    // gBCAat, gBCLAat, gBCLat, gBCat
    printATBitsAsHint(MI, 1, O);
    O << ' ';
    printU5ImmOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    break;
  }


  // Fragment 1 encoded into 5 bits for 20 unique commands.
  switch ((Bits >> 19) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, CLRRDI, CLRRDIo, CLRRWI, CLR...
    O << ", ";
    break;
  case 1:
    // DCBFL, DCBFLP, DCBFx, DCBTSTT, DCBTSTx, DCBTT, DCBTx, B, BA, BCLalways...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, TCRETURNai, TCRETURNai8, TCR...
    O << ' ';
    break;
  case 3:
    // BCC, CTRL_DEP
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 4:
    // BCCA
    O << 'a';
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BCCCTR, BCCCTR8
    O << "ctr";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 6:
    // BCCCTRL, BCCCTRL8
    O << "ctrl";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 7:
    // BCCL
    O << 'l';
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 8:
    // BCCLA
    O << "la";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  case 9:
    // BCCLR
    O << "lr";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 10:
    // BCCLRL
    O << "lrl";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 11:
    // BCCTR, BCCTR8, BCCTR8n, BCCTRL, BCCTRL8, BCCTRL8n, BCCTRLn, BCCTRn, BC...
    O << ", 0";
    return;
    break;
  case 12:
    // BL8_NOP, BL8_NOP_TLS, BLA8_NOP, BL_NOP
    O << "\n\tnop";
    return;
    break;
  case 13:
    // EVSEL, TLBIE
    O << ',';
    break;
  case 14:
    // MFTB8
    O << ", 268";
    return;
    break;
  case 15:
    // MFVRSAVE, MFVRSAVEv
    O << ", 256";
    return;
    break;
  case 16:
    // QVLPCLSXint
    O << ", 0, ";
    printOperand(MI, 1, O);
    return;
    break;
  case 17:
    // V_SETALLONES, V_SETALLONESB, V_SETALLONESH
    O << ", -1";
    return;
    break;
  case 18:
    // gBCAat, gBCLAat
    printAbsBranchOperand(MI, 3, O);
    return;
    break;
  case 19:
    // gBCLat, gBCat
    printBranchOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 22 unique commands.
  switch ((Bits >> 24) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, CLRRDI, CLRRDIo, CLRRWI, CLR...
    printOperand(MI, 1, O);
    break;
  case 1:
    // DCBTCT, DCBTDS, DCBTSTCT, DCBTSTDS, EVADDIW
    printU5ImmOperand(MI, 2, O);
    break;
  case 2:
    // LAx, EVLDD, EVLDH, EVLDW, EVLHHESPLAT, EVLHHOSSPLAT, EVLHHOUSPLAT, EVL...
    printMemRegImm(MI, 1, O);
    return;
    break;
  case 3:
    // SUBPCIS, LI, LI8, LIS, LIS8
    printS16ImmOperand(MI, 1, O);
    return;
    break;
  case 4:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, EVLDDX, EVLDHX, EVLDWX, EVLH...
    printMemRegReg(MI, 1, O);
    break;
  case 5:
    // BC, BCL, BCLn, BCn
    printBranchOperand(MI, 1, O);
    return;
    break;
  case 6:
    // CMPRB, CMPRB8
    printU1ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    return;
    break;
  case 7:
    // CRSET, CRUNSET, MTDCR, TLBIE, V_SET0, V_SET0B, V_SET0H, XXLXORdpz, XXL...
    printOperand(MI, 0, O);
    break;
  case 8:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, RLDIMI, RL...
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 9:
    // EVSPLATFI, EVSPLATI, VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O);
    return;
    break;
  case 10:
    // EVSUBIFW
    printU5ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 11:
    // LA
    printS16ImmOperand(MI, 2, O);
    O << '(';
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 12:
    // LBZU, LBZU8, LDU, LFDU, LFSU, LHAU, LHAU8, LHZU, LHZU8, LWZU, LWZU8, S...
    printMemRegImm(MI, 2, O);
    return;
    break;
  case 13:
    // LBZUX, LBZUX8, LDUX, LFDUX, LFSUX, LHAUX, LHAUX8, LHZUX, LHZUX8, LWAUX...
    printMemRegReg(MI, 2, O);
    return;
    break;
  case 14:
    // MFBHRBE
    printU10ImmOperand(MI, 1, O);
    return;
    break;
  case 15:
    // MFFSCDRNI
    printU3ImmOperand(MI, 1, O);
    return;
    break;
  case 16:
    // MFFSCRNI
    printU2ImmOperand(MI, 1, O);
    return;
    break;
  case 17:
    // MFOCRF, MFOCRF8
    printcrbitm(MI, 1, O);
    return;
    break;
  case 18:
    // MFSR
    printU4ImmOperand(MI, 1, O);
    return;
    break;
  case 19:
    // QVGPCI
    printU12ImmOperand(MI, 1, O);
    return;
    break;
  case 20:
    // VINSERTB, VINSERTH
    printOperand(MI, 3, O);
    O << ", ";
    printU4ImmOperand(MI, 2, O);
    return;
    break;
  case 21:
    // XXSPLTIB
    printU8ImmOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 29) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, CLRRDI, CLRRDIo, CLRRWI, CLR...
    O << ", ";
    break;
  case 1:
    // CP_COPY_FIRST, CP_COPYx, CP_PASTE_LAST, CP_PASTEx, DCBTCT, DCBTDS, DCB...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32
    O << ' ';
    printOperand(MI, 3, O);
    O << ' ';
    printOperand(MI, 4, O);
    return;
    break;
  case 3:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printU5ImmOperand(MI, 0, O);
    return;
    break;
  case 4:
    // EVSEL
    O << ',';
    printOperand(MI, 2, O);
    return;
    break;
  case 5:
    // LBARXL, LDARXL, LHARXL, LWARXL
    O << ", 1";
    return;
    break;
  case 6:
    // RLDIMI, RLDIMIo
    printU6ImmOperand(MI, 3, O);
    O << ", ";
    printU6ImmOperand(MI, 4, O);
    return;
    break;
  case 7:
    // RLWIMI, RLWIMI8, RLWIMI8o, RLWIMIo
    printU5ImmOperand(MI, 3, O);
    O << ", ";
    printU5ImmOperand(MI, 4, O);
    O << ", ";
    printU5ImmOperand(MI, 5, O);
    return;
    break;
  case 8:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTBs, VSPLTH, VSPLTHs, VSPLTW
    printU5ImmOperand(MI, 1, O);
    return;
    break;
  case 9:
    // VCFSX_0, VCFUX_0, VCTSXS_0, VCTUXS_0
    O << ", 0";
    return;
    break;
  case 10:
    // VEXTRACTD, VEXTRACTUB, VEXTRACTUH, VEXTRACTUW, VINSERTD, VINSERTW
    printU4ImmOperand(MI, 1, O);
    return;
    break;
  case 11:
    // XSMADDADP, XSMADDASP, XSMADDMDP, XSMADDMSP, XSMADDQP, XSMADDQPO, XSMSU...
    printOperand(MI, 3, O);
    return;
    break;
  case 12:
    // XSTSTDCDP, XSTSTDCQP, XSTSTDCSP, XVTSTDCDP, XVTSTDCSP
    printU7ImmOperand(MI, 1, O);
    return;
    break;
  case 13:
    // XXINSERTW
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 33) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDIo, CLRRDI, CLRRDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo...
    printU6ImmOperand(MI, 2, O);
    break;
  case 1:
    // CLRLSLWI, CLRLSLWIo, CLRRWI, CLRRWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo...
    printU5ImmOperand(MI, 2, O);
    break;
  case 2:
    // SUBI, SUBIC, SUBICo, SUBIS, ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, ADDIS,...
    printS16ImmOperand(MI, 2, O);
    return;
    break;
  case 3:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 2, O);
    break;
  case 4:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BCDCFNo, BCDCFSQo, BCDCFZo, BCDCTZo, BCDSETSGNo, CP_COPY, CP_COPY8, CP...
    printU1ImmOperand(MI, 2, O);
    break;
  case 6:
    // CRSET, CRUNSET, V_SET0, V_SET0B, V_SET0H, XXLXORdpz, XXLXORspz, XXLXOR...
    printOperand(MI, 0, O);
    return;
    break;
  case 7:
    // EVADDIW, XXPERMDIs, XXSLDWIs
    printOperand(MI, 1, O);
    break;
  case 8:
    // QVESPLATI, QVESPLATIb, QVESPLATIs, XXSPLTW, XXSPLTWs
    printU2ImmOperand(MI, 2, O);
    return;
    break;
  case 9:
    // QVFMADD, QVFMADDS, QVFMADDSs, QVFMSUB, QVFMSUBS, QVFMSUBSs, QVFNMADD, ...
    printOperand(MI, 3, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 10:
    // XXEXTRACTUW
    printU4ImmOperand(MI, 2, O);
    return;
    break;
  case 11:
    // gBC, gBCL
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 12:
    // gBCA, gBCLA
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 37) & 1) {
    // CLRRDI, CLRRDIo, CLRRWI, CLRRWIo, ROTRDI, ROTRDIo, ROTRWI, ROTRWIo, SL...
    return;
  } else {
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, EXTLDI, EXTLDIo, EXTLWI, EXT...
    O << ", ";
  }


  // Fragment 6 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 38) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo, INSRDI, INSRDIo...
    printU6ImmOperand(MI, 3, O);
    return;
    break;
  case 1:
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    printU5ImmOperand(MI, 3, O);
    break;
  case 2:
    // RLWIMIbm, RLWIMIobm, RLWINMbm, RLWINMobm, RLWNMbm, RLWNMobm, FMADD, FM...
    printOperand(MI, 3, O);
    return;
    break;
  case 3:
    // BCDSRo, BCDSo, BCDTRUNCo
    printU1ImmOperand(MI, 3, O);
    return;
    break;
  case 4:
    // QVALIGNI, QVALIGNIb, QVALIGNIs, XXPERMDI, XXSLDWI
    printU2ImmOperand(MI, 3, O);
    return;
    break;
  case 5:
    // QVFLOGICAL, QVFLOGICALb, QVFLOGICALs
    printU12ImmOperand(MI, 3, O);
    return;
    break;
  case 6:
    // VSHASIGMAD, VSHASIGMAW, VSLDOI
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  case 7:
    // XXPERMDIs, XXSLDWIs
    printU2ImmOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 41) & 1) {
    // RLWINM, RLWINM8, RLWINM8o, RLWINMo, RLWNM, RLWNM8, RLWNM8o, RLWNMo
    O << ", ";
    printU5ImmOperand(MI, 4, O);
    return;
  } else {
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 344 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ '*', '*', 'R', 'O', 'U', 'N', 'D', 'I', 'N', 'G', 32, 'M', 'O', 'D', 'E', '*', '*', 0,
  /* 18 */ '*', '*', 'F', 'R', 'A', 'M', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 36 */ '*', '*', 'B', 'A', 'S', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 53 */ 'f', '1', '0', 0,
  /* 57 */ 'q', '1', '0', 0,
  /* 61 */ 'r', '1', '0', 0,
  /* 65 */ 'v', 's', '1', '0', 0,
  /* 70 */ 'v', '1', '0', 0,
  /* 74 */ 'f', '2', '0', 0,
  /* 78 */ 'q', '2', '0', 0,
  /* 82 */ 'r', '2', '0', 0,
  /* 86 */ 'v', 's', '2', '0', 0,
  /* 91 */ 'v', '2', '0', 0,
  /* 95 */ 'f', '3', '0', 0,
  /* 99 */ 'q', '3', '0', 0,
  /* 103 */ 'r', '3', '0', 0,
  /* 107 */ 'v', 's', '3', '0', 0,
  /* 112 */ 'v', '3', '0', 0,
  /* 116 */ 'v', 's', '4', '0', 0,
  /* 121 */ 'v', 's', '5', '0', 0,
  /* 126 */ 'v', 's', '6', '0', 0,
  /* 131 */ 'f', '0', 0,
  /* 134 */ 'q', '0', 0,
  /* 137 */ 'c', 'r', '0', 0,
  /* 141 */ 'v', 's', '0', 0,
  /* 145 */ 'v', '0', 0,
  /* 148 */ 'f', '1', '1', 0,
  /* 152 */ 'q', '1', '1', 0,
  /* 156 */ 'r', '1', '1', 0,
  /* 160 */ 'v', 's', '1', '1', 0,
  /* 165 */ 'v', '1', '1', 0,
  /* 169 */ 'f', '2', '1', 0,
  /* 173 */ 'q', '2', '1', 0,
  /* 177 */ 'r', '2', '1', 0,
  /* 181 */ 'v', 's', '2', '1', 0,
  /* 186 */ 'v', '2', '1', 0,
  /* 190 */ 'f', '3', '1', 0,
  /* 194 */ 'q', '3', '1', 0,
  /* 198 */ 'r', '3', '1', 0,
  /* 202 */ 'v', 's', '3', '1', 0,
  /* 207 */ 'v', '3', '1', 0,
  /* 211 */ 'v', 's', '4', '1', 0,
  /* 216 */ 'v', 's', '5', '1', 0,
  /* 221 */ 'v', 's', '6', '1', 0,
  /* 226 */ 'f', '1', 0,
  /* 229 */ 'q', '1', 0,
  /* 232 */ 'c', 'r', '1', 0,
  /* 236 */ 'v', 's', '1', 0,
  /* 240 */ 'v', '1', 0,
  /* 243 */ 'f', '1', '2', 0,
  /* 247 */ 'q', '1', '2', 0,
  /* 251 */ 'r', '1', '2', 0,
  /* 255 */ 'v', 's', '1', '2', 0,
  /* 260 */ 'v', '1', '2', 0,
  /* 264 */ 'f', '2', '2', 0,
  /* 268 */ 'q', '2', '2', 0,
  /* 272 */ 'r', '2', '2', 0,
  /* 276 */ 'v', 's', '2', '2', 0,
  /* 281 */ 'v', '2', '2', 0,
  /* 285 */ 'v', 's', '3', '2', 0,
  /* 290 */ 'v', 's', '4', '2', 0,
  /* 295 */ 'v', 's', '5', '2', 0,
  /* 300 */ 'v', 's', '6', '2', 0,
  /* 305 */ 'f', '2', 0,
  /* 308 */ 'q', '2', 0,
  /* 311 */ 'c', 'r', '2', 0,
  /* 315 */ 'v', 's', '2', 0,
  /* 319 */ 'v', '2', 0,
  /* 322 */ 'f', '1', '3', 0,
  /* 326 */ 'q', '1', '3', 0,
  /* 330 */ 'r', '1', '3', 0,
  /* 334 */ 'v', 's', '1', '3', 0,
  /* 339 */ 'v', '1', '3', 0,
  /* 343 */ 'f', '2', '3', 0,
  /* 347 */ 'q', '2', '3', 0,
  /* 351 */ 'r', '2', '3', 0,
  /* 355 */ 'v', 's', '2', '3', 0,
  /* 360 */ 'v', '2', '3', 0,
  /* 364 */ 'v', 's', '3', '3', 0,
  /* 369 */ 'v', 's', '4', '3', 0,
  /* 374 */ 'v', 's', '5', '3', 0,
  /* 379 */ 'v', 's', '6', '3', 0,
  /* 384 */ 'f', '3', 0,
  /* 387 */ 'q', '3', 0,
  /* 390 */ 'c', 'r', '3', 0,
  /* 394 */ 'v', 's', '3', 0,
  /* 398 */ 'v', '3', 0,
  /* 401 */ 'f', '1', '4', 0,
  /* 405 */ 'q', '1', '4', 0,
  /* 409 */ 'r', '1', '4', 0,
  /* 413 */ 'v', 's', '1', '4', 0,
  /* 418 */ 'v', '1', '4', 0,
  /* 422 */ 'f', '2', '4', 0,
  /* 426 */ 'q', '2', '4', 0,
  /* 430 */ 'r', '2', '4', 0,
  /* 434 */ 'v', 's', '2', '4', 0,
  /* 439 */ 'v', '2', '4', 0,
  /* 443 */ 'v', 's', '3', '4', 0,
  /* 448 */ 'v', 's', '4', '4', 0,
  /* 453 */ 'v', 's', '5', '4', 0,
  /* 458 */ 'f', '4', 0,
  /* 461 */ 'q', '4', 0,
  /* 464 */ 'c', 'r', '4', 0,
  /* 468 */ 'v', 's', '4', 0,
  /* 472 */ 'v', '4', 0,
  /* 475 */ 'f', '1', '5', 0,
  /* 479 */ 'q', '1', '5', 0,
  /* 483 */ 'r', '1', '5', 0,
  /* 487 */ 'v', 's', '1', '5', 0,
  /* 492 */ 'v', '1', '5', 0,
  /* 496 */ 'f', '2', '5', 0,
  /* 500 */ 'q', '2', '5', 0,
  /* 504 */ 'r', '2', '5', 0,
  /* 508 */ 'v', 's', '2', '5', 0,
  /* 513 */ 'v', '2', '5', 0,
  /* 517 */ 'v', 's', '3', '5', 0,
  /* 522 */ 'v', 's', '4', '5', 0,
  /* 527 */ 'v', 's', '5', '5', 0,
  /* 532 */ 'f', '5', 0,
  /* 535 */ 'q', '5', 0,
  /* 538 */ 'c', 'r', '5', 0,
  /* 542 */ 'v', 's', '5', 0,
  /* 546 */ 'v', '5', 0,
  /* 549 */ 'f', '1', '6', 0,
  /* 553 */ 'q', '1', '6', 0,
  /* 557 */ 'r', '1', '6', 0,
  /* 561 */ 'v', 's', '1', '6', 0,
  /* 566 */ 'v', '1', '6', 0,
  /* 570 */ 'f', '2', '6', 0,
  /* 574 */ 'q', '2', '6', 0,
  /* 578 */ 'r', '2', '6', 0,
  /* 582 */ 'v', 's', '2', '6', 0,
  /* 587 */ 'v', '2', '6', 0,
  /* 591 */ 'v', 's', '3', '6', 0,
  /* 596 */ 'v', 's', '4', '6', 0,
  /* 601 */ 'v', 's', '5', '6', 0,
  /* 606 */ 'f', '6', 0,
  /* 609 */ 'q', '6', 0,
  /* 612 */ 'c', 'r', '6', 0,
  /* 616 */ 'v', 's', '6', 0,
  /* 620 */ 'v', '6', 0,
  /* 623 */ 'f', '1', '7', 0,
  /* 627 */ 'q', '1', '7', 0,
  /* 631 */ 'r', '1', '7', 0,
  /* 635 */ 'v', 's', '1', '7', 0,
  /* 640 */ 'v', '1', '7', 0,
  /* 644 */ 'f', '2', '7', 0,
  /* 648 */ 'q', '2', '7', 0,
  /* 652 */ 'r', '2', '7', 0,
  /* 656 */ 'v', 's', '2', '7', 0,
  /* 661 */ 'v', '2', '7', 0,
  /* 665 */ 'v', 's', '3', '7', 0,
  /* 670 */ 'v', 's', '4', '7', 0,
  /* 675 */ 'v', 's', '5', '7', 0,
  /* 680 */ 'f', '7', 0,
  /* 683 */ 'q', '7', 0,
  /* 686 */ 'c', 'r', '7', 0,
  /* 690 */ 'v', 's', '7', 0,
  /* 694 */ 'v', '7', 0,
  /* 697 */ 'f', '1', '8', 0,
  /* 701 */ 'q', '1', '8', 0,
  /* 705 */ 'r', '1', '8', 0,
  /* 709 */ 'v', 's', '1', '8', 0,
  /* 714 */ 'v', '1', '8', 0,
  /* 718 */ 'f', '2', '8', 0,
  /* 722 */ 'q', '2', '8', 0,
  /* 726 */ 'r', '2', '8', 0,
  /* 730 */ 'v', 's', '2', '8', 0,
  /* 735 */ 'v', '2', '8', 0,
  /* 739 */ 'v', 's', '3', '8', 0,
  /* 744 */ 'v', 's', '4', '8', 0,
  /* 749 */ 'v', 's', '5', '8', 0,
  /* 754 */ 'f', '8', 0,
  /* 757 */ 'q', '8', 0,
  /* 760 */ 'r', '8', 0,
  /* 763 */ 'v', 's', '8', 0,
  /* 767 */ 'v', '8', 0,
  /* 770 */ 'f', '1', '9', 0,
  /* 774 */ 'q', '1', '9', 0,
  /* 778 */ 'r', '1', '9', 0,
  /* 782 */ 'v', 's', '1', '9', 0,
  /* 787 */ 'v', '1', '9', 0,
  /* 791 */ 'f', '2', '9', 0,
  /* 795 */ 'q', '2', '9', 0,
  /* 799 */ 'r', '2', '9', 0,
  /* 803 */ 'v', 's', '2', '9', 0,
  /* 808 */ 'v', '2', '9', 0,
  /* 812 */ 'v', 's', '3', '9', 0,
  /* 817 */ 'v', 's', '4', '9', 0,
  /* 822 */ 'v', 's', '5', '9', 0,
  /* 827 */ 'f', '9', 0,
  /* 830 */ 'q', '9', 0,
  /* 833 */ 'r', '9', 0,
  /* 836 */ 'v', 's', '9', 0,
  /* 840 */ 'v', '9', 0,
  /* 843 */ 'v', 'r', 's', 'a', 'v', 'e', 0,
  /* 850 */ 's', 'p', 'e', 'f', 's', 'c', 'r', 0,
  /* 858 */ 'x', 'e', 'r', 0,
  /* 862 */ 'l', 'r', 0,
  /* 865 */ 'c', 't', 'r', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    36, 858, 865, 18, 862, 0, 850, 843, 858, 55, 36, 137, 232, 311, 
    390, 464, 538, 612, 686, 865, 131, 226, 305, 384, 458, 532, 606, 680, 
    754, 827, 53, 148, 243, 322, 401, 475, 549, 623, 697, 770, 74, 169, 
    264, 343, 422, 496, 570, 644, 718, 791, 95, 190, 18, 862, 134, 229, 
    308, 387, 461, 535, 609, 683, 757, 830, 57, 152, 247, 326, 405, 479, 
    553, 627, 701, 774, 78, 173, 268, 347, 426, 500, 574, 648, 722, 795, 
    99, 194, 138, 233, 312, 391, 465, 539, 613, 687, 760, 833, 61, 156, 
    251, 330, 409, 483, 557, 631, 705, 778, 82, 177, 272, 351, 430, 504, 
    578, 652, 726, 799, 103, 198, 138, 233, 312, 391, 465, 539, 613, 687, 
    760, 833, 61, 156, 251, 330, 409, 483, 557, 631, 705, 778, 82, 177, 
    272, 351, 430, 504, 578, 652, 726, 799, 103, 198, 145, 240, 319, 398, 
    472, 546, 620, 694, 767, 840, 70, 165, 260, 339, 418, 492, 566, 640, 
    714, 787, 91, 186, 281, 360, 439, 513, 587, 661, 735, 808, 112, 207, 
    145, 240, 319, 398, 472, 546, 620, 694, 767, 840, 70, 165, 260, 339, 
    418, 492, 566, 640, 714, 787, 91, 186, 281, 360, 439, 513, 587, 661, 
    735, 808, 112, 207, 141, 236, 315, 394, 468, 542, 616, 690, 763, 836, 
    65, 160, 255, 334, 413, 487, 561, 635, 709, 782, 86, 181, 276, 355, 
    434, 508, 582, 656, 730, 803, 107, 202, 285, 364, 443, 517, 591, 665, 
    739, 812, 116, 211, 290, 369, 448, 522, 596, 670, 744, 817, 121, 216, 
    295, 374, 453, 527, 601, 675, 749, 822, 126, 221, 300, 379, 138, 233, 
    312, 391, 465, 539, 613, 687, 760, 833, 61, 156, 251, 330, 409, 483, 
    557, 631, 705, 778, 82, 177, 272, 351, 430, 504, 578, 652, 726, 799, 
    103, 198, 55, 245, 551, 54, 402, 698, 265, 571, 96, 150, 477, 772, 
    323, 624, 170, 497, 792, 55, 403, 699, 244, 550, 75, 423, 719, 324, 
    625, 149, 476, 771, 344, 645, 191, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case PPC::ADDPCIS:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (ADDPCIS g8rc:$RT, 0)
      AsmString = "lnia $\x01";
      break;
    }
    return false;
  case PPC::BCC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 12, CR0, condbrtarget:$dst)
      AsmString = "blt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 14, CR0, condbrtarget:$dst)
      AsmString = "blt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 15, CR0, condbrtarget:$dst)
      AsmString = "blt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 44, CR0, condbrtarget:$dst)
      AsmString = "bgt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 46, CR0, condbrtarget:$dst)
      AsmString = "bgt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 47, CR0, condbrtarget:$dst)
      AsmString = "bgt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 76, CR0, condbrtarget:$dst)
      AsmString = "beq $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 78, CR0, condbrtarget:$dst)
      AsmString = "beq- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 79, CR0, condbrtarget:$dst)
      AsmString = "beq+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 68, CR0, condbrtarget:$dst)
      AsmString = "bne $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 70, CR0, condbrtarget:$dst)
      AsmString = "bne- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 71, CR0, condbrtarget:$dst)
      AsmString = "bne+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 12, CR0, abscondbrtarget:$dst)
      AsmString = "blta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 14, CR0, abscondbrtarget:$dst)
      AsmString = "blta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 15, CR0, abscondbrtarget:$dst)
      AsmString = "blta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqa $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqa- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqa+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnea $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnea- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnea+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCCTR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 12, crrc:$cc)
      AsmString = "bltctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 12, CR0)
      AsmString = "bltctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 14, crrc:$cc)
      AsmString = "bltctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 14, CR0)
      AsmString = "bltctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 15, crrc:$cc)
      AsmString = "bltctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 15, CR0)
      AsmString = "bltctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 44, crrc:$cc)
      AsmString = "bgtctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 44, CR0)
      AsmString = "bgtctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 46, crrc:$cc)
      AsmString = "bgtctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 46, CR0)
      AsmString = "bgtctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 47, crrc:$cc)
      AsmString = "bgtctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 47, CR0)
      AsmString = "bgtctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 76, crrc:$cc)
      AsmString = "beqctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 76, CR0)
      AsmString = "beqctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 78, crrc:$cc)
      AsmString = "beqctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 78, CR0)
      AsmString = "beqctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 79, crrc:$cc)
      AsmString = "beqctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 79, CR0)
      AsmString = "beqctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 68, crrc:$cc)
      AsmString = "bnectr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 68, CR0)
      AsmString = "bnectr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 70, crrc:$cc)
      AsmString = "bnectr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 70, CR0)
      AsmString = "bnectr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 71, crrc:$cc)
      AsmString = "bnectr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 71, CR0)
      AsmString = "bnectr+";
      break;
    }
    return false;
  case PPC::BCCCTRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 12, crrc:$cc)
      AsmString = "bltctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 12, CR0)
      AsmString = "bltctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 14, crrc:$cc)
      AsmString = "bltctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 14, CR0)
      AsmString = "bltctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 15, crrc:$cc)
      AsmString = "bltctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 15, CR0)
      AsmString = "bltctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 44, crrc:$cc)
      AsmString = "bgtctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 44, CR0)
      AsmString = "bgtctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 46, crrc:$cc)
      AsmString = "bgtctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 46, CR0)
      AsmString = "bgtctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 47, crrc:$cc)
      AsmString = "bgtctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 47, CR0)
      AsmString = "bgtctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 76, crrc:$cc)
      AsmString = "beqctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 76, CR0)
      AsmString = "beqctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 78, crrc:$cc)
      AsmString = "beqctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 78, CR0)
      AsmString = "beqctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 79, crrc:$cc)
      AsmString = "beqctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 79, CR0)
      AsmString = "beqctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 68, crrc:$cc)
      AsmString = "bnectrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 68, CR0)
      AsmString = "bnectrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 70, crrc:$cc)
      AsmString = "bnectrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 70, CR0)
      AsmString = "bnectrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 71, crrc:$cc)
      AsmString = "bnectrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 71, CR0)
      AsmString = "bnectrl+";
      break;
    }
    return false;
  case PPC::BCCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 12, CR0, condbrtarget:$dst)
      AsmString = "bltl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 14, CR0, condbrtarget:$dst)
      AsmString = "bltl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 15, CR0, condbrtarget:$dst)
      AsmString = "bltl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 44, CR0, condbrtarget:$dst)
      AsmString = "bgtl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 46, CR0, condbrtarget:$dst)
      AsmString = "bgtl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 47, CR0, condbrtarget:$dst)
      AsmString = "bgtl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 76, CR0, condbrtarget:$dst)
      AsmString = "beql $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 78, CR0, condbrtarget:$dst)
      AsmString = "beql- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 79, CR0, condbrtarget:$dst)
      AsmString = "beql+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 68, CR0, condbrtarget:$dst)
      AsmString = "bnel $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 70, CR0, condbrtarget:$dst)
      AsmString = "bnel- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 71, CR0, condbrtarget:$dst)
      AsmString = "bnel+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 12, CR0, abscondbrtarget:$dst)
      AsmString = "bltla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 14, CR0, abscondbrtarget:$dst)
      AsmString = "bltla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 15, CR0, abscondbrtarget:$dst)
      AsmString = "bltla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnela $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnela- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnela+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCLR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 12, crrc:$cc)
      AsmString = "bltlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 12, CR0)
      AsmString = "bltlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 14, crrc:$cc)
      AsmString = "bltlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 14, CR0)
      AsmString = "bltlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 15, crrc:$cc)
      AsmString = "bltlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 15, CR0)
      AsmString = "bltlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 44, crrc:$cc)
      AsmString = "bgtlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 44, CR0)
      AsmString = "bgtlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 46, crrc:$cc)
      AsmString = "bgtlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 46, CR0)
      AsmString = "bgtlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 47, crrc:$cc)
      AsmString = "bgtlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 47, CR0)
      AsmString = "bgtlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 76, crrc:$cc)
      AsmString = "beqlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 76, CR0)
      AsmString = "beqlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 78, crrc:$cc)
      AsmString = "beqlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 78, CR0)
      AsmString = "beqlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 79, crrc:$cc)
      AsmString = "beqlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 79, CR0)
      AsmString = "beqlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 68, crrc:$cc)
      AsmString = "bnelr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 68, CR0)
      AsmString = "bnelr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 70, crrc:$cc)
      AsmString = "bnelr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 70, CR0)
      AsmString = "bnelr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 71, crrc:$cc)
      AsmString = "bnelr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 71, CR0)
      AsmString = "bnelr+";
      break;
    }
    return false;
  case PPC::BCCLRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 12, crrc:$cc)
      AsmString = "bltlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 12, CR0)
      AsmString = "bltlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 14, crrc:$cc)
      AsmString = "bltlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 14, CR0)
      AsmString = "bltlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 15, crrc:$cc)
      AsmString = "bltlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 15, CR0)
      AsmString = "bltlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 44, crrc:$cc)
      AsmString = "bgtlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 44, CR0)
      AsmString = "bgtlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 46, crrc:$cc)
      AsmString = "bgtlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 46, CR0)
      AsmString = "bgtlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 47, crrc:$cc)
      AsmString = "bgtlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 47, CR0)
      AsmString = "bgtlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 76, crrc:$cc)
      AsmString = "beqlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 76, CR0)
      AsmString = "beqlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 78, crrc:$cc)
      AsmString = "beqlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 78, CR0)
      AsmString = "beqlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 79, crrc:$cc)
      AsmString = "beqlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 79, CR0)
      AsmString = "beqlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 68, crrc:$cc)
      AsmString = "bnelrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 68, CR0)
      AsmString = "bnelrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 70, crrc:$cc)
      AsmString = "bnelrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 70, CR0)
      AsmString = "bnelrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 71, crrc:$cc)
      AsmString = "bnelrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 71, CR0)
      AsmString = "bnelrl+";
      break;
    }
    return false;
  case PPC::CMPD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpd $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPDI CR0, g8rc:$rA, s16imm64:$imm)
      AsmString = "cmpdi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CMPLD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpld $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLDI CR0, g8rc:$rA, u16imm64:$imm)
      AsmString = "cmpldi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmplw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLWI CR0, gprc:$rA, u16imm:$imm)
      AsmString = "cmplwi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmpw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPWI CR0, gprc:$rA, s16imm:$imm)
      AsmString = "cmpwi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CNTLZW:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CNTLZW gprc:$rA, gprc:$rS)
      AsmString = "cntlzw $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CNTLZWo:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CNTLZWo gprc:$rA, gprc:$rS)
      AsmString = "cntlzw. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CREQV:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CREQV crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crset $\x01";
      break;
    }
    return false;
  case PPC::CRNOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CRNOR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crnot $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CROR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CROR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crmove $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CRXOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CRXOR crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crclr $\x01";
      break;
    }
    return false;
  case PPC::MBAR:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (MBAR 0)
      AsmString = "mbar";
      break;
    }
    return false;
  case PPC::MFDCR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 128) {
      // (MFDCR gprc:$Rx, 128)
      AsmString = "mfbr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 129) {
      // (MFDCR gprc:$Rx, 129)
      AsmString = "mfbr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 130) {
      // (MFDCR gprc:$Rx, 130)
      AsmString = "mfbr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 131) {
      // (MFDCR gprc:$Rx, 131)
      AsmString = "mfbr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 132) {
      // (MFDCR gprc:$Rx, 132)
      AsmString = "mfbr4 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 133) {
      // (MFDCR gprc:$Rx, 133)
      AsmString = "mfbr5 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 134) {
      // (MFDCR gprc:$Rx, 134)
      AsmString = "mfbr6 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 135) {
      // (MFDCR gprc:$Rx, 135)
      AsmString = "mfbr7 $\x01";
      break;
    }
    return false;
  case PPC::MFSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1) {
      // (MFSPR gprc:$Rx, 1)
      AsmString = "mfxer $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4) {
      // (MFSPR gprc:$Rx, 4)
      AsmString = "mfrtcu $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 5) {
      // (MFSPR gprc:$Rx, 5)
      AsmString = "mfrtcl $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 17) {
      // (MFSPR gprc:$Rx, 17)
      AsmString = "mfdscr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 18) {
      // (MFSPR gprc:$Rx, 18)
      AsmString = "mfdsisr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 19) {
      // (MFSPR gprc:$Rx, 19)
      AsmString = "mfdar $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 990) {
      // (MFSPR gprc:$Rx, 990)
      AsmString = "mfsrr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 991) {
      // (MFSPR gprc:$Rx, 991)
      AsmString = "mfsrr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 28) {
      // (MFSPR gprc:$Rx, 28)
      AsmString = "mfcfar $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 29) {
      // (MFSPR gprc:$Rx, 29)
      AsmString = "mfamr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 48) {
      // (MFSPR gprc:$Rx, 48)
      AsmString = "mfpid $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 989) {
      // (MFSPR gprc:$Rx, 989)
      AsmString = "mftblo $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 988) {
      // (MFSPR gprc:$Rx, 988)
      AsmString = "mftbhi $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 536) {
      // (MFSPR gprc:$Rx, 536)
      AsmString = "mfdbatu $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 537) {
      // (MFSPR gprc:$Rx, 537)
      AsmString = "mfdbatl $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 528) {
      // (MFSPR gprc:$Rx, 528)
      AsmString = "mfibatu $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 529) {
      // (MFSPR gprc:$Rx, 529)
      AsmString = "mfibatl $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 538) {
      // (MFSPR gprc:$Rx, 538)
      AsmString = "mfdbatu $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 539) {
      // (MFSPR gprc:$Rx, 539)
      AsmString = "mfdbatl $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 530) {
      // (MFSPR gprc:$Rx, 530)
      AsmString = "mfibatu $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 531) {
      // (MFSPR gprc:$Rx, 531)
      AsmString = "mfibatl $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 540) {
      // (MFSPR gprc:$Rx, 540)
      AsmString = "mfdbatu $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 541) {
      // (MFSPR gprc:$Rx, 541)
      AsmString = "mfdbatl $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 532) {
      // (MFSPR gprc:$Rx, 532)
      AsmString = "mfibatu $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 533) {
      // (MFSPR gprc:$Rx, 533)
      AsmString = "mfibatl $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 542) {
      // (MFSPR gprc:$Rx, 542)
      AsmString = "mfdbatu $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 543) {
      // (MFSPR gprc:$Rx, 543)
      AsmString = "mfdbatl $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 534) {
      // (MFSPR gprc:$Rx, 534)
      AsmString = "mfibatu $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 535) {
      // (MFSPR gprc:$Rx, 535)
      AsmString = "mfibatl $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1018) {
      // (MFSPR gprc:$Rx, 1018)
      AsmString = "mfdccr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1019) {
      // (MFSPR gprc:$Rx, 1019)
      AsmString = "mficcr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 981) {
      // (MFSPR gprc:$Rx, 981)
      AsmString = "mfdear $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 980) {
      // (MFSPR gprc:$Rx, 980)
      AsmString = "mfesr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 512) {
      // (MFSPR gprc:$Rx, 512)
      AsmString = "mfspefscr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 986) {
      // (MFSPR gprc:$Rx, 986)
      AsmString = "mftcr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 280) {
      // (MFSPR gprc:$RT, 280)
      AsmString = "mfasr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 287) {
      // (MFSPR gprc:$RT, 287)
      AsmString = "mfpvr $\x01";
      break;
    }
    return false;
  case PPC::MFTB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 269) {
      // (MFTB gprc:$Rx, 269)
      AsmString = "mftbu $\x01";
      break;
    }
    return false;
  case PPC::MFVRSAVE:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg())) {
      // (MFVRSAVE gprc:$rS)
      AsmString = "mfvrsave $\x01";
      break;
    }
    return false;
  case PPC::MFVSRD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MFVSRD g8rc:$rA, f8rc:$src)
      AsmString = "mffprd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTCRF8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 255 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTCRF8 255, g8rc:$rA)
      AsmString = "mtcr $\x02";
      break;
    }
    return false;
  case PPC::MTDCR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 128) {
      // (MTDCR gprc:$Rx, 128)
      AsmString = "mtbr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 129) {
      // (MTDCR gprc:$Rx, 129)
      AsmString = "mtbr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 130) {
      // (MTDCR gprc:$Rx, 130)
      AsmString = "mtbr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 131) {
      // (MTDCR gprc:$Rx, 131)
      AsmString = "mtbr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 132) {
      // (MTDCR gprc:$Rx, 132)
      AsmString = "mtbr4 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 133) {
      // (MTDCR gprc:$Rx, 133)
      AsmString = "mtbr5 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 134) {
      // (MTDCR gprc:$Rx, 134)
      AsmString = "mtbr6 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 135) {
      // (MTDCR gprc:$Rx, 135)
      AsmString = "mtbr7 $\x01";
      break;
    }
    return false;
  case PPC::MTFSF:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (MTFSF i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTFSFI crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFIo:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTFSFIo crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (MTFSFo i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTMSR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSR gprc:$RS, 0)
      AsmString = "mtmsr $\x01";
      break;
    }
    return false;
  case PPC::MTMSRD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSRD gprc:$RS, 0)
      AsmString = "mtmsrd $\x01";
      break;
    }
    return false;
  case PPC::MTSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1, gprc:$Rx)
      AsmString = "mtxer $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 17 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 17, gprc:$Rx)
      AsmString = "mtdscr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 18 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 18, gprc:$Rx)
      AsmString = "mtdsisr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 19 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 19, gprc:$Rx)
      AsmString = "mtdar $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 990 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 990, gprc:$Rx)
      AsmString = "mtsrr2 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 991 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 991, gprc:$Rx)
      AsmString = "mtsrr3 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 28 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 28, gprc:$Rx)
      AsmString = "mtcfar $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 29 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 29, gprc:$Rx)
      AsmString = "mtamr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 48 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 48, gprc:$Rx)
      AsmString = "mtpid $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 284 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 284, gprc:$Rx)
      AsmString = "mttbl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 285 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 285, gprc:$Rx)
      AsmString = "mttbu $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 989 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 989, gprc:$Rx)
      AsmString = "mttblo $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 988 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 988, gprc:$Rx)
      AsmString = "mttbhi $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 536 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 536, gprc:$Rx)
      AsmString = "mtdbatu 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 537 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 537, gprc:$Rx)
      AsmString = "mtdbatl 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 528 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 528, gprc:$Rx)
      AsmString = "mtibatu 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 529 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 529, gprc:$Rx)
      AsmString = "mtibatl 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 538 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 538, gprc:$Rx)
      AsmString = "mtdbatu 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 539 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 539, gprc:$Rx)
      AsmString = "mtdbatl 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 530 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 530, gprc:$Rx)
      AsmString = "mtibatu 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 531 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 531, gprc:$Rx)
      AsmString = "mtibatl 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 540 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 540, gprc:$Rx)
      AsmString = "mtdbatu 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 541 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 541, gprc:$Rx)
      AsmString = "mtdbatl 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 532 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 532, gprc:$Rx)
      AsmString = "mtibatu 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 533 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 533, gprc:$Rx)
      AsmString = "mtibatl 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 542 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 542, gprc:$Rx)
      AsmString = "mtdbatu 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 543 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 543, gprc:$Rx)
      AsmString = "mtdbatl 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 534 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 534, gprc:$Rx)
      AsmString = "mtibatu 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 535 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 535, gprc:$Rx)
      AsmString = "mtibatl 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1018 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1018, gprc:$Rx)
      AsmString = "mtdccr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1019 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1019, gprc:$Rx)
      AsmString = "mticcr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 981 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 981, gprc:$Rx)
      AsmString = "mtdear $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 980 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 980, gprc:$Rx)
      AsmString = "mtesr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 512 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 512, gprc:$Rx)
      AsmString = "mtspefscr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 986 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 986, gprc:$Rx)
      AsmString = "mttcr $\x02";
      break;
    }
    return false;
  case PPC::MTVRSAVE:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg())) {
      // (MTVRSAVE gprc:$rS)
      AsmString = "mtvrsave $\x01";
      break;
    }
    return false;
  case PPC::NOR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not $\x01, $\x02";
      break;
    }
    return false;
  case PPC::NOR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::QVFLOGICALb:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 0)
      AsmString = "qvfclr $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 1)
      AsmString = "qvfand $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 4) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 4)
      AsmString = "qvfandc $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 5) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 5)
      AsmString = "qvfctfb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 6) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 6)
      AsmString = "qvfxor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 7)
      AsmString = "qvfor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 8) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 8)
      AsmString = "qvfnor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 9) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 9)
      AsmString = "qvfequ $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 10) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 10)
      AsmString = "qvfnot $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 13) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 13)
      AsmString = "qvforc $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 14) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 14)
      AsmString = "qvfnand $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 15)
      AsmString = "qvfset $\x01";
      break;
    }
    return false;
  case PPC::RLDCL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCL g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDCLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCLo g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDICL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLDICL_32_64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICL_32_64 g8rc:$rA, gprc:$rS, 0, u6imm:$n)
      AsmString = "clrldi $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLDICLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi. $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi. $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLWINM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWINMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi. $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi. $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWNM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNM gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLWNMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNMo gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::SC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SC 0)
      AsmString = "sc";
      break;
    }
    return false;
  case PPC::SUBF8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBF8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (SYNC 1)
      AsmString = "lwsync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (SYNC 2)
      AsmString = "ptesync";
      break;
    }
    return false;
  case PPC::TD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 16, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 4, g8rc:$rA, g8rc:$rB)
      AsmString = "tdeq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 8, g8rc:$rA, g8rc:$rB)
      AsmString = "tdgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 24, g8rc:$rA, g8rc:$rB)
      AsmString = "tdne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 2, g8rc:$rA, g8rc:$rB)
      AsmString = "tdllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 1, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 31, g8rc:$rA, g8rc:$rB)
      AsmString = "tdu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 16, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 4, g8rc:$rA, s16imm:$imm)
      AsmString = "tdeqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 8, g8rc:$rA, s16imm:$imm)
      AsmString = "tdgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 24, g8rc:$rA, s16imm:$imm)
      AsmString = "tdnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 2, g8rc:$rA, s16imm:$imm)
      AsmString = "tdllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 1, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 31, g8rc:$rA, s16imm:$imm)
      AsmString = "tdui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::TLBIE:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TLBIE R0, gprc:$RB)
      AsmString = "tlbie $\x02";
      break;
    }
    return false;
  case PPC::TLBRE2:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLBRE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbrehi $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (TLBRE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbrelo $\x01, $\x02";
      break;
    }
    return false;
  case PPC::TLBWE2:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLBWE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbwehi $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (TLBWE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbwelo $\x01, $\x02";
      break;
    }
    return false;
  case PPC::TW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 16, gprc:$rA, gprc:$rB)
      AsmString = "twlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 4, gprc:$rA, gprc:$rB)
      AsmString = "tweq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 8, gprc:$rA, gprc:$rB)
      AsmString = "twgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 24, gprc:$rA, gprc:$rB)
      AsmString = "twne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 2, gprc:$rA, gprc:$rB)
      AsmString = "twllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 1, gprc:$rA, gprc:$rB)
      AsmString = "twlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 31, gprc:$rA, gprc:$rB)
      AsmString = "twu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 16, gprc:$rA, s16imm:$imm)
      AsmString = "twlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 4, gprc:$rA, s16imm:$imm)
      AsmString = "tweqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 8, gprc:$rA, s16imm:$imm)
      AsmString = "twgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 24, gprc:$rA, s16imm:$imm)
      AsmString = "twnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 2, gprc:$rA, s16imm:$imm)
      AsmString = "twllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 1, gprc:$rA, s16imm:$imm)
      AsmString = "twlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 31, gprc:$rA, s16imm:$imm)
      AsmString = "twui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::VNOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (VNOR vrrc:$vD, vrrc:$vA, vrrc:$vA)
      AsmString = "vnot $\x01, $\x02";
      break;
    }
    return false;
  case PPC::VOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (VOR vrrc:$vD, vrrc:$vA, vrrc:$vA)
      AsmString = "vmr $\x01, $\x02";
      break;
    }
    return false;
  case PPC::WAIT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT 0)
      AsmString = "wait";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (WAIT 1)
      AsmString = "waitrsv";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (WAIT 2)
      AsmString = "waitimpl";
      break;
    }
    return false;
  case PPC::XORI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).getReg() == PPC::R0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XORI R0, R0, 0)
      AsmString = "xnop";
      break;
    }
    return false;
  case PPC::XVCPSGNDP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNDP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovdp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XVCPSGNSP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNSP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovsp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XXPERMDI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 0)
      AsmString = "xxmrghd $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 3)
      AsmString = "xxmrgld $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XXPERMDIs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::gBC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzf $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfa $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCAat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bca+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bca- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCCTR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 12, crbitrc:$bi, 0)
      AsmString = "btctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 4, crbitrc:$bi, 0)
      AsmString = "bfctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 14, crbitrc:$bi, 0)
      AsmString = "btctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 6, crbitrc:$bi, 0)
      AsmString = "bfctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 15, crbitrc:$bi, 0)
      AsmString = "btctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 7, crbitrc:$bi, 0)
      AsmString = "bfctr+ $\x02";
      break;
    }
    return false;
  case PPC::gBCCTRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 12, crbitrc:$bi, 0)
      AsmString = "btctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 4, crbitrc:$bi, 0)
      AsmString = "bfctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 14, crbitrc:$bi, 0)
      AsmString = "btctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 6, crbitrc:$bi, 0)
      AsmString = "bfctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 15, crbitrc:$bi, 0)
      AsmString = "btctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 7, crbitrc:$bi, 0)
      AsmString = "bfctrl+ $\x02";
      break;
    }
    return false;
  case PPC::gBCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzfl $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfla $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCLAat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcla+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcla- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCLR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 12, crbitrc:$bi, 0)
      AsmString = "btlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 4, crbitrc:$bi, 0)
      AsmString = "bflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 14, crbitrc:$bi, 0)
      AsmString = "btlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 6, crbitrc:$bi, 0)
      AsmString = "bflr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 15, crbitrc:$bi, 0)
      AsmString = "btlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 7, crbitrc:$bi, 0)
      AsmString = "bflr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 8, crbitrc:$bi, 0)
      AsmString = "bdnztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 0, crbitrc:$bi, 0)
      AsmString = "bdnzflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 10, crbitrc:$bi, 0)
      AsmString = "bdztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 2, crbitrc:$bi, 0)
      AsmString = "bdzflr $\x02";
      break;
    }
    return false;
  case PPC::gBCLRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 12, crbitrc:$bi, 0)
      AsmString = "btlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 4, crbitrc:$bi, 0)
      AsmString = "bflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 14, crbitrc:$bi, 0)
      AsmString = "btlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 6, crbitrc:$bi, 0)
      AsmString = "bflrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 15, crbitrc:$bi, 0)
      AsmString = "btlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 7, crbitrc:$bi, 0)
      AsmString = "bflrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 8, crbitrc:$bi, 0)
      AsmString = "bdnztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 0, crbitrc:$bi, 0)
      AsmString = "bdnzflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 10, crbitrc:$bi, 0)
      AsmString = "bdztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 2, crbitrc:$bi, 0)
      AsmString = "bdzflrl $\x02";
      break;
    }
    return false;
  case PPC::gBCLat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcl+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcl- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bc+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bc- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void PPCInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printBranchOperand(MI, OpIdx, OS);
    break;
  case 1:
    printAbsBranchOperand(MI, OpIdx, OS);
    break;
  case 2:
    printS16ImmOperand(MI, OpIdx, OS);
    break;
  case 3:
    printU16ImmOperand(MI, OpIdx, OS);
    break;
  case 4:
    printU6ImmOperand(MI, OpIdx, OS);
    break;
  case 5:
    printU5ImmOperand(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
