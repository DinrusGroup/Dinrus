/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void RISCVInstPrinter::printInstruction(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 'l', 'l', 'a', 9, 0,
  /* 5 */ 's', 'f', 'e', 'n', 'c', 'e', '.', 'v', 'm', 'a', 9, 0,
  /* 17 */ 's', 'r', 'a', 9, 0,
  /* 22 */ 'l', 'b', 9, 0,
  /* 26 */ 's', 'b', 9, 0,
  /* 30 */ 'c', '.', 's', 'u', 'b', 9, 0,
  /* 37 */ 'a', 'u', 'i', 'p', 'c', 9, 0,
  /* 44 */ 'c', 's', 'r', 'r', 'c', 9, 0,
  /* 51 */ 'f', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 59 */ 'f', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 68 */ 'f', 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 78 */ 's', 'c', '.', 'd', 9, 0,
  /* 84 */ 'f', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 92 */ 'f', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 101 */ 'f', 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 111 */ 'a', 'm', 'o', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 121 */ 'a', 'm', 'o', 'a', 'n', 'd', '.', 'd', 9, 0,
  /* 131 */ 'f', 'l', 'e', '.', 'd', 9, 0,
  /* 138 */ 'f', 's', 'g', 'n', 'j', '.', 'd', 9, 0,
  /* 147 */ 'f', 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 157 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 165 */ 'f', 'm', 'i', 'n', '.', 'd', 9, 0,
  /* 173 */ 'a', 'm', 'o', 'm', 'i', 'n', '.', 'd', 9, 0,
  /* 183 */ 'f', 's', 'g', 'n', 'j', 'n', '.', 'd', 9, 0,
  /* 193 */ 'a', 'm', 'o', 's', 'w', 'a', 'p', '.', 'd', 9, 0,
  /* 204 */ 'f', 'e', 'q', '.', 'd', 9, 0,
  /* 211 */ 'l', 'r', '.', 'd', 9, 0,
  /* 217 */ 'a', 'm', 'o', 'o', 'r', '.', 'd', 9, 0,
  /* 226 */ 'a', 'm', 'o', 'x', 'o', 'r', '.', 'd', 9, 0,
  /* 236 */ 'f', 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 246 */ 'f', 'c', 'l', 'a', 's', 's', '.', 'd', 9, 0,
  /* 256 */ 'f', 'l', 't', '.', 'd', 9, 0,
  /* 263 */ 'f', 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 272 */ 'f', 'c', 'v', 't', '.', 'l', 'u', '.', 'd', 9, 0,
  /* 283 */ 'a', 'm', 'o', 'm', 'i', 'n', 'u', '.', 'd', 9, 0,
  /* 294 */ 'f', 'c', 'v', 't', '.', 'w', 'u', '.', 'd', 9, 0,
  /* 305 */ 'a', 'm', 'o', 'm', 'a', 'x', 'u', '.', 'd', 9, 0,
  /* 316 */ 'f', 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 324 */ 'f', 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 334 */ 'f', 'm', 'v', '.', 'x', '.', 'd', 9, 0,
  /* 343 */ 'f', 'm', 'a', 'x', '.', 'd', 9, 0,
  /* 351 */ 'a', 'm', 'o', 'm', 'a', 'x', '.', 'd', 9, 0,
  /* 361 */ 'f', 's', 'g', 'n', 'j', 'x', '.', 'd', 9, 0,
  /* 371 */ 'c', '.', 'a', 'd', 'd', 9, 0,
  /* 378 */ 'l', 'a', '.', 't', 'l', 's', '.', 'g', 'd', 9, 0,
  /* 389 */ 'c', '.', 'l', 'd', 9, 0,
  /* 395 */ 'c', '.', 'f', 'l', 'd', 9, 0,
  /* 402 */ 'c', '.', 'a', 'n', 'd', 9, 0,
  /* 409 */ 'c', '.', 's', 'd', 9, 0,
  /* 415 */ 'c', '.', 'f', 's', 'd', 9, 0,
  /* 422 */ 'f', 'e', 'n', 'c', 'e', 9, 0,
  /* 429 */ 'b', 'g', 'e', 9, 0,
  /* 434 */ 'l', 'a', '.', 't', 'l', 's', '.', 'i', 'e', 9, 0,
  /* 445 */ 'b', 'n', 'e', 9, 0,
  /* 450 */ 'm', 'u', 'l', 'h', 9, 0,
  /* 456 */ 's', 'h', 9, 0,
  /* 460 */ 'f', 'e', 'n', 'c', 'e', '.', 'i', 9, 0,
  /* 469 */ 'c', '.', 's', 'r', 'a', 'i', 9, 0,
  /* 477 */ 'c', 's', 'r', 'r', 'c', 'i', 9, 0,
  /* 485 */ 'c', '.', 'a', 'd', 'd', 'i', 9, 0,
  /* 493 */ 'c', '.', 'a', 'n', 'd', 'i', 9, 0,
  /* 501 */ 'w', 'f', 'i', 9, 0,
  /* 506 */ 'c', '.', 'l', 'i', 9, 0,
  /* 512 */ 'c', '.', 's', 'l', 'l', 'i', 9, 0,
  /* 520 */ 'c', '.', 's', 'r', 'l', 'i', 9, 0,
  /* 528 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 534 */ 'c', 's', 'r', 'r', 's', 'i', 9, 0,
  /* 542 */ 's', 'l', 't', 'i', 9, 0,
  /* 548 */ 'c', '.', 'l', 'u', 'i', 9, 0,
  /* 555 */ 'c', 's', 'r', 'r', 'w', 'i', 9, 0,
  /* 563 */ 'c', '.', 'j', 9, 0,
  /* 568 */ 'c', '.', 'e', 'b', 'r', 'e', 'a', 'k', 9, 0,
  /* 578 */ 'f', 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 588 */ 'f', 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 598 */ 'c', '.', 'j', 'a', 'l', 9, 0,
  /* 605 */ 't', 'a', 'i', 'l', 9, 0,
  /* 611 */ 'e', 'c', 'a', 'l', 'l', 9, 0,
  /* 618 */ 's', 'l', 'l', 9, 0,
  /* 623 */ 's', 'c', '.', 'd', '.', 'r', 'l', 9, 0,
  /* 632 */ 'a', 'm', 'o', 'a', 'd', 'd', '.', 'd', '.', 'r', 'l', 9, 0,
  /* 645 */ 'a', 'm', 'o', 'a', 'n', 'd', '.', 'd', '.', 'r', 'l', 9, 0,
  /* 658 */ 'a', 'm', 'o', 'm', 'i', 'n', '.', 'd', '.', 'r', 'l', 9, 0,
  /* 671 */ 'a', 'm', 'o', 's', 'w', 'a', 'p', '.', 'd', '.', 'r', 'l', 9, 0,
  /* 685 */ 'l', 'r', '.', 'd', '.', 'r', 'l', 9, 0,
  /* 694 */ 'a', 'm', 'o', 'o', 'r', '.', 'd', '.', 'r', 'l', 9, 0,
  /* 706 */ 'a', 'm', 'o', 'x', 'o', 'r', '.', 'd', '.', 'r', 'l', 9, 0,
  /* 719 */ 'a', 'm', 'o', 'm', 'i', 'n', 'u', '.', 'd', '.', 'r', 'l', 9, 0,
  /* 733 */ 'a', 'm', 'o', 'm', 'a', 'x', 'u', '.', 'd', '.', 'r', 'l', 9, 0,
  /* 747 */ 'a', 'm', 'o', 'm', 'a', 'x', '.', 'd', '.', 'r', 'l', 9, 0,
  /* 760 */ 's', 'c', '.', 'w', '.', 'r', 'l', 9, 0,
  /* 769 */ 'a', 'm', 'o', 'a', 'd', 'd', '.', 'w', '.', 'r', 'l', 9, 0,
  /* 782 */ 'a', 'm', 'o', 'a', 'n', 'd', '.', 'w', '.', 'r', 'l', 9, 0,
  /* 795 */ 'a', 'm', 'o', 'm', 'i', 'n', '.', 'w', '.', 'r', 'l', 9, 0,
  /* 808 */ 'a', 'm', 'o', 's', 'w', 'a', 'p', '.', 'w', '.', 'r', 'l', 9, 0,
  /* 822 */ 'l', 'r', '.', 'w', '.', 'r', 'l', 9, 0,
  /* 831 */ 'a', 'm', 'o', 'o', 'r', '.', 'w', '.', 'r', 'l', 9, 0,
  /* 843 */ 'a', 'm', 'o', 'x', 'o', 'r', '.', 'w', '.', 'r', 'l', 9, 0,
  /* 856 */ 'a', 'm', 'o', 'm', 'i', 'n', 'u', '.', 'w', '.', 'r', 'l', 9, 0,
  /* 870 */ 'a', 'm', 'o', 'm', 'a', 'x', 'u', '.', 'w', '.', 'r', 'l', 9, 0,
  /* 884 */ 'a', 'm', 'o', 'm', 'a', 'x', '.', 'w', '.', 'r', 'l', 9, 0,
  /* 897 */ 's', 'c', '.', 'd', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 908 */ 'a', 'm', 'o', 'a', 'd', 'd', '.', 'd', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 923 */ 'a', 'm', 'o', 'a', 'n', 'd', '.', 'd', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 938 */ 'a', 'm', 'o', 'm', 'i', 'n', '.', 'd', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 953 */ 'a', 'm', 'o', 's', 'w', 'a', 'p', '.', 'd', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 969 */ 'l', 'r', '.', 'd', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 980 */ 'a', 'm', 'o', 'o', 'r', '.', 'd', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 994 */ 'a', 'm', 'o', 'x', 'o', 'r', '.', 'd', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1009 */ 'a', 'm', 'o', 'm', 'i', 'n', 'u', '.', 'd', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1025 */ 'a', 'm', 'o', 'm', 'a', 'x', 'u', '.', 'd', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1041 */ 'a', 'm', 'o', 'm', 'a', 'x', '.', 'd', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1056 */ 's', 'c', '.', 'w', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1067 */ 'a', 'm', 'o', 'a', 'd', 'd', '.', 'w', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1082 */ 'a', 'm', 'o', 'a', 'n', 'd', '.', 'w', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1097 */ 'a', 'm', 'o', 'm', 'i', 'n', '.', 'w', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1112 */ 'a', 'm', 'o', 's', 'w', 'a', 'p', '.', 'w', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1128 */ 'l', 'r', '.', 'w', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1139 */ 'a', 'm', 'o', 'o', 'r', '.', 'w', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1153 */ 'a', 'm', 'o', 'x', 'o', 'r', '.', 'w', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1168 */ 'a', 'm', 'o', 'm', 'i', 'n', 'u', '.', 'w', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1184 */ 'a', 'm', 'o', 'm', 'a', 'x', 'u', '.', 'w', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1200 */ 'a', 'm', 'o', 'm', 'a', 'x', '.', 'w', '.', 'a', 'q', 'r', 'l', 9, 0,
  /* 1215 */ 's', 'r', 'l', 9, 0,
  /* 1220 */ 'm', 'u', 'l', 9, 0,
  /* 1225 */ 'r', 'e', 'm', 9, 0,
  /* 1230 */ 'c', '.', 'a', 'd', 'd', 'i', '4', 's', 'p', 'n', 9, 0,
  /* 1242 */ 'f', 'e', 'n', 'c', 'e', '.', 't', 's', 'o', 9, 0,
  /* 1253 */ 'c', '.', 'u', 'n', 'i', 'm', 'p', 9, 0,
  /* 1262 */ 'c', '.', 'n', 'o', 'p', 9, 0,
  /* 1269 */ 'c', '.', 'a', 'd', 'd', 'i', '1', '6', 's', 'p', 9, 0,
  /* 1281 */ 'c', '.', 'l', 'd', 's', 'p', 9, 0,
  /* 1289 */ 'c', '.', 'f', 'l', 'd', 's', 'p', 9, 0,
  /* 1298 */ 'c', '.', 's', 'd', 's', 'p', 9, 0,
  /* 1306 */ 'c', '.', 'f', 's', 'd', 's', 'p', 9, 0,
  /* 1315 */ 'c', '.', 'l', 'w', 's', 'p', 9, 0,
  /* 1323 */ 'c', '.', 'f', 'l', 'w', 's', 'p', 9, 0,
  /* 1332 */ 'c', '.', 's', 'w', 's', 'p', 9, 0,
  /* 1340 */ 'c', '.', 'f', 's', 'w', 's', 'p', 9, 0,
  /* 1349 */ 's', 'c', '.', 'd', '.', 'a', 'q', 9, 0,
  /* 1358 */ 'a', 'm', 'o', 'a', 'd', 'd', '.', 'd', '.', 'a', 'q', 9, 0,
  /* 1371 */ 'a', 'm', 'o', 'a', 'n', 'd', '.', 'd', '.', 'a', 'q', 9, 0,
  /* 1384 */ 'a', 'm', 'o', 'm', 'i', 'n', '.', 'd', '.', 'a', 'q', 9, 0,
  /* 1397 */ 'a', 'm', 'o', 's', 'w', 'a', 'p', '.', 'd', '.', 'a', 'q', 9, 0,
  /* 1411 */ 'l', 'r', '.', 'd', '.', 'a', 'q', 9, 0,
  /* 1420 */ 'a', 'm', 'o', 'o', 'r', '.', 'd', '.', 'a', 'q', 9, 0,
  /* 1432 */ 'a', 'm', 'o', 'x', 'o', 'r', '.', 'd', '.', 'a', 'q', 9, 0,
  /* 1445 */ 'a', 'm', 'o', 'm', 'i', 'n', 'u', '.', 'd', '.', 'a', 'q', 9, 0,
  /* 1459 */ 'a', 'm', 'o', 'm', 'a', 'x', 'u', '.', 'd', '.', 'a', 'q', 9, 0,
  /* 1473 */ 'a', 'm', 'o', 'm', 'a', 'x', '.', 'd', '.', 'a', 'q', 9, 0,
  /* 1486 */ 's', 'c', '.', 'w', '.', 'a', 'q', 9, 0,
  /* 1495 */ 'a', 'm', 'o', 'a', 'd', 'd', '.', 'w', '.', 'a', 'q', 9, 0,
  /* 1508 */ 'a', 'm', 'o', 'a', 'n', 'd', '.', 'w', '.', 'a', 'q', 9, 0,
  /* 1521 */ 'a', 'm', 'o', 'm', 'i', 'n', '.', 'w', '.', 'a', 'q', 9, 0,
  /* 1534 */ 'a', 'm', 'o', 's', 'w', 'a', 'p', '.', 'w', '.', 'a', 'q', 9, 0,
  /* 1548 */ 'l', 'r', '.', 'w', '.', 'a', 'q', 9, 0,
  /* 1557 */ 'a', 'm', 'o', 'o', 'r', '.', 'w', '.', 'a', 'q', 9, 0,
  /* 1569 */ 'a', 'm', 'o', 'x', 'o', 'r', '.', 'w', '.', 'a', 'q', 9, 0,
  /* 1582 */ 'a', 'm', 'o', 'm', 'i', 'n', 'u', '.', 'w', '.', 'a', 'q', 9, 0,
  /* 1596 */ 'a', 'm', 'o', 'm', 'a', 'x', 'u', '.', 'w', '.', 'a', 'q', 9, 0,
  /* 1610 */ 'a', 'm', 'o', 'm', 'a', 'x', '.', 'w', '.', 'a', 'q', 9, 0,
  /* 1623 */ 'b', 'e', 'q', 9, 0,
  /* 1628 */ 'c', '.', 'j', 'r', 9, 0,
  /* 1634 */ 'c', '.', 'j', 'a', 'l', 'r', 9, 0,
  /* 1642 */ 'c', '.', 'o', 'r', 9, 0,
  /* 1648 */ 'c', '.', 'x', 'o', 'r', 9, 0,
  /* 1655 */ 'f', 's', 'u', 'b', '.', 's', 9, 0,
  /* 1663 */ 'f', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 1672 */ 'f', 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 1682 */ 'f', 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 1692 */ 'f', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 1700 */ 'f', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 1709 */ 'f', 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 1719 */ 'f', 'l', 'e', '.', 's', 9, 0,
  /* 1726 */ 'f', 's', 'g', 'n', 'j', '.', 's', 9, 0,
  /* 1735 */ 'f', 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 1745 */ 'f', 'm', 'u', 'l', '.', 's', 9, 0,
  /* 1753 */ 'f', 'm', 'i', 'n', '.', 's', 9, 0,
  /* 1761 */ 'f', 's', 'g', 'n', 'j', 'n', '.', 's', 9, 0,
  /* 1771 */ 'f', 'e', 'q', '.', 's', 9, 0,
  /* 1778 */ 'f', 'c', 'l', 'a', 's', 's', '.', 's', 9, 0,
  /* 1788 */ 'f', 'l', 't', '.', 's', 9, 0,
  /* 1795 */ 'f', 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 1804 */ 'f', 'c', 'v', 't', '.', 'l', 'u', '.', 's', 9, 0,
  /* 1815 */ 'f', 'c', 'v', 't', '.', 'w', 'u', '.', 's', 9, 0,
  /* 1826 */ 'f', 'd', 'i', 'v', '.', 's', 9, 0,
  /* 1834 */ 'f', 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 1844 */ 'f', 'm', 'a', 'x', '.', 's', 9, 0,
  /* 1852 */ 'f', 's', 'g', 'n', 'j', 'x', '.', 's', 9, 0,
  /* 1862 */ 'c', 's', 'r', 'r', 's', 9, 0,
  /* 1869 */ 'm', 'r', 'e', 't', 9, 0,
  /* 1875 */ 's', 'r', 'e', 't', 9, 0,
  /* 1881 */ 'u', 'r', 'e', 't', 9, 0,
  /* 1887 */ 'b', 'l', 't', 9, 0,
  /* 1892 */ 's', 'l', 't', 9, 0,
  /* 1897 */ 'l', 'b', 'u', 9, 0,
  /* 1902 */ 'b', 'g', 'e', 'u', 9, 0,
  /* 1908 */ 'm', 'u', 'l', 'h', 'u', 9, 0,
  /* 1915 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 1922 */ 'f', 'c', 'v', 't', '.', 'd', '.', 'l', 'u', 9, 0,
  /* 1933 */ 'f', 'c', 'v', 't', '.', 's', '.', 'l', 'u', 9, 0,
  /* 1944 */ 'r', 'e', 'm', 'u', 9, 0,
  /* 1950 */ 'm', 'u', 'l', 'h', 's', 'u', 9, 0,
  /* 1958 */ 'b', 'l', 't', 'u', 9, 0,
  /* 1964 */ 's', 'l', 't', 'u', 9, 0,
  /* 1970 */ 'd', 'i', 'v', 'u', 9, 0,
  /* 1976 */ 'f', 'c', 'v', 't', '.', 'd', '.', 'w', 'u', 9, 0,
  /* 1987 */ 'f', 'c', 'v', 't', '.', 's', '.', 'w', 'u', 9, 0,
  /* 1998 */ 'l', 'w', 'u', 9, 0,
  /* 2003 */ 'd', 'i', 'v', 9, 0,
  /* 2008 */ 'c', '.', 'm', 'v', 9, 0,
  /* 2014 */ 's', 'c', '.', 'w', 9, 0,
  /* 2020 */ 'f', 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 2030 */ 'a', 'm', 'o', 'a', 'd', 'd', '.', 'w', 9, 0,
  /* 2040 */ 'a', 'm', 'o', 'a', 'n', 'd', '.', 'w', 9, 0,
  /* 2050 */ 'a', 'm', 'o', 'm', 'i', 'n', '.', 'w', 9, 0,
  /* 2060 */ 'a', 'm', 'o', 's', 'w', 'a', 'p', '.', 'w', 9, 0,
  /* 2071 */ 'l', 'r', '.', 'w', 9, 0,
  /* 2077 */ 'a', 'm', 'o', 'o', 'r', '.', 'w', 9, 0,
  /* 2086 */ 'a', 'm', 'o', 'x', 'o', 'r', '.', 'w', 9, 0,
  /* 2096 */ 'f', 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 2106 */ 'a', 'm', 'o', 'm', 'i', 'n', 'u', '.', 'w', 9, 0,
  /* 2117 */ 'a', 'm', 'o', 'm', 'a', 'x', 'u', '.', 'w', 9, 0,
  /* 2128 */ 'f', 'm', 'v', '.', 'x', '.', 'w', 9, 0,
  /* 2137 */ 'a', 'm', 'o', 'm', 'a', 'x', '.', 'w', 9, 0,
  /* 2147 */ 's', 'r', 'a', 'w', 9, 0,
  /* 2153 */ 'c', '.', 's', 'u', 'b', 'w', 9, 0,
  /* 2161 */ 'c', '.', 'a', 'd', 'd', 'w', 9, 0,
  /* 2169 */ 's', 'r', 'a', 'i', 'w', 9, 0,
  /* 2176 */ 'c', '.', 'a', 'd', 'd', 'i', 'w', 9, 0,
  /* 2185 */ 's', 'l', 'l', 'i', 'w', 9, 0,
  /* 2192 */ 's', 'r', 'l', 'i', 'w', 9, 0,
  /* 2199 */ 'c', '.', 'l', 'w', 9, 0,
  /* 2205 */ 'c', '.', 'f', 'l', 'w', 9, 0,
  /* 2212 */ 's', 'l', 'l', 'w', 9, 0,
  /* 2218 */ 's', 'r', 'l', 'w', 9, 0,
  /* 2224 */ 'm', 'u', 'l', 'w', 9, 0,
  /* 2230 */ 'r', 'e', 'm', 'w', 9, 0,
  /* 2236 */ 'c', 's', 'r', 'r', 'w', 9, 0,
  /* 2243 */ 'c', '.', 's', 'w', 9, 0,
  /* 2249 */ 'c', '.', 'f', 's', 'w', 9, 0,
  /* 2256 */ 'r', 'e', 'm', 'u', 'w', 9, 0,
  /* 2263 */ 'd', 'i', 'v', 'u', 'w', 9, 0,
  /* 2270 */ 'd', 'i', 'v', 'w', 9, 0,
  /* 2276 */ 'f', 'm', 'v', '.', 'd', '.', 'x', 9, 0,
  /* 2285 */ 'f', 'm', 'v', '.', 'w', '.', 'x', 9, 0,
  /* 2294 */ 'c', '.', 'b', 'n', 'e', 'z', 9, 0,
  /* 2302 */ 'c', '.', 'b', 'e', 'q', 'z', 9, 0,
  /* 2310 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 2341 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'y', 'p', 'e', 'd', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 2365 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 2390 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 2413 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 2436 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 2458 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 2471 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 2478 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 2488 */ 'D', 'B', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 2498 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 2513 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2479U,	// DBG_VALUE
    2489U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2472U,	// BUNDLE
    2499U,	// LIFETIME_START
    2459U,	// LIFETIME_END
    0U,	// STACKMAP
    2514U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2391U,	// PATCHABLE_FUNCTION_ENTER
    2311U,	// PATCHABLE_RET
    2437U,	// PATCHABLE_FUNCTION_EXIT
    2414U,	// PATCHABLE_TAIL_CALL
    2366U,	// PATCHABLE_EVENT_CALL
    2342U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    4U,	// ADJCALLSTACKDOWN
    4U,	// ADJCALLSTACKUP
    4U,	// BuildPairF64Pseudo
    4470U,	// PseudoAddTPRel
    4U,	// PseudoAtomicLoadNand32
    4U,	// PseudoAtomicLoadNand64
    4U,	// PseudoBR
    4U,	// PseudoBRIND
    21093U,	// PseudoCALL
    4U,	// PseudoCALLIndirect
    266853U,	// PseudoCALLReg
    4U,	// PseudoCmpXchg32
    4U,	// PseudoCmpXchg64
    1118606U,	// PseudoFLD
    1120416U,	// PseudoFLW
    1118626U,	// PseudoFSD
    1120460U,	// PseudoFSW
    266242U,	// PseudoLA
    266619U,	// PseudoLA_TLS_GD
    266675U,	// PseudoLA_TLS_IE
    266263U,	// PseudoLB
    268138U,	// PseudoLBU
    266632U,	// PseudoLD
    266693U,	// PseudoLH
    268151U,	// PseudoLHU
    266749U,	// PseudoLI
    266241U,	// PseudoLLA
    268442U,	// PseudoLW
    268239U,	// PseudoLWU
    4U,	// PseudoMaskedAtomicLoadAdd32
    4U,	// PseudoMaskedAtomicLoadMax32
    4U,	// PseudoMaskedAtomicLoadMin32
    4U,	// PseudoMaskedAtomicLoadNand32
    4U,	// PseudoMaskedAtomicLoadSub32
    4U,	// PseudoMaskedAtomicLoadUMax32
    4U,	// PseudoMaskedAtomicLoadUMin32
    4U,	// PseudoMaskedAtomicSwap32
    4U,	// PseudoMaskedCmpXchg32
    4U,	// PseudoRET
    1118235U,	// PseudoSB
    1118620U,	// PseudoSD
    1118665U,	// PseudoSH
    1120454U,	// PseudoSW
    21086U,	// PseudoTAIL
    4U,	// PseudoTAILIndirect
    4U,	// ReadCycleWide
    4U,	// Select_FPR32_Using_CC_GPR
    4U,	// Select_FPR64_Using_CC_GPR
    4U,	// Select_GPR_Using_CC_GPR
    4U,	// SplitF64Pseudo
    4198774U,	// ADD
    4198888U,	// ADDI
    4200579U,	// ADDIW
    4200564U,	// ADDW
    594032U,	// AMOADD_D
    595279U,	// AMOADD_D_AQ
    594829U,	// AMOADD_D_AQ_RL
    594553U,	// AMOADD_D_RL
    595951U,	// AMOADD_W
    595416U,	// AMOADD_W_AQ
    594988U,	// AMOADD_W_AQ_RL
    594690U,	// AMOADD_W_RL
    594042U,	// AMOAND_D
    595292U,	// AMOAND_D_AQ
    594844U,	// AMOAND_D_AQ_RL
    594566U,	// AMOAND_D_RL
    595961U,	// AMOAND_W
    595429U,	// AMOAND_W_AQ
    595003U,	// AMOAND_W_AQ_RL
    594703U,	// AMOAND_W_RL
    594226U,	// AMOMAXU_D
    595380U,	// AMOMAXU_D_AQ
    594946U,	// AMOMAXU_D_AQ_RL
    594654U,	// AMOMAXU_D_RL
    596038U,	// AMOMAXU_W
    595517U,	// AMOMAXU_W_AQ
    595105U,	// AMOMAXU_W_AQ_RL
    594791U,	// AMOMAXU_W_RL
    594272U,	// AMOMAX_D
    595394U,	// AMOMAX_D_AQ
    594962U,	// AMOMAX_D_AQ_RL
    594668U,	// AMOMAX_D_RL
    596058U,	// AMOMAX_W
    595531U,	// AMOMAX_W_AQ
    595121U,	// AMOMAX_W_AQ_RL
    594805U,	// AMOMAX_W_RL
    594204U,	// AMOMINU_D
    595366U,	// AMOMINU_D_AQ
    594930U,	// AMOMINU_D_AQ_RL
    594640U,	// AMOMINU_D_RL
    596027U,	// AMOMINU_W
    595503U,	// AMOMINU_W_AQ
    595089U,	// AMOMINU_W_AQ_RL
    594777U,	// AMOMINU_W_RL
    594094U,	// AMOMIN_D
    595305U,	// AMOMIN_D_AQ
    594859U,	// AMOMIN_D_AQ_RL
    594579U,	// AMOMIN_D_RL
    595971U,	// AMOMIN_W
    595442U,	// AMOMIN_W_AQ
    595018U,	// AMOMIN_W_AQ_RL
    594716U,	// AMOMIN_W_RL
    594138U,	// AMOOR_D
    595341U,	// AMOOR_D_AQ
    594901U,	// AMOOR_D_AQ_RL
    594615U,	// AMOOR_D_RL
    595998U,	// AMOOR_W
    595478U,	// AMOOR_W_AQ
    595060U,	// AMOOR_W_AQ_RL
    594752U,	// AMOOR_W_RL
    594114U,	// AMOSWAP_D
    595318U,	// AMOSWAP_D_AQ
    594874U,	// AMOSWAP_D_AQ_RL
    594592U,	// AMOSWAP_D_RL
    595981U,	// AMOSWAP_W
    595455U,	// AMOSWAP_W_AQ
    595033U,	// AMOSWAP_W_AQ_RL
    594729U,	// AMOSWAP_W_RL
    594147U,	// AMOXOR_D
    595353U,	// AMOXOR_D_AQ
    594915U,	// AMOXOR_D_AQ_RL
    594627U,	// AMOXOR_D_RL
    596007U,	// AMOXOR_W
    595490U,	// AMOXOR_W_AQ
    595074U,	// AMOXOR_W_AQ_RL
    594764U,	// AMOXOR_W_RL
    4198805U,	// AND
    4198896U,	// ANDI
    266278U,	// AUIPC
    4200024U,	// BEQ
    4198830U,	// BGE
    4200303U,	// BGEU
    4200288U,	// BLT
    4200359U,	// BLTU
    4198846U,	// BNE
    135213U,	// CSRRC
    135646U,	// CSRRCI
    137031U,	// CSRRS
    135703U,	// CSRRSI
    137405U,	// CSRRW
    135724U,	// CSRRWI
    8564U,	// C_ADD
    8678U,	// C_ADDI
    9462U,	// C_ADDI16SP
    4199631U,	// C_ADDI4SPN
    10369U,	// C_ADDIW
    10354U,	// C_ADDW
    8595U,	// C_AND
    8686U,	// C_ANDI
    268543U,	// C_BEQZ
    268535U,	// C_BNEZ
    569U,	// C_EBREAK
    856460U,	// C_FLD
    857354U,	// C_FLDSP
    858270U,	// C_FLW
    857388U,	// C_FLWSP
    856480U,	// C_FSD
    857371U,	// C_FSDSP
    858314U,	// C_FSW
    857405U,	// C_FSWSP
    21044U,	// C_J
    21079U,	// C_JAL
    22115U,	// C_JALR
    22109U,	// C_JR
    856454U,	// C_LD
    857346U,	// C_LDSP
    266747U,	// C_LI
    266789U,	// C_LUI
    858264U,	// C_LW
    857380U,	// C_LWSP
    268249U,	// C_MV
    1263U,	// C_NOP
    9835U,	// C_OR
    856474U,	// C_SD
    857363U,	// C_SDSP
    8705U,	// C_SLLI
    8662U,	// C_SRAI
    8713U,	// C_SRLI
    8223U,	// C_SUB
    10346U,	// C_SUBW
    858308U,	// C_SW
    857397U,	// C_SWSP
    1254U,	// C_UNIMP
    9841U,	// C_XOR
    4200404U,	// DIV
    4200371U,	// DIVU
    4200664U,	// DIVUW
    4200671U,	// DIVW
    571U,	// EBREAK
    612U,	// ECALL
    8392789U,	// FADD_D
    8394397U,	// FADD_S
    266487U,	// FCLASS_D
    268019U,	// FCLASS_S
    2101827U,	// FCVT_D_L
    2103171U,	// FCVT_D_LU
    267923U,	// FCVT_D_S
    268261U,	// FCVT_D_W
    268217U,	// FCVT_D_WU
    2101521U,	// FCVT_LU_D
    2103053U,	// FCVT_LU_S
    2101396U,	// FCVT_L_D
    2102984U,	// FCVT_L_S
    2101485U,	// FCVT_S_D
    2101837U,	// FCVT_S_L
    2103182U,	// FCVT_S_LU
    2103345U,	// FCVT_S_W
    2103236U,	// FCVT_S_WU
    2101543U,	// FCVT_WU_D
    2103064U,	// FCVT_WU_S
    2101573U,	// FCVT_W_D
    2103083U,	// FCVT_W_S
    8393021U,	// FDIV_D
    8394531U,	// FDIV_S
    12711U,	// FENCE
    461U,	// FENCE_I
    1243U,	// FENCE_TSO
    4198605U,	// FEQ_D
    4200172U,	// FEQ_S
    856462U,	// FLD
    4198532U,	// FLE_D
    4200120U,	// FLE_S
    4198657U,	// FLT_D
    4200189U,	// FLT_S
    858272U,	// FLW
    16781405U,	// FMADD_D
    16783013U,	// FMADD_S
    4198744U,	// FMAX_D
    4200245U,	// FMAX_S
    4198566U,	// FMIN_D
    4200154U,	// FMIN_S
    16781372U,	// FMSUB_D
    16782976U,	// FMSUB_S
    8392862U,	// FMUL_D
    8394450U,	// FMUL_S
    268517U,	// FMV_D_X
    268526U,	// FMV_W_X
    266575U,	// FMV_X_D
    268369U,	// FMV_X_W
    16781414U,	// FNMADD_D
    16783022U,	// FNMADD_S
    16781381U,	// FNMSUB_D
    16782985U,	// FNMSUB_S
    856482U,	// FSD
    4198584U,	// FSGNJN_D
    4200162U,	// FSGNJN_S
    4198762U,	// FSGNJX_D
    4200253U,	// FSGNJX_S
    4198539U,	// FSGNJ_D
    4200127U,	// FSGNJ_S
    2101512U,	// FSQRT_D
    2103044U,	// FSQRT_S
    8392756U,	// FSUB_D
    8394360U,	// FSUB_S
    858316U,	// FSW
    266841U,	// JAL
    857701U,	// JALR
    856087U,	// LB
    857962U,	// LBU
    856456U,	// LD
    856517U,	// LH
    857975U,	// LHU
    37076U,	// LR_D
    38276U,	// LR_D_AQ
    37834U,	// LR_D_AQ_RL
    37550U,	// LR_D_RL
    38936U,	// LR_W
    38413U,	// LR_W_AQ
    37993U,	// LR_W_AQ_RL
    37687U,	// LR_W_RL
    266791U,	// LUI
    858266U,	// LW
    858063U,	// LWU
    1870U,	// MRET
    4199621U,	// MUL
    4198851U,	// MULH
    4200351U,	// MULHSU
    4200309U,	// MULHU
    4200625U,	// MULW
    4200045U,	// OR
    4198930U,	// ORI
    4199626U,	// REM
    4200345U,	// REMU
    4200657U,	// REMUW
    4200631U,	// REMW
    856091U,	// SB
    593999U,	// SC_D
    595270U,	// SC_D_AQ
    594818U,	// SC_D_AQ_RL
    594544U,	// SC_D_RL
    595935U,	// SC_W
    595407U,	// SC_W_AQ
    594977U,	// SC_W_AQ_RL
    594681U,	// SC_W_RL
    856476U,	// SD
    266246U,	// SFENCE_VMA
    856521U,	// SH
    4199019U,	// SLL
    4198915U,	// SLLI
    4200586U,	// SLLIW
    4200613U,	// SLLW
    4200293U,	// SLT
    4198943U,	// SLTI
    4200316U,	// SLTIU
    4200365U,	// SLTU
    4198418U,	// SRA
    4198872U,	// SRAI
    4200570U,	// SRAIW
    4200548U,	// SRAW
    1876U,	// SRET
    4199616U,	// SRL
    4198923U,	// SRLI
    4200593U,	// SRLIW
    4200619U,	// SRLW
    4198433U,	// SUB
    4200556U,	// SUBW
    858310U,	// SW
    1256U,	// UNIMP
    1882U,	// URET
    502U,	// WFI
    4200051U,	// XOR
    4198929U,	// XORI
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = 0;
  Bits |= OpInfo0[MI->getOpcode()] << 0;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 12) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_LABEL, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CAL...
    return;
    break;
  case 1:
    // PseudoAddTPRel, PseudoCALL, PseudoCALLReg, PseudoFLD, PseudoFLW, Pseud...
    printOperand(MI, 0, STI, O);
    break;
  case 2:
    // C_ADD, C_ADDI, C_ADDI16SP, C_ADDIW, C_ADDW, C_AND, C_ANDI, C_OR, C_SLL...
    printOperand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 3:
    // FENCE
    printFenceArg(MI, 0, STI, O);
    O << ", ";
    printFenceArg(MI, 1, STI, O);
    return;
    break;
  }


  // Fragment 1 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 14) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // PseudoAddTPRel, PseudoCALLReg, PseudoFLD, PseudoFLW, PseudoFSD, Pseudo...
    O << ", ";
    break;
  case 1:
    // PseudoCALL, PseudoTAIL, C_J, C_JAL, C_JALR, C_JR
    return;
    break;
  case 2:
    // LR_D, LR_D_AQ, LR_D_AQ_RL, LR_D_RL, LR_W, LR_W_AQ, LR_W_AQ_RL, LR_W_RL
    O << ", (";
    printOperand(MI, 1, STI, O);
    O << ')';
    return;
    break;
  }


  // Fragment 2 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 16) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // PseudoAddTPRel, PseudoCALLReg, PseudoLA, PseudoLA_TLS_GD, PseudoLA_TLS...
    printOperand(MI, 1, STI, O);
    break;
  case 1:
    // PseudoFLD, PseudoFLW, PseudoFSD, PseudoFSW, PseudoSB, PseudoSD, Pseudo...
    printOperand(MI, 2, STI, O);
    break;
  case 2:
    // CSRRC, CSRRCI, CSRRS, CSRRSI, CSRRW, CSRRWI
    printCSRSystemRegister(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 18) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // PseudoAddTPRel, PseudoFLD, PseudoFLW, PseudoFSD, PseudoFSW, PseudoSB, ...
    O << ", ";
    break;
  case 1:
    // PseudoCALLReg, PseudoLA, PseudoLA_TLS_GD, PseudoLA_TLS_IE, PseudoLB, P...
    return;
    break;
  case 2:
    // AMOADD_D, AMOADD_D_AQ, AMOADD_D_AQ_RL, AMOADD_D_RL, AMOADD_W, AMOADD_W...
    O << ", (";
    printOperand(MI, 1, STI, O);
    O << ')';
    return;
    break;
  case 3:
    // C_FLD, C_FLDSP, C_FLW, C_FLWSP, C_FSD, C_FSDSP, C_FSW, C_FSWSP, C_LD, ...
    O << '(';
    printOperand(MI, 1, STI, O);
    O << ')';
    return;
    break;
  }


  // Fragment 4 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 20) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // PseudoAddTPRel, ADD, ADDI, ADDIW, ADDW, AND, ANDI, BEQ, BGE, BGEU, BLT...
    printOperand(MI, 2, STI, O);
    break;
  case 1:
    // PseudoFLD, PseudoFLW, PseudoFSD, PseudoFSW, PseudoSB, PseudoSD, Pseudo...
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 2:
    // FCVT_D_L, FCVT_D_LU, FCVT_LU_D, FCVT_LU_S, FCVT_L_D, FCVT_L_S, FCVT_S_...
    printFRMArg(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 22) & 1) {
    // ADD, ADDI, ADDIW, ADDW, AND, ANDI, BEQ, BGE, BGEU, BLT, BLTU, BNE, C_A...
    return;
  } else {
    // PseudoAddTPRel, FADD_D, FADD_S, FDIV_D, FDIV_S, FMADD_D, FMADD_S, FMSU...
    O << ", ";
  }


  // Fragment 6 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 23) & 1) {
    // FADD_D, FADD_S, FDIV_D, FDIV_S, FMUL_D, FMUL_S, FSUB_D, FSUB_S
    printFRMArg(MI, 3, STI, O);
    return;
  } else {
    // PseudoAddTPRel, FMADD_D, FMADD_S, FMSUB_D, FMSUB_S, FNMADD_D, FNMADD_S...
    printOperand(MI, 3, STI, O);
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 24) & 1) {
    // FMADD_D, FMADD_S, FMSUB_D, FMSUB_S, FNMADD_D, FNMADD_S, FNMSUB_D, FNMS...
    O << ", ";
    printFRMArg(MI, 4, STI, O);
    return;
  } else {
    // PseudoAddTPRel
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *RISCVInstPrinter::
getRegisterName(unsigned RegNo, unsigned AltIdx) {
  assert(RegNo && RegNo < 97 && "Invalid register number!");

  static const char AsmStrsABIRegAltName[] = {
  /* 0 */ 'f', 's', '1', '0', 0,
  /* 5 */ 'f', 't', '1', '0', 0,
  /* 10 */ 'f', 'a', '0', 0,
  /* 14 */ 'f', 's', '0', 0,
  /* 18 */ 'f', 't', '0', 0,
  /* 22 */ 'f', 's', '1', '1', 0,
  /* 27 */ 'f', 't', '1', '1', 0,
  /* 32 */ 'f', 'a', '1', 0,
  /* 36 */ 'f', 's', '1', 0,
  /* 40 */ 'f', 't', '1', 0,
  /* 44 */ 'f', 'a', '2', 0,
  /* 48 */ 'f', 's', '2', 0,
  /* 52 */ 'f', 't', '2', 0,
  /* 56 */ 'f', 'a', '3', 0,
  /* 60 */ 'f', 's', '3', 0,
  /* 64 */ 'f', 't', '3', 0,
  /* 68 */ 'f', 'a', '4', 0,
  /* 72 */ 'f', 's', '4', 0,
  /* 76 */ 'f', 't', '4', 0,
  /* 80 */ 'f', 'a', '5', 0,
  /* 84 */ 'f', 's', '5', 0,
  /* 88 */ 'f', 't', '5', 0,
  /* 92 */ 'f', 'a', '6', 0,
  /* 96 */ 'f', 's', '6', 0,
  /* 100 */ 'f', 't', '6', 0,
  /* 104 */ 'f', 'a', '7', 0,
  /* 108 */ 'f', 's', '7', 0,
  /* 112 */ 'f', 't', '7', 0,
  /* 116 */ 'f', 's', '8', 0,
  /* 120 */ 'f', 't', '8', 0,
  /* 124 */ 'f', 's', '9', 0,
  /* 128 */ 'f', 't', '9', 0,
  /* 132 */ 'r', 'a', 0,
  /* 135 */ 'z', 'e', 'r', 'o', 0,
  /* 140 */ 'g', 'p', 0,
  /* 143 */ 's', 'p', 0,
  /* 146 */ 't', 'p', 0,
  };

  static const uint8_t RegAsmOffsetABIRegAltName[] = {
    135, 132, 143, 140, 146, 19, 41, 53, 15, 37, 11, 33, 45, 57, 
    69, 81, 93, 105, 49, 61, 73, 85, 97, 109, 117, 125, 1, 23, 
    65, 77, 89, 101, 18, 18, 40, 40, 52, 52, 64, 64, 76, 76, 
    88, 88, 100, 100, 112, 112, 14, 14, 36, 36, 10, 10, 32, 32, 
    44, 44, 56, 56, 68, 68, 80, 80, 92, 92, 104, 104, 48, 48, 
    60, 60, 72, 72, 84, 84, 96, 96, 108, 108, 116, 116, 124, 124, 
    0, 0, 22, 22, 120, 120, 128, 128, 5, 5, 27, 27, 
  };

  static const char AsmStrsNoRegAltName[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'x', '1', '0', 0,
  /* 8 */ 'f', '2', '0', 0,
  /* 12 */ 'x', '2', '0', 0,
  /* 16 */ 'f', '3', '0', 0,
  /* 20 */ 'x', '3', '0', 0,
  /* 24 */ 'f', '0', 0,
  /* 27 */ 'x', '0', 0,
  /* 30 */ 'f', '1', '1', 0,
  /* 34 */ 'x', '1', '1', 0,
  /* 38 */ 'f', '2', '1', 0,
  /* 42 */ 'x', '2', '1', 0,
  /* 46 */ 'f', '3', '1', 0,
  /* 50 */ 'x', '3', '1', 0,
  /* 54 */ 'f', '1', 0,
  /* 57 */ 'x', '1', 0,
  /* 60 */ 'f', '1', '2', 0,
  /* 64 */ 'x', '1', '2', 0,
  /* 68 */ 'f', '2', '2', 0,
  /* 72 */ 'x', '2', '2', 0,
  /* 76 */ 'f', '2', 0,
  /* 79 */ 'x', '2', 0,
  /* 82 */ 'f', '1', '3', 0,
  /* 86 */ 'x', '1', '3', 0,
  /* 90 */ 'f', '2', '3', 0,
  /* 94 */ 'x', '2', '3', 0,
  /* 98 */ 'f', '3', 0,
  /* 101 */ 'x', '3', 0,
  /* 104 */ 'f', '1', '4', 0,
  /* 108 */ 'x', '1', '4', 0,
  /* 112 */ 'f', '2', '4', 0,
  /* 116 */ 'x', '2', '4', 0,
  /* 120 */ 'f', '4', 0,
  /* 123 */ 'x', '4', 0,
  /* 126 */ 'f', '1', '5', 0,
  /* 130 */ 'x', '1', '5', 0,
  /* 134 */ 'f', '2', '5', 0,
  /* 138 */ 'x', '2', '5', 0,
  /* 142 */ 'f', '5', 0,
  /* 145 */ 'x', '5', 0,
  /* 148 */ 'f', '1', '6', 0,
  /* 152 */ 'x', '1', '6', 0,
  /* 156 */ 'f', '2', '6', 0,
  /* 160 */ 'x', '2', '6', 0,
  /* 164 */ 'f', '6', 0,
  /* 167 */ 'x', '6', 0,
  /* 170 */ 'f', '1', '7', 0,
  /* 174 */ 'x', '1', '7', 0,
  /* 178 */ 'f', '2', '7', 0,
  /* 182 */ 'x', '2', '7', 0,
  /* 186 */ 'f', '7', 0,
  /* 189 */ 'x', '7', 0,
  /* 192 */ 'f', '1', '8', 0,
  /* 196 */ 'x', '1', '8', 0,
  /* 200 */ 'f', '2', '8', 0,
  /* 204 */ 'x', '2', '8', 0,
  /* 208 */ 'f', '8', 0,
  /* 211 */ 'x', '8', 0,
  /* 214 */ 'f', '1', '9', 0,
  /* 218 */ 'x', '1', '9', 0,
  /* 222 */ 'f', '2', '9', 0,
  /* 226 */ 'x', '2', '9', 0,
  /* 230 */ 'f', '9', 0,
  /* 233 */ 'x', '9', 0,
  };

  static const uint8_t RegAsmOffsetNoRegAltName[] = {
    27, 57, 79, 101, 123, 145, 167, 189, 211, 233, 4, 34, 64, 86, 
    108, 130, 152, 174, 196, 218, 12, 42, 72, 94, 116, 138, 160, 182, 
    204, 226, 20, 50, 24, 24, 54, 54, 76, 76, 98, 98, 120, 120, 
    142, 142, 164, 164, 186, 186, 208, 208, 230, 230, 0, 0, 30, 30, 
    60, 60, 82, 82, 104, 104, 126, 126, 148, 148, 170, 170, 192, 192, 
    214, 214, 8, 8, 38, 38, 68, 68, 90, 90, 112, 112, 134, 134, 
    156, 156, 178, 178, 200, 200, 222, 222, 16, 16, 46, 46, 
  };

  switch(AltIdx) {
  default: llvm_unreachable("Invalid register alt name index!");
  case RISCV::ABIRegAltName:
    assert(*(AsmStrsABIRegAltName+RegAsmOffsetABIRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsABIRegAltName+RegAsmOffsetABIRegAltName[RegNo-1];
  case RISCV::NoRegAltName:
    assert(*(AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1];
  }
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool RISCVInstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex);
bool RISCVInstPrinter::printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case RISCV::ADDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(1).getReg() == RISCV::X0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ADDI X0, X0, 0)
      AsmString = "nop";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ADDI GPR:$rd, GPR:$rs, 0)
      AsmString = "mv $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::ADDIW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[RISCV::Feature64Bit]) {
      // (ADDIW GPR:$rd, GPR:$rs, 0)
      AsmString = "sext.w $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::BEQ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == RISCV::X0 &&
        RISCVInstPrinterValidateMCOperand(MI->getOperand(2), STI, 1)) {
      // (BEQ GPR:$rs, X0, simm13_lsb0:$offset)
      AsmString = "beqz $\x01, $\x03";
      break;
    }
    return false;
  case RISCV::BGE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        RISCVInstPrinterValidateMCOperand(MI->getOperand(2), STI, 1)) {
      // (BGE X0, GPR:$rs, simm13_lsb0:$offset)
      AsmString = "blez $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == RISCV::X0 &&
        RISCVInstPrinterValidateMCOperand(MI->getOperand(2), STI, 1)) {
      // (BGE GPR:$rs, X0, simm13_lsb0:$offset)
      AsmString = "bgez $\x01, $\x03";
      break;
    }
    return false;
  case RISCV::BLT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == RISCV::X0 &&
        RISCVInstPrinterValidateMCOperand(MI->getOperand(2), STI, 1)) {
      // (BLT GPR:$rs, X0, simm13_lsb0:$offset)
      AsmString = "bltz $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        RISCVInstPrinterValidateMCOperand(MI->getOperand(2), STI, 1)) {
      // (BLT X0, GPR:$rs, simm13_lsb0:$offset)
      AsmString = "bgtz $\x02, $\x03";
      break;
    }
    return false;
  case RISCV::BNE:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == RISCV::X0 &&
        RISCVInstPrinterValidateMCOperand(MI->getOperand(2), STI, 1)) {
      // (BNE GPR:$rs, X0, simm13_lsb0:$offset)
      AsmString = "bnez $\x01, $\x03";
      break;
    }
    return false;
  case RISCV::CSRRC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CSRRC X0, csr_sysreg:$csr, GPR:$rs)
      AsmString = "csrc $\xFF\x02\x01, $\x03";
      break;
    }
    return false;
  case RISCV::CSRRCI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0) {
      // (CSRRCI X0, csr_sysreg:$csr, uimm5:$imm)
      AsmString = "csrci $\xFF\x02\x01, $\x03";
      break;
    }
    return false;
  case RISCV::CSRRS:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).getReg() == RISCV::X0 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (CSRRS GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 }, X0)
      AsmString = "frcsr $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).getReg() == RISCV::X0 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (CSRRS GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }, X0)
      AsmString = "frrm $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1 &&
        MI->getOperand(2).getReg() == RISCV::X0 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (CSRRS GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, X0)
      AsmString = "frflags $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3074 &&
        MI->getOperand(2).getReg() == RISCV::X0) {
      // (CSRRS GPR:$rd, { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }, X0)
      AsmString = "rdinstret $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3072 &&
        MI->getOperand(2).getReg() == RISCV::X0) {
      // (CSRRS GPR:$rd, { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, X0)
      AsmString = "rdcycle $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3073 &&
        MI->getOperand(2).getReg() == RISCV::X0) {
      // (CSRRS GPR:$rd, { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, X0)
      AsmString = "rdtime $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3202 &&
        MI->getOperand(2).getReg() == RISCV::X0 &&
        !STI.getFeatureBits()[RISCV::Feature64Bit]) {
      // (CSRRS GPR:$rd, { 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0 }, X0)
      AsmString = "rdinstreth $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3200 &&
        MI->getOperand(2).getReg() == RISCV::X0 &&
        !STI.getFeatureBits()[RISCV::Feature64Bit]) {
      // (CSRRS GPR:$rd, { 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 }, X0)
      AsmString = "rdcycleh $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3201 &&
        MI->getOperand(2).getReg() == RISCV::X0 &&
        !STI.getFeatureBits()[RISCV::Feature64Bit]) {
      // (CSRRS GPR:$rd, { 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1 }, X0)
      AsmString = "rdtimeh $\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).getReg() == RISCV::X0) {
      // (CSRRS GPR:$rd, csr_sysreg:$csr, X0)
      AsmString = "csrr $\x01, $\xFF\x02\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CSRRS X0, csr_sysreg:$csr, GPR:$rs)
      AsmString = "csrs $\xFF\x02\x01, $\x03";
      break;
    }
    return false;
  case RISCV::CSRRSI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0) {
      // (CSRRSI X0, csr_sysreg:$csr, uimm5:$imm)
      AsmString = "csrsi $\xFF\x02\x01, $\x03";
      break;
    }
    return false;
  case RISCV::CSRRW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (CSRRW X0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 }, GPR:$rs)
      AsmString = "fscsr $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (CSRRW X0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }, GPR:$rs)
      AsmString = "fsrm $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (CSRRW X0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, GPR:$rs)
      AsmString = "fsflags $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CSRRW X0, csr_sysreg:$csr, GPR:$rs)
      AsmString = "csrw $\xFF\x02\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (CSRRW GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 }, GPR:$rs)
      AsmString = "fscsr $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (CSRRW GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }, GPR:$rs)
      AsmString = "fsrm $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (CSRRW GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, GPR:$rs)
      AsmString = "fsflags $\x01, $\x03";
      break;
    }
    return false;
  case RISCV::CSRRWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (CSRRWI X0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }, uimm5:$imm)
      AsmString = "fsrmi $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (CSRRWI X0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, uimm5:$imm)
      AsmString = "fsflagsi $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0) {
      // (CSRRWI X0, csr_sysreg:$csr, uimm5:$imm)
      AsmString = "csrwi $\xFF\x02\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (CSRRWI GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }, uimm5:$imm)
      AsmString = "fsrmi $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (CSRRWI GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, uimm5:$imm)
      AsmString = "fsflagsi $\x01, $\x03";
      break;
    }
    return false;
  case RISCV::FADD_D:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FADD_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, { 1, 1, 1 })
      AsmString = "fadd.d $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case RISCV::FADD_S:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FADD_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, { 1, 1, 1 })
      AsmString = "fadd.s $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case RISCV::FCVT_D_L:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD] &&
        STI.getFeatureBits()[RISCV::Feature64Bit]) {
      // (FCVT_D_L FPR64:$rd, GPR:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.d.l $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FCVT_D_LU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD] &&
        STI.getFeatureBits()[RISCV::Feature64Bit]) {
      // (FCVT_D_LU FPR64:$rd, GPR:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.d.lu $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FCVT_LU_D:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD] &&
        STI.getFeatureBits()[RISCV::Feature64Bit]) {
      // (FCVT_LU_D GPR:$rd, FPR64:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.lu.d $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FCVT_LU_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF] &&
        STI.getFeatureBits()[RISCV::Feature64Bit]) {
      // (FCVT_LU_S GPR:$rd, FPR32:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.lu.s $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FCVT_L_D:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD] &&
        STI.getFeatureBits()[RISCV::Feature64Bit]) {
      // (FCVT_L_D GPR:$rd, FPR64:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.l.d $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FCVT_L_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF] &&
        STI.getFeatureBits()[RISCV::Feature64Bit]) {
      // (FCVT_L_S GPR:$rd, FPR32:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.l.s $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FCVT_S_D:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FCVT_S_D FPR32:$rd, FPR64:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.s.d $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FCVT_S_L:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF] &&
        STI.getFeatureBits()[RISCV::Feature64Bit]) {
      // (FCVT_S_L FPR32:$rd, GPR:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.s.l $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FCVT_S_LU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF] &&
        STI.getFeatureBits()[RISCV::Feature64Bit]) {
      // (FCVT_S_LU FPR32:$rd, GPR:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.s.lu $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FCVT_S_W:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FCVT_S_W FPR32:$rd, GPR:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.s.w $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FCVT_S_WU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FCVT_S_WU FPR32:$rd, GPR:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.s.wu $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FCVT_WU_D:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FCVT_WU_D GPR:$rd, FPR64:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.wu.d $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FCVT_WU_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FCVT_WU_S GPR:$rd, FPR32:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.wu.s $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FCVT_W_D:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FCVT_W_D GPR:$rd, FPR64:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.w.d $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FCVT_W_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FCVT_W_S GPR:$rd, FPR32:$rs1, { 1, 1, 1 })
      AsmString = "fcvt.w.s $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FDIV_D:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FDIV_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, { 1, 1, 1 })
      AsmString = "fdiv.d $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case RISCV::FDIV_S:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FDIV_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, { 1, 1, 1 })
      AsmString = "fdiv.s $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case RISCV::FENCE:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 15) {
      // (FENCE 15, 15)
      AsmString = "fence";
      break;
    }
    return false;
  case RISCV::FMADD_D:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FMADD_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, FPR64:$rs3, { 1, 1, 1 })
      AsmString = "fmadd.d $\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case RISCV::FMADD_S:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FMADD_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, FPR32:$rs3, { 1, 1, 1 })
      AsmString = "fmadd.s $\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case RISCV::FMSUB_D:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FMSUB_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, FPR64:$rs3, { 1, 1, 1 })
      AsmString = "fmsub.d $\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case RISCV::FMSUB_S:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FMSUB_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, FPR32:$rs3, { 1, 1, 1 })
      AsmString = "fmsub.s $\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case RISCV::FMUL_D:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FMUL_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, { 1, 1, 1 })
      AsmString = "fmul.d $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case RISCV::FMUL_S:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FMUL_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, { 1, 1, 1 })
      AsmString = "fmul.s $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case RISCV::FNMADD_D:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FNMADD_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, FPR64:$rs3, { 1, 1, 1 })
      AsmString = "fnmadd.d $\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case RISCV::FNMADD_S:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FNMADD_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, FPR32:$rs3, { 1, 1, 1 })
      AsmString = "fnmadd.s $\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case RISCV::FNMSUB_D:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FNMSUB_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, FPR64:$rs3, { 1, 1, 1 })
      AsmString = "fnmsub.d $\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case RISCV::FNMSUB_S:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FNMSUB_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, FPR32:$rs3, { 1, 1, 1 })
      AsmString = "fnmsub.s $\x01, $\x02, $\x03, $\x04";
      break;
    }
    return false;
  case RISCV::FSGNJN_D:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FSGNJN_D FPR64:$rd, FPR64:$rs, FPR64:$rs)
      AsmString = "fneg.d $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FSGNJN_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FSGNJN_S FPR32:$rd, FPR32:$rs, FPR32:$rs)
      AsmString = "fneg.s $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FSGNJX_D:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FSGNJX_D FPR64:$rd, FPR64:$rs, FPR64:$rs)
      AsmString = "fabs.d $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FSGNJX_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FSGNJX_S FPR32:$rd, FPR32:$rs, FPR32:$rs)
      AsmString = "fabs.s $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FSGNJ_D:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FSGNJ_D FPR64:$rd, FPR64:$rs, FPR64:$rs)
      AsmString = "fmv.d $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FSGNJ_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FSGNJ_S FPR32:$rd, FPR32:$rs, FPR32:$rs)
      AsmString = "fmv.s $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FSQRT_D:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FSQRT_D FPR64:$rd, FPR64:$rs1, { 1, 1, 1 })
      AsmString = "fsqrt.d $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FSQRT_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FSQRT_S FPR32:$rd, FPR32:$rs1, { 1, 1, 1 })
      AsmString = "fsqrt.s $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::FSUB_D:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtD]) {
      // (FSUB_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, { 1, 1, 1 })
      AsmString = "fsub.d $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case RISCV::FSUB_S:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::FPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7 &&
        STI.getFeatureBits()[RISCV::FeatureStdExtF]) {
      // (FSUB_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, { 1, 1, 1 })
      AsmString = "fsub.s $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case RISCV::JAL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        RISCVInstPrinterValidateMCOperand(MI->getOperand(1), STI, 2)) {
      // (JAL X0, simm21_lsb0_jal:$offset)
      AsmString = "j $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == RISCV::X1 &&
        RISCVInstPrinterValidateMCOperand(MI->getOperand(1), STI, 2)) {
      // (JAL X1, simm21_lsb0_jal:$offset)
      AsmString = "jal $\x02";
      break;
    }
    return false;
  case RISCV::JALR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(1).getReg() == RISCV::X1 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (JALR X0, X1, 0)
      AsmString = "ret";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (JALR X0, GPR:$rs, 0)
      AsmString = "jr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (JALR X1, GPR:$rs, 0)
      AsmString = "jalr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (JALR GPR:$rd, GPR:$rs, 0)
      AsmString = "jalr $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        RISCVInstPrinterValidateMCOperand(MI->getOperand(2), STI, 3)) {
      // (JALR X0, GPR:$rs, simm12:$offset)
      AsmString = "jr $\x03($\x02)";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == RISCV::X1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        RISCVInstPrinterValidateMCOperand(MI->getOperand(2), STI, 3)) {
      // (JALR X1, GPR:$rs, simm12:$offset)
      AsmString = "jalr $\x03($\x02)";
      break;
    }
    return false;
  case RISCV::SFENCE_VMA:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == RISCV::X0 &&
        MI->getOperand(1).getReg() == RISCV::X0) {
      // (SFENCE_VMA X0, X0)
      AsmString = "sfence.vma";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == RISCV::X0) {
      // (SFENCE_VMA GPR:$rs, X0)
      AsmString = "sfence.vma $\x01";
      break;
    }
    return false;
  case RISCV::SLT:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == RISCV::X0) {
      // (SLT GPR:$rd, GPR:$rs, X0)
      AsmString = "sltz $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == RISCV::X0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SLT GPR:$rd, X0, GPR:$rs)
      AsmString = "sgtz $\x01, $\x03";
      break;
    }
    return false;
  case RISCV::SLTIU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (SLTIU GPR:$rd, GPR:$rs, 1)
      AsmString = "seqz $\x01, $\x02";
      break;
    }
    return false;
  case RISCV::SLTU:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == RISCV::X0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SLTU GPR:$rd, X0, GPR:$rs)
      AsmString = "snez $\x01, $\x03";
      break;
    }
    return false;
  case RISCV::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == RISCV::X0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB GPR:$rd, X0, GPR:$rs)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    return false;
  case RISCV::SUBW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == RISCV::X0 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[RISCV::Feature64Bit]) {
      // (SUBW GPR:$rd, X0, GPR:$rs)
      AsmString = "negw $\x01, $\x03";
      break;
    }
    return false;
  case RISCV::XORI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(RISCV::GPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == -1) {
      // (XORI GPR:$rd, GPR:$rs, -1)
      AsmString = "not $\x01, $\x02";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void RISCVInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printCSRSystemRegister(MI, OpIdx, STI, OS);
    break;
  }
}

static bool RISCVInstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex) {
  switch (PredicateIndex) {
  default:
    llvm_unreachable("Unknown MCOperandPredicate kind");
    break;
  case 1: {

    int64_t Imm;
    if (MCOp.evaluateAsConstantImm(Imm))
      return isShiftedInt<12, 1>(Imm);
    return MCOp.isBareSymbolRef();
  
    }
  case 2: {

    int64_t Imm;
    if (MCOp.evaluateAsConstantImm(Imm))
      return isShiftedInt<20, 1>(Imm);
    return MCOp.isBareSymbolRef();
  
    }
  case 3: {

    int64_t Imm;
    if (MCOp.evaluateAsConstantImm(Imm))
      return isInt<12>(Imm);
    return MCOp.isBareSymbolRef();
  
    }
  }
}

#endif // PRINT_ALIAS_INSTR
