module dbi.connect;
//Предполагается последующее создание общего модуля Dinrus.DBI.dll
import dbi.sqlite.all;

enum ПТипБД
{
Sqlite,
ODBC,
MySQL,
Pg,
MSQL,
MSSQL
}

class ПодключениеКБазеДанных
{
private:
БДЭскюлайт лайт;
ПгБД пг;
ОдбцБД одбц;
МайЭсКюЭлБД май;
ЭмЭсЭсКюЭлБД мс;
ЭмЭсКюЭлБД м;
ПТипБД типБд;

public:

	this (ПТипБД тип)
	{
	
	switch(тип)
		{
			case ПТипБД.Sqlite:
			this.лайт = new БДЭскюлайт();
			this.типБд = ПТипБД.Sqlite;
			//Здесь реально должно появляться окно запроса параметров подключения 
			//и вторым шагом - проводиться подключение!))
			break;
			
			case ПТипБД.ODBC: 
			this.одбц = new ОдбцБД();
			this.типБд = ПТипБД.ODBC;
			//То же (Нереализовано)
			break;
			
			case ПТипБД.MySQL:
			this.май = new МайЭсКюЭлБД();
			this.типБд = ПТипБД.MySQL;
			//То же (Нереализовано)
			break;
			
			case ПТипБД.Pg:
			this.пг = new ПгБД();
			this.типБд = ПТипБД.Pg;
			//То же (Нереализовано)
			break;
			
			case ПТипБД.MSQL:
			this.м = new ЭмЭсКюЭлБД();
			this.типБд = ПТипБД.MSQL;
			//То же (Нереализовано)
			break;
			
			case ПТипБД.MSSQL:
			this.мс =new ЭмЭсЭсКюЭлБД();
			this.типБд = ПТипБД.MSSQL;
			//То же (Нереализовано)
			break;
			
			default:	
		}

	}
	
	проц установи(ткст имяБазы, ткст имя_пользователя = пусто, ткст пароль = пусто)
	{
	switch(this.типБД)
		{
			case ПТипБД.Sqlite:
			this.лайт.подключись(имяБазы, имя_пользователя, пароль);
			break;
			
			case ПТипБД.ODBC: 
			this.одбц.подключись(имяБазы, имя_пользователя, пароль);
			break;
			
			case ПТипБД.MySQL:
			this.май.подключись (имяБазы, имя_пользователя, пароль, пусто, пусто);
			break;
			
			case ПТипБД.Pg:
			this.пг.подключись(имяБазы, имя_пользователя, пароль);
			break;
			
			case ПТипБД.MSQL:
			this.м.подключись(парамы, имя_пользователя, пароль);
			break;
			
			case ПТипБД.MSSQL:
			this.мс.подключись(парамы, имя_пользователя, пароль);
			break;
			default:	
		}
	
	
	}


}